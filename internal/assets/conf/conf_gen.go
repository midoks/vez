// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\xe4\xb6\x11\xbe\xf3\x29\x0a\x42\x0c\xcc\x00\x1a\x8d\x7a\x36\x18\x6f\xba\xa1\x43\xb0\x89\xd7\x06\x36\x89\xe1\x99\x85\x01\x2f\x06\x5a\x36\x59\x92\x98\xa6\x58\x02\x49\xf5\xcf\x9e\x72\xcb\x03\x04\xc8\x5b\x24\xe7\x5c\xf2\x36\x46\xf2\x1a\x41\x51\x52\x6f\x4f\x3c\x01\x7c\xc9\x49\x22\x59\xf5\x55\xb1\x7e\xbe\xa2\x1c\x86\xda\xc9\x1e\xa1\x82\x2c\x98\x5e\x77\x31\x13\x5b\x2f\x9d\xfe\xc9\xae\x1f\x5d\x3d\x06\xf4\xbc\xe7\x89\xe6\x9d\x9e\x74\x92\xd2\xb8\xcf\x84\xf8\xa0\x71\x3b\xb6\x4f\x62\x20\x1f\xab\xfb\xf2\xbe\x14\x42\x7c\xb0\xd4\x3e\x89\x0d\x3c\x76\x08\x96\x5a\x68\xc8\xf7\x32\x02\x9a\xd8\xa1\x87\xec\x8f\x81\x5c\x06\xe4\x21\x8b\x78\x8c\x99\x98\x8f\xab\x65\xcd\xa6\xea\x41\xc6\x8e\xb7\x2c\xb5\x81\xcd\x78\xd4\x26\x3c\x81\xd8\x40\x88\xe4\x11\x02\x86\x60\xc8\x09\x74\x72\x6b\xd9\x9f\x46\xda\x80\x42\x6a\xed\x31\x04\xd6\x5c\xdd\x7d\x59\x94\x45\x59\xac\xd6\xf7\xaf\xbe\xfc\x55\x26\x06\x19\xc2\x81\xbc\xe6\xb3\x4c\xe8\x2d\x7f\x4b\x86\x9e\xa1\x16\x8f\xe7\x25\x0c\x9e\xf6\x46\xa3\xcf\xcf\x8e\xf7\xd8\x93\x3f\x65\x39\x64\x8d\xb1\x98\xe5\xe9\x0e\xc9\xb1\xac\x10\x8b\x38\x54\x30\xc9\xcd\x70\x8a\x5c\x63\xda\xd1\xcb\xc8\xa0\x0d\x79\xf0\x18\x06\x54\xd1\xec\xf1\x6c\x63\x2d\x36\x70\x33\xeb\xad\x41\x13\x06\x70\x14\xc1\x21\x6a\x90\xee\x34\x83\xc0\x09\x63\x12\x64\xf3\xeb\xb3\xa3\xbc\x02\x8e\x57\x0e\x58\xb4\x05\x7c\xd4\x32\xca\xdb\xf9\x34\x7c\x4c\x1a\xc9\xcb\x35\x38\x8c\x07\xf2\xbb\x2a\xaa\x21\xe7\x50\x55\x29\x36\xf9\x12\x9a\xaa\x97\x4a\x7a\x72\xb9\xde\x56\x65\x3e\x10\xd9\x3a\x98\x4f\x58\xad\xca\x32\x37\xda\x62\x1d\x4d\x8f\x34\xc6\x6a\xf5\xba\x3c\x5f\xb8\x9e\x9d\xab\xe0\x99\xdd\xf3\xf5\x69\x67\x10\x52\x69\x45\x9a\x93\x17\x2f\xc2\x6c\x34\xba\x68\x1a\x83\xbe\x10\x93\xf0\x52\x87\xa6\xb6\x66\x87\xb5\xe9\xa5\xb1\x62\x03\xdf\x77\x98\xd2\xc0\x28\x18\x17\x60\xe3\xe0\xeb\xc7\xc7\x6f\x1f\x80\x9c\x3d\x9d\x11\x02\xaa\xd1\x33\x46\xf4\x23\xce\x9e\xbc\x7d\x03\xc6\x45\xf4\x7b\x69\x59\x2b\xa0\x22\xa7\x43\xca\xc8\xe2\x0b\x5f\xa0\x10\xad\xaa\xcf\x82\x15\xbc\xba\x2f\xcb\x19\xa1\x97\x47\xd3\x8f\x3d\x58\xd3\x20\x70\x28\xfe\x1b\x47\x2e\x48\x85\xe8\xe5\xb1\x66\xb9\x14\x32\xa8\xe0\xf5\xfd\x2f\xcf\x38\x97\x31\x61\xb5\x37\x0f\xdf\x7d\x05\x91\x76\xe8\x0a\xa1\x82\x6f\xea\xe7\x71\xa8\x79\x8f\xdb\x4a\x49\xd5\xe1\x52\xa6\x69\x01\x52\xcb\x21\xbe\x5c\xa3\x53\x61\x4e\x45\xda\x63\x9f\xe4\xb3\x42\xcc\x1a\x97\x65\xfa\x15\x7d\x56\x4c\x71\xcc\xff\x47\xb0\x0a\x71\x11\x98\xd5\x5d\xb9\xe8\x4e\xa6\x40\x3a\x7d\x61\x2a\xe7\xaa\x75\x5c\xe8\xe4\xa0\xa3\x10\x61\x6e\xce\xf5\xff\xab\x22\xe7\x1e\x4a\xe6\xd7\xf0\xf1\x33\x01\xac\x56\x77\xab\xd5\x47\x91\x9c\x60\xc7\x9f\xed\x0b\xf1\xe1\x80\xdb\x25\xac\x83\xa7\x48\x8a\x2c\xc4\x4e\x46\x30\x01\xc6\x80\x7a\xaa\x39\xbf\x47\xd0\xc6\xa3\x8a\x10\xbd\x6c\x1a\xa3\x78\x9f\x6b\x59\x0e\x83\x35\x2a\x75\x78\x21\x36\xf0\x66\xf4\x1e\x5d\xb4\x27\x08\xe3\xc0\xc4\x18\x20\xeb\x62\x1c\x38\x2b\xfc\x0d\x89\x42\x54\x6b\xe6\x90\x8d\xce\x1c\x27\x06\x99\x4c\x57\xc0\x52\xb3\x43\x0b\xa3\x45\x82\x2d\x82\x35\x21\xa2\x43\x0d\xdb\xd3\x4f\x2d\xb3\x56\xcd\xf2\x50\x41\x99\xae\x58\x8a\xe5\x5a\xe4\x23\xb8\xb1\xdf\x4e\x0d\xf4\xb3\x90\x92\x0e\x13\x69\xf9\x9a\x79\x52\x6c\xe0\x2d\x3a\xf4\x32\x22\x84\x88\x43\xca\xe3\x1f\x3c\x34\x9e\x7a\x90\x50\x0c\xcd\x71\xa2\x22\x3c\xb2\x26\xea\xe9\x84\xb1\xbf\x37\x4e\xd3\x21\x80\x42\xcf\xad\xae\x26\x08\x66\x82\x2b\x4d\x62\x93\xb8\xae\x21\xdf\x62\x64\xe7\x26\xfd\xa4\x38\x78\xb3\x67\xe1\x1d\x9e\xae\xd9\xdc\x2f\x80\x06\x74\x21\x58\x18\x76\x2a\xac\xee\xe0\xc6\xb8\x84\x9a\xac\xdf\xd0\x18\xe7\x15\xf6\x70\xe3\x68\x87\xa7\xf0\xf3\xb4\x76\x78\x5a\x94\xf8\x20\xf0\x8f\xc6\x20\x78\x51\xa7\x5b\x55\xa0\xc6\x10\xa9\xbf\x4d\x19\xbc\x5d\xcc\x88\x1d\x9e\x5e\x14\x98\x11\x97\x04\xf4\xc6\x25\xee\x90\xd6\xd2\x01\x35\x3c\xbe\x7b\x80\x3d\x7a\x26\x8b\x1c\xd4\x0b\x05\xf3\xf8\xee\x61\x55\x72\xa1\xf0\xcf\x6a\xf9\xb9\xcb\xf2\xa9\x66\x78\xf1\x2a\x2b\x44\xb4\xa1\xee\x8d\xab\x67\x2c\xa8\x20\x89\x71\x67\xa6\xb1\x80\xbe\x37\x13\xb9\x1d\x3a\x74\x73\x15\x2f\xe5\xbb\x37\x12\xde\x3b\x73\x04\x4d\xbd\xe4\x36\x27\xb5\xc3\x58\x08\x2e\xc8\x7a\x5a\xd4\x17\x08\x15\xdc\xdf\xdf\x8b\x0d\xbc\x23\x25\x2d\x5c\xfd\xe6\x77\x3f\x5c\xc3\xfb\xef\xde\x25\x0e\xe3\x26\x46\x1f\xe0\x2a\x8d\xa0\x87\x87\xaf\x61\x1c\xb4\x8c\x78\x0d\x52\x29\x26\x45\xd7\xc2\x01\xb7\xc9\x01\xa3\x90\xdb\xe4\x1b\x07\x3d\x77\xa4\x92\x01\x03\x9c\x68\x04\x4d\x9f\xc7\x5e\x24\x50\x9d\x74\xed\x34\x2d\x34\x36\x72\xb4\x11\xf6\xd2\x8e\x49\xf9\xd7\x96\x49\xcc\xc4\xc4\x57\x60\x1a\xd6\xf7\xc9\x6e\xba\xa2\x07\xce\x1f\xf7\x2f\x03\xa6\x79\xc3\x64\x2a\x43\x9a\x16\xe9\xb0\x10\x96\xef\x51\xa7\xe7\xc6\xe8\xb9\xed\xbe\xb8\x5a\x7a\xf0\x3a\xac\x6f\x6f\xbf\xb8\x3a\x77\xd4\x75\x58\xcf\x2b\x4e\xcf\x75\xb8\x15\xcf\x27\x92\x36\x21\xbd\x43\x2c\xb5\x2d\x5f\xd5\x38\xf0\x34\x46\x1e\x6a\xf3\x51\x3d\xad\x6b\x7e\x10\x9d\xe7\xd2\x05\xc2\xfc\x90\xb9\x68\x43\xb0\xb8\x47\x0b\x6f\x7f\xf8\xe6\x5b\x50\xd4\x0f\x7e\x99\x2d\x93\x68\xdd\x7e\x32\xc3\xf9\xe1\xf3\x22\x58\x24\xb0\x24\x35\xc8\x10\x30\x06\xb8\x32\x05\x16\x90\xf1\xbc\xe6\x7a\x8a\xd8\x0f\x56\x46\x4c\x74\x34\x8c\x5b\x6b\x54\x76\x3d\x35\xad\x36\x61\x07\xc6\x85\x88\x52\x03\x35\x80\xfd\x16\xb5\x66\xb2\x30\x6e\x1a\x92\x8c\x5b\x4f\xb8\x35\xab\xd4\x49\xe5\xc2\x9b\xf4\xf8\x93\x4e\x73\x34\x06\xd9\xe2\xb9\x52\xa4\x23\x77\xea\x69\x4c\xd4\xea\x43\x9e\xb2\x93\xf2\x0a\xa1\xa3\xd1\xea\x94\x32\xe3\x94\x1d\x35\xc7\x28\x8c\xdb\xf4\x18\x5c\x08\xb9\x93\x4e\xdb\xcf\xbc\xe5\x91\x4b\x3f\x11\xf7\xf1\x54\x88\xd9\xe4\x9c\xd0\x5b\x1e\x9b\x66\xf5\xda\x3d\xf1\x41\xcb\xef\x42\x74\x37\xef\x1f\xf2\x4f\xdd\xcd\x9b\xdf\x0b\x1e\xb0\xbc\xf7\x5b\xd7\x5a\x13\xba\xfc\xdf\x7f\xff\xd3\x8f\xff\xfc\xcb\x8f\xff\xf8\xdb\xbf\xfe\xfa\x67\xb1\x81\xf7\x4c\xfd\xec\x32\x17\x32\x0f\x9a\xc1\xa8\x1d\xfa\x09\xb1\xe0\x4d\x06\x7d\x12\x09\x32\x41\x8b\x84\x0b\x15\x7c\xea\x84\xf8\x40\x9c\x8e\x27\x11\x3a\x3a\xd4\x0d\x11\x67\x3f\x3d\xb4\x39\x24\x4b\xa4\x36\xf0\xd0\xd1\x61\x7a\x4d\x50\x03\x4b\x4e\x00\x8f\xa8\xc6\x54\x05\xc6\xa5\x7b\x4e\x00\xcf\xc0\x16\xe1\x3a\x25\x63\x7e\x68\xa4\xca\x12\xe2\x3f\x01\x00\x00\xff\xff\x2f\xc7\x6e\xf3\xe6\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
