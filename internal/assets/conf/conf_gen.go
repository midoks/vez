// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6f\xdb\xb8\x12\x7e\xe7\xaf\x18\x08\xa7\x40\x02\x38\xb2\x94\x1c\x24\x3d\x36\xf4\x70\xd0\x45\x2f\x40\x16\x5b\x34\x29\x0a\x34\x08\x14\x5a\x1c\xc9\x5c\x53\x1c\x81\xa4\x7c\xe9\xaf\x5f\x0c\x25\x39\xce\x36\x0b\xf4\x65\xfd\x62\x91\x9c\xf9\x66\x38\x97\x6f\x28\xbb\xae\xb4\xb2\x45\x28\x20\xf1\xba\x55\xeb\x90\x88\x95\x93\x56\xfd\xb4\xeb\x7a\x5b\xf6\x1e\x1d\xef\x39\xa2\x71\xa7\x25\x15\xa5\x14\x6e\x13\x21\x1e\x14\xae\xfa\xe6\x51\x74\xe4\x42\x91\xe7\x59\x7e\x29\x84\x78\x30\xd4\x3c\x8a\x25\xdc\xaf\x11\x0c\x35\x50\x93\x6b\x65\x00\xd4\x61\x8d\x0e\x92\x3f\x3d\xd9\x04\xc8\x41\x12\x70\x1f\x12\x31\x1e\x17\xd3\x9a\x6d\x95\x9d\x0c\x6b\xde\x32\xd4\x78\xb6\xe3\x50\x69\xff\x08\x62\x09\x3e\x90\x43\xf0\xe8\xbd\x26\x2b\xd0\xca\x95\x61\x87\x6a\x69\x3c\x0a\xa9\x94\x43\xef\x59\x33\xbf\xbc\x49\xb3\x34\x4b\xf3\xc5\xf5\xd5\xcd\xff\x12\xd1\x49\xef\x77\xe4\x14\x9f\x25\x42\xad\xf8\x3f\x63\xe8\x11\x6a\xf2\x78\x5c\x42\xe7\x68\xab\x15\xba\xd9\xd1\xf1\x16\x5b\x72\x87\x64\x06\x49\xad\x0d\x26\xb3\x78\x87\xe8\x58\x92\x8a\x49\x1c\x0a\x18\xe4\x46\xb8\x8a\x6c\xad\x9b\xde\xc9\xc0\xa0\x35\x39\x70\xe8\x3b\xac\x82\xde\xe2\xd1\xc6\x42\x2c\xe1\x62\xd4\x5b\x80\x22\xf4\x60\x29\x80\x45\x54\x20\xed\x61\x04\x81\x03\x86\x28\xc8\xe6\x17\x47\x47\x79\x05\x1c\xaf\x19\x60\xda\xa4\xf0\xa4\x64\x90\xf3\xf1\xd4\x3f\x45\x8d\xe8\xe5\x02\x2c\x86\x1d\xb9\x4d\x11\xaa\x6e\xc6\xa1\x2a\x62\x6c\x66\x53\x68\x8a\x56\x56\xd2\x91\x9d\xa9\x55\x91\xcd\x3a\x22\x53\x7a\xfd\x03\x8b\x3c\xcb\x66\x5a\x19\x2c\x83\x6e\x91\xfa\x50\xe4\x6f\xb3\xe3\x85\xcb\xd1\xb9\x02\x5e\xd8\x3d\x5e\x9f\x36\x1a\x21\xd6\x56\xa0\x31\x79\xe1\x24\xcc\x5a\xa1\x0d\xba\xd6\xe8\x52\x31\x08\x4f\x85\xa8\x4b\xa3\x37\x58\xea\x56\x6a\x23\x96\xf0\x6d\x8d\x31\x0d\x8c\x82\x61\x02\xd6\x16\x3e\xde\xdf\x7f\xbe\x03\xb2\xe6\x70\x44\xf0\x58\xf5\x8e\x31\x82\xeb\x71\xf4\xe4\xc3\x3b\xd0\x36\xa0\xdb\x4a\xc3\x5a\x1e\x2b\xb2\xca\xc7\x8c\x4c\xbe\xf0\x05\x52\xd1\x54\xe5\x51\xb0\x80\xab\xeb\x2c\x1b\x11\x5a\xb9\xd7\x6d\xdf\x82\xd1\x35\x02\x87\xe2\xef\x38\x72\x42\x4a\x45\x2b\xf7\x25\xcb\xc5\x90\x41\x01\x6f\xaf\xff\x7b\xc4\x39\x8d\x09\xab\xbd\xbb\xfb\xf2\x1e\x02\x6d\xd0\xa6\xa2\xf2\xae\x2e\x5f\xc6\xa1\xe4\x3d\x6e\xab\x4a\x56\x6b\x9c\xca\x34\x2e\x40\x2a\xd9\x85\xd7\x6b\x74\x28\xcc\xa1\x48\x5b\x6c\xa3\x7c\x92\x8a\x51\xe3\xb4\x4c\xdf\xd3\xb3\x62\x8c\xe3\xec\x1f\x82\x95\x8a\x93\xc0\xe4\x97\xd9\xa4\x3b\x98\x02\x69\xd5\x89\xa9\x19\x57\xad\xe5\x42\x27\x0b\x6b\xf2\x01\xc6\xe6\x5c\xfc\x5b\x15\x39\xf6\x50\x34\xbf\x80\xa7\x67\x02\xc8\xf3\xcb\x3c\x7f\x12\xd1\x09\x76\xfc\xc5\xbe\x10\x0f\x3b\x5c\x4d\x61\xed\x1c\x05\xaa\xc8\x40\x58\xcb\x00\xda\x43\xef\x51\x0d\x35\xe7\xb6\x08\x4a\x3b\xac\x02\x04\x27\xeb\x5a\x57\xbc\xcf\xb5\x2c\xbb\xce\xe8\x2a\x76\x78\x2a\x96\xf0\xae\x77\x0e\x6d\x30\x07\xf0\x7d\xc7\xcc\xe8\x21\x59\x87\xd0\x71\x56\xf8\xdf\x47\x0a\xa9\x1a\x3d\x86\xac\xb7\x7a\x3f\x30\xc8\x60\xba\x00\x96\x1a\x1d\x9a\x18\x2d\x10\xac\x10\x8c\xf6\x01\x2d\x2a\x58\x1d\x7e\xb6\xcc\x5a\x25\xcb\x43\x01\x59\xbc\x62\x26\xa6\x6b\x91\x0b\x60\xfb\x76\x35\x34\xd0\x2f\x21\x45\x1d\x26\xd2\x3c\xcb\xf3\x44\x30\xd4\x07\xb4\xe8\x64\x40\xf0\x01\xbb\x98\xc8\x3f\x1c\xd4\x8e\x5a\x90\x90\x76\xf5\x7e\xe0\x22\xdc\xb3\x2a\xaa\xe1\x84\xc1\xbf\x69\xab\x68\xe7\xa1\x42\xc7\xbd\x5e\x0d\x10\x4c\x05\x67\x8a\xc4\x32\x92\x5d\x4d\xae\xc1\xc0\xde\x0d\xfa\x51\xb1\x73\x7a\xcb\xc2\x1b\x3c\x9c\xb3\xb9\xff\x00\x75\x68\xbd\x37\xd0\x6d\x2a\x9f\x5f\xc2\x85\xb6\x11\x35\x5a\xbf\xa0\x3e\x8c\x2b\x6c\xe1\xc2\xd2\x06\x0f\xfe\xd7\xb4\x36\x78\x98\x94\xf8\xc0\xf3\x87\x42\x2f\x78\x51\xc6\x5b\x15\x50\xf5\x3e\x50\x3b\x8f\x29\x9c\x4f\x66\xc4\x06\x0f\xaf\x0a\x8c\x88\x53\x06\x5a\x6d\x23\x79\x48\x63\x68\x87\x0a\xee\x6f\xef\x60\x8b\x8e\xd9\x62\x06\xd5\x2b\x15\x73\x7f\x7b\x97\x67\x5c\x29\xfc\x91\x4f\x1f\x97\xc9\x6c\x28\x1a\x5e\x5c\x25\xa9\x08\xc6\x97\xad\xb6\xe5\x88\x05\x05\x44\x31\x6e\xcd\x38\x17\xd0\xb5\x7a\x60\xb7\xdd\x1a\xed\x58\xc6\x53\xfd\x6e\xb5\x84\xaf\x56\xef\x41\x51\x2b\xb9\xcf\xa9\xda\x60\x48\x05\x57\x64\x39\x2c\xca\x13\x84\x02\xae\xaf\xaf\xc5\x12\x6e\xa9\x92\x06\xce\x7e\xfb\xfd\xfb\x39\x7c\xfd\x72\x1b\x49\x8c\xbb\x18\x9d\x87\xb3\x38\x83\xee\xee\x3e\x42\xdf\x29\x19\xf0\x1c\x64\x55\x31\x2b\xda\x06\x76\xb8\x8a\x0e\xe8\x0a\xb9\x4f\x3e\x59\x68\xb9\x25\x2b\xe9\xd1\xc3\x81\x7a\x50\xf4\x3c\xf7\x02\x41\xb5\x96\xb6\x19\xc6\x85\xc2\x5a\xf6\x26\xc0\x56\x9a\x3e\x2a\xff\xdf\x30\x8b\xe9\x10\x09\x0b\x74\xcd\xfa\x2e\xda\x8d\x57\x74\xc0\xf9\xe3\x06\x66\xc0\x38\x70\x98\x4d\xa5\x8f\xe3\x22\x1e\xa6\xc2\xf0\x3d\xca\xf8\xde\xe8\x1d\xf7\xdd\x9b\xb3\xa9\x09\xcf\xfd\x62\x3e\x7f\x73\x76\x6c\xa9\x73\xbf\x18\x57\x9c\x9e\x73\x3f\x17\x2f\x47\x92\xd2\x3e\x3e\x44\x0c\x35\x0d\x5f\x55\x5b\x70\xd4\x07\x9e\x6a\xe3\x51\x39\xac\x4b\x7e\x11\x1d\x07\xd3\x09\xc2\xf8\x92\x39\xe9\x43\x30\xb8\x45\x03\x1f\xbe\x7f\xfa\x0c\x15\xb5\x9d\x9b\x86\xcb\x20\x5a\x36\x3f\x74\x77\x7c\xf9\xbc\x0a\x16\x08\x0c\x49\x05\xd2\x7b\x0c\x1e\xce\x74\x8a\x29\x24\x3c\xb0\xb9\x9e\x02\xb6\x9d\x91\x01\x23\x1f\x75\xfd\xca\xe8\x2a\x39\x1f\x9a\x56\x69\xbf\x01\x6d\x7d\x40\xa9\x80\x6a\xc0\x76\x85\x4a\x31\x5b\x68\x3b\x4c\x49\xc6\x2d\x07\xdc\x92\x55\xca\xa8\x72\xe2\x4d\x7c\xfd\x49\xab\x38\x1a\x9d\x6c\xf0\x58\x29\xd2\x92\x3d\xb4\xd4\x47\x6e\x75\x7e\x16\xb3\x13\xf3\x0a\x7e\x4d\xbd\x51\x31\x65\xda\x56\xa6\x57\x1c\x23\xdf\xaf\xe2\x6b\x70\x62\xe4\xb5\xb4\xca\x3c\x13\x97\x43\x2e\xfd\xc8\xdc\xfb\x43\x2a\x46\x93\x63\x42\xe7\x42\x3c\xb4\x64\x1b\x52\xab\xc7\xf8\x38\x2c\x9e\xd9\xff\xf2\x26\xcb\x6f\x84\x5a\x15\x5b\xfc\xc1\xe3\x55\xb7\xb2\xc1\x51\x8a\x33\xbd\x98\xcf\x47\x16\x5d\x5c\x5d\x5d\x5d\xcd\x35\x83\x11\x47\xf8\x51\xf8\x35\xed\xca\x9a\x88\x13\x1a\x5f\xcf\x7c\xcb\xe9\xf2\x4b\xb8\x5b\xd3\x6e\x78\x21\x50\x0d\x53\x98\x01\xf7\x58\xf5\x31\xb1\xda\x46\xd7\x07\x80\x17\x60\x93\x70\x19\xe3\x3b\x3e\x1e\x62\xb1\xf0\xef\xaf\x00\x00\x00\xff\xff\xc4\x9e\x80\x15\xbd\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
