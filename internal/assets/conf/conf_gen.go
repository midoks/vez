// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6b\xe4\xb8\x12\x7e\xd7\xaf\x28\xcc\x19\x48\xa0\xe3\xb6\x93\x43\x32\xa7\x1b\x3f\x1c\xe6\x30\x17\xc8\x61\x87\x49\x86\x81\x09\xc1\x51\x5b\x65\xb7\xb6\x65\x95\x91\xe4\xbe\xe4\xd7\x2f\x25\xdb\x9d\xce\x6e\x16\xe6\x65\xfb\xa5\x2d\xa9\xea\xab\x52\x5d\x3e\x95\xec\xba\xd2\xca\x16\xa1\x80\x64\x8b\xcf\x89\x58\x39\x69\xd5\xeb\x2d\xd7\xdb\xb2\xf7\xe8\x78\xc3\x11\x85\x61\xa7\x25\x15\x45\x3a\x47\x2a\x11\xe2\x41\xe1\xaa\x6f\x1e\x45\x47\x2e\x14\x79\x9e\xe5\x97\x42\x88\x07\x43\xcd\xa3\x58\xc2\xfd\x1a\xc1\x50\x03\x35\xb9\x56\x06\x40\x1d\xd6\xe8\x20\xf9\xdd\x93\x4d\x80\x1c\x24\x01\xf7\x21\x11\xe3\x71\x31\xad\xd9\x58\xd9\xc9\xb0\xe6\x2d\x43\x8d\x67\x3b\x0e\x95\xf6\x8f\x20\x96\xe0\x03\x39\x04\x8f\xde\x6b\xb2\x02\xad\x5c\x19\xf6\xa8\x96\xc6\xa3\x90\x4a\x39\xf4\x9e\x35\xf3\xcb\x9b\x34\x4b\xb3\x34\x5f\x5c\x5f\xdd\xfc\x27\x11\x9d\xf4\x7e\x47\x4e\xf1\x59\x22\xd4\x8a\xff\x33\x86\x1e\xa1\x26\x8f\xc7\x25\x74\x8e\xb6\x5a\xa1\x9b\x1d\x1d\x6f\xb1\x25\x77\x48\x66\x90\xd4\xda\x60\x32\x8b\x77\x88\x8e\x25\xa9\x98\xc4\xa1\x80\x41\x6e\x84\xab\xc8\xd6\xba\xe9\x9d\x0c\x0c\x5a\x93\x03\x87\xbe\xc3\x2a\xe8\x2d\x1e\x6d\x2c\xc4\x12\x2e\x46\xbd\x05\x28\x42\x0f\x96\x02\x58\x44\x05\xd2\x1e\x46\x10\x38\x60\x88\x82\x6c\x7e\x71\x74\x94\x57\xc0\xf1\x9a\x01\xa6\x4d\x0a\x4f\x4a\x06\x39\x1f\x4f\xfd\x53\xd4\x88\x5e\x2e\xc0\x62\xd8\x91\xdb\x14\xa1\xea\x66\x1c\xaa\x22\xc6\x66\x36\x85\xa6\x68\x65\x25\x1d\xd9\x99\x5a\x15\xd9\xac\x23\x32\xa5\xd7\xcf\x58\xe4\x59\x36\xd3\xca\x60\x19\x74\x8b\xd4\x87\x22\x7f\x9f\x1d\x2f\x5c\x8e\xce\x15\xf0\xca\xee\xf1\xfa\xb4\xd1\x08\xb1\xb2\x02\x8d\xc9\x0b\x27\x61\xd6\x0a\x6d\xd0\xb5\x46\x97\x8a\x41\x78\x2a\x43\x5d\x1a\xbd\xc1\x72\x8b\xcf\x62\x09\x3f\xd6\x18\x93\xc0\x18\x18\x26\x58\x6d\xe1\xf3\xfd\xfd\xd7\x3b\x20\x6b\x0e\x47\x7d\x8f\x55\xef\x18\x21\xb8\x1e\x47\x3f\x3e\x7d\x00\x6d\x03\xba\xad\x34\xac\xe5\xb1\x22\xab\x7c\xcc\xc7\xe4\x09\xbb\x9f\x8a\xa6\x2a\x8f\x82\x05\x5c\x5d\x67\xd9\x88\xd0\xca\xbd\x6e\xfb\x16\x8c\xae\x11\x38\x10\x7f\xc6\x91\x13\x52\x2a\x5a\xb9\x2f\x59\x2e\x06\x0c\x0a\x78\x7f\xfd\xef\x23\xce\x69\x44\x58\xed\xc3\xdd\xb7\x8f\x10\x68\x83\x36\x15\x95\x77\x75\xf9\x3a\x0a\x25\xef\x71\x53\x55\xb2\x5a\xe3\x54\xa4\x71\x01\x52\xc9\x2e\xbc\x5d\xa1\x43\x59\x0e\x25\xda\x62\x1b\xe5\x93\x54\x8c\x1a\xa7\x45\xfa\x91\x5e\x14\x63\x1c\x67\x7f\x13\xac\x54\x9c\x04\x26\xbf\xcc\x26\xdd\xc1\x14\x48\xab\x4e\x4c\xcd\xb8\x66\x2d\x97\x39\x59\x58\x93\x0f\x30\xb6\xe6\xe2\x9f\xaa\xc7\xb1\x83\xa2\xf9\x05\x3c\xbd\xb4\x7f\x9e\x5f\xe6\xf9\x93\x88\x4e\xb0\xe3\xaf\xf6\x85\x78\xd8\xe1\x6a\x0a\x6b\xe7\x28\x50\x45\x06\xc2\x5a\x06\xd0\x1e\x7a\x8f\x6a\xa8\x39\xb7\x45\x50\xda\x61\x15\x20\x38\x59\xd7\xba\xe2\x7d\xae\x64\xd9\x75\x46\x57\xb1\xbf\x53\xb1\x84\x0f\xbd\x73\x68\x83\x39\x80\xef\x3b\xe6\x45\x0f\xc9\x3a\x84\x8e\xb3\xc2\xff\x3e\x12\x48\xd5\xe8\x31\x64\xbd\xd5\xfb\x81\x3f\x06\xd3\x05\xb0\xd4\xe8\xd0\xc4\x67\x81\x60\x85\x60\xb4\x0f\x68\x51\xc1\xea\xf0\x57\xcb\xac\x55\xb2\x3c\x14\x90\xc5\x2b\x66\x62\xba\x16\xb9\x00\xb6\x6f\x57\x43\x03\xfd\x12\x52\xd4\x61\x1a\xcd\xb3\x3c\x4f\x04\x43\x7d\x42\x8b\x4e\x06\x04\x1f\xb0\x8b\x89\xfc\xcd\x41\xed\xa8\x05\x09\x69\x57\xef\x07\x26\xc2\x3d\xab\xa2\x1a\x4e\x18\xfc\x87\xb6\x8a\x76\x1e\x2a\x74\xdc\xe9\xd5\x00\xc1\x44\x70\xa6\x48\x2c\x23\xd5\xd5\xe4\x1a\x0c\xec\xdd\xa0\x1f\x15\x3b\xa7\xb7\x2c\xbc\xc1\xc3\x39\x9b\xfb\x17\x50\x87\xd6\x7b\x03\xdd\xa6\xf2\xf9\x25\x5c\x68\x1b\x51\xa3\xf5\x0b\xea\xc3\xb8\xc2\x16\x2e\x2c\x6d\xf0\xe0\x7f\x4d\x6b\x83\x87\x49\x89\x0f\x3c\x7f\x28\xf4\x82\x17\x65\xbc\x55\x01\x55\xef\x03\xb5\xf3\x98\xc2\xf9\x64\x46\x6c\xf0\xf0\xa6\xc0\x88\x38\x65\xa0\xd5\x36\x92\x87\x34\x86\x76\xa8\xe0\xfe\xf6\x0e\xb6\xe8\x98\x2d\x66\x50\xbd\x51\x31\xf7\xb7\x77\x79\xc6\x95\xc2\x1f\xf9\xf4\x71\x99\xcc\x86\xa2\xe1\xc5\x55\x92\x8a\x60\x7c\xd9\x6a\x5b\x8e\x58\x50\x40\x14\xe3\xd6\x8c\xaf\x02\xba\x56\x0f\xec\xb6\x5b\xa3\x1d\xcb\x78\xaa\xdf\xad\x96\xf0\xdd\xea\x3d\x28\x6a\x25\xf7\x39\x55\x1b\x0c\xa9\xe0\x8a\x2c\x87\x45\x79\x82\x50\xc0\xf5\xf5\xb5\x58\xc2\x2d\x55\xd2\xc0\xd9\xff\xfe\xff\xf3\x1c\xbe\x7f\xbb\x8d\x24\xc6\x5d\x8c\xce\xc3\x59\x7c\x81\xee\xee\x3e\x43\xdf\x29\x19\xf0\x1c\x64\x55\x31\x2b\xda\x06\x76\xb8\x8a\x0e\xe8\x0a\xb9\x4f\xbe\x58\x68\xb9\x25\x2b\xe9\xd1\xc3\x81\x7a\x50\xf4\xf2\xea\x05\x82\x6a\x2d\x6d\x33\x3c\x16\x0a\x6b\xd9\x9b\x00\x5b\x69\xfa\xa8\xfc\x5f\xc3\x2c\xa6\x43\x24\x2c\xd0\x35\xeb\xbb\x68\x37\x5e\xd1\x01\xe7\x8f\x1b\x98\x01\xe3\x73\xc3\x6c\x2a\x7d\x7c\x2e\xe2\x61\x2a\x0c\xdf\xa3\x8c\xd3\x46\xef\xb8\xef\xde\x9d\x4d\x4d\x78\xee\x17\xf3\xf9\xbb\xb3\x63\x4b\x9d\xfb\xc5\xb8\xe2\xf4\x9c\xfb\xb9\x78\xfd\x24\x29\xed\xe3\x18\x62\xa8\x69\xf8\xaa\xda\x82\xa3\x3e\xf0\x9b\x36\x1e\x95\xc3\xba\xe4\x79\xe8\xf8\x30\x9d\x20\x8c\x73\xcc\x49\x1f\x82\xc1\x2d\x1a\xf8\xf4\xf3\xcb\x57\xa8\xa8\xed\xdc\xf4\xb8\x0c\xa2\x65\xf3\xac\xbb\xe3\xdc\xf3\x26\x58\x20\x30\x24\x15\x48\xef\x31\x78\x38\xd3\x29\xa6\x90\xf0\x73\xcd\xf5\x14\xb0\xed\x8c\x0c\x18\xf9\xa8\xeb\x57\x46\x57\xc9\xf9\xd0\xb4\x4a\xfb\x0d\x68\xeb\x03\x4a\x05\x54\x03\xb6\x2b\x54\x8a\xd9\x42\xdb\xe1\x95\x64\xdc\x72\xc0\x2d\x59\xa5\x8c\x2a\x27\xde\xc4\xd9\x4f\x5a\xc5\xd1\xe8\x64\x83\xc7\x4a\x91\x96\xec\xa1\xa5\x3e\x72\xab\xf3\xb3\x98\x9d\x98\x57\xf0\x6b\xea\x8d\x8a\x29\xd3\xb6\x32\xbd\xe2\x18\xf9\x7e\x15\x67\xc1\x89\x91\xd7\xd2\x2a\xf3\x42\x5c\x0e\xb9\xf4\x23\x73\xef\x0f\xa9\x18\x4d\x8e\x09\x9d\x0b\xf1\xd0\x92\x6d\x48\xad\x1e\xe3\x68\x58\xbc\xb0\xff\xe5\x4d\x96\xdf\x08\xb5\x2a\x78\xbe\x10\xe2\x41\xb7\xb2\xc1\x51\x8a\x33\xbd\x98\xcf\x47\x16\x5d\x5c\x5d\x5d\x5d\xcd\xf5\x5c\x74\xda\x36\x6f\x9e\xf1\x41\x3c\x2d\x79\xb6\x23\xeb\xb1\xa0\x8d\x10\x0f\xc4\x09\x79\x14\x7e\x4d\xbb\xb2\x26\xe2\xfc\xc7\x41\x9b\x83\x32\xc5\x6a\x09\x77\x6b\xda\x0d\x03\x05\xd5\x30\x65\x05\x70\x8f\x55\x1f\xeb\x40\xdb\x78\xd3\x01\xe0\x15\xd8\x24\x5c\xc6\x74\x8c\xb3\x46\xac\x2d\xfe\xfd\x11\x00\x00\xff\xff\x06\xf9\x78\x3c\xe5\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
