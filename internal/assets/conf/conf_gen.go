// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6b\xe4\x38\x12\x7f\xd7\xa7\x28\xcc\x2d\x24\xd0\x71\xec\xcc\x91\xec\x75\xe3\x87\x63\x8e\x9d\x5d\xc8\x71\xcb\x24\xc3\xc0\x84\xe0\xa8\xa5\xb2\x5b\xd7\xb2\xca\x48\x72\xff\x99\x4f\x7f\x94\x6c\x77\x3a\x37\x39\x98\x97\x7b\xb2\x25\x55\xfd\xaa\x54\x7f\x7e\x25\xd9\xf7\xb5\x93\x1d\x42\x05\x59\x30\x9d\xde\xc4\x4c\xac\xbd\x74\xfa\x87\x5d\x3f\xb8\x7a\x08\xe8\x79\xcf\x13\x4d\x3b\x1d\xe9\x24\xa5\x71\x97\x09\xf1\xa4\x71\x3d\xb4\xcf\xa2\x27\x1f\xab\xb2\x2c\xca\x1b\x21\xc4\x93\xa5\xf6\x59\xac\xe0\x71\x83\x60\xa9\x85\x86\x7c\x27\x23\xa0\x89\x1b\xf4\x90\xfd\x3b\x90\xcb\x80\x3c\x64\x11\x0f\x31\x13\xd3\x71\x35\xaf\xd9\x56\xdd\xcb\xb8\xe1\x2d\x4b\x6d\x60\x3b\x1e\xb5\x09\xcf\x20\x56\x10\x22\x79\x84\x80\x21\x18\x72\x02\x9d\x5c\x5b\x76\xa8\x91\x36\xa0\x90\x5a\x7b\x0c\x81\x35\xcb\x9b\xbb\xbc\xc8\x8b\xbc\x5c\xde\x7e\xb8\xfb\x5b\x26\x7a\x19\xc2\x9e\xbc\xe6\xb3\x4c\xe8\x35\x7f\x0b\x86\x9e\xa0\x66\x8f\xa7\x25\xf4\x9e\x76\x46\xa3\x5f\x9c\x1c\xef\xb0\x23\x7f\xcc\x16\x90\x35\xc6\x62\xb6\x48\x77\x48\x8e\x65\xb9\x98\xc5\xa1\x82\x51\x6e\x82\x53\xe4\x1a\xd3\x0e\x5e\x46\x06\x6d\xc8\x83\xc7\xd0\xa3\x8a\x66\x87\x27\x1b\x4b\xb1\x82\xab\x49\x6f\x09\x9a\x30\x80\xa3\x08\x0e\x51\x83\x74\xc7\x09\x04\x8e\x18\x93\x20\x9b\x5f\x9e\x1c\xe5\x15\x70\xbc\x16\x80\x79\x9b\xc3\x8b\x96\x51\x5e\x4f\xa7\xe1\x25\x69\x24\x2f\x97\xe0\x30\xee\xc9\x6f\xab\xa8\xfa\x05\x87\xaa\x4a\xb1\x59\xcc\xa1\xa9\x3a\xa9\xa4\x27\xb7\xd0\xeb\xaa\x58\xf4\x44\xb6\x0e\xe6\x3b\x56\x65\x51\x2c\x8c\xb6\x58\x47\xd3\x21\x0d\xb1\x2a\x7f\x2d\x4e\x17\xae\x27\xe7\x2a\x78\x63\xf7\x74\x7d\xda\x1a\x84\x54\x5b\x91\xa6\xe4\xc5\xb3\x30\x1b\x8d\x2e\x9a\xc6\xa0\xcf\xc5\x28\x3c\x17\xa2\xa9\xad\xd9\x62\x6d\x3a\x69\xac\x58\xc1\xd7\x0d\xa6\x34\x30\x0a\xc6\x19\xd8\x38\xf8\xfd\xf1\xf1\xcf\x07\x20\x67\x8f\x27\x84\x80\x6a\xf0\x8c\x11\xfd\x80\x93\x27\x9f\x3e\x82\x71\x11\xfd\x4e\x5a\xd6\x0a\xa8\xc8\xe9\x90\x32\x32\xfb\xc2\x17\xc8\x45\xab\xea\x93\x60\x05\x1f\x6e\x8b\x62\x42\xe8\xe4\xc1\x74\x43\x07\xd6\x34\x08\x1c\x8a\xff\xc6\x91\x33\x52\x2e\x3a\x79\xa8\x59\x2e\x85\x0c\x2a\xf8\xf5\xf6\xaf\x27\x9c\xf3\x98\xb0\xda\xc7\x87\xcf\xbf\x41\xa4\x2d\xba\x5c\xa8\xe0\x9b\xfa\x6d\x1c\x6a\xde\xe3\xb6\x52\x52\x6d\x70\x2e\xd3\xb4\x00\xa9\x65\x1f\xdf\xaf\xd1\xb1\x30\xc7\x22\xed\xb0\x4b\xf2\x59\x2e\x26\x8d\xf3\x32\xfd\x8d\x5e\x15\x53\x1c\x17\xff\x23\x58\xb9\x38\x0b\x4c\x79\x53\xcc\xba\xa3\x29\x90\x4e\x9f\x99\x5a\x70\xd5\x3a\x2e\x74\x72\xb0\xa1\x10\x61\x6a\xce\xe5\xff\xab\x22\xa7\x1e\x4a\xe6\x97\xf0\xf2\x4a\x00\x65\x79\x53\x96\x2f\x22\x39\xc1\x8e\xbf\xd9\x17\xe2\x69\x8f\xeb\x39\xac\xbd\xa7\x48\x8a\x2c\xc4\x8d\x8c\x60\x02\x0c\x01\xf5\x58\x73\x7e\x87\xa0\x8d\x47\x15\x21\x7a\xd9\x34\x46\xf1\x3e\xd7\xb2\xec\x7b\x6b\x54\xea\xf0\x5c\xac\xe0\xe3\xe0\x3d\xba\x68\x8f\x10\x86\x9e\x99\x31\x40\xb6\x89\xb1\xe7\xac\xf0\x37\x24\x0a\x51\xad\x99\x42\x36\x38\x73\x18\x19\x64\x34\x5d\x01\x4b\x4d\x0e\xcd\x8c\x16\x09\xd6\x08\xd6\x84\x88\x0e\x35\xac\x8f\x3f\x5a\x66\xad\x9a\xe5\xa1\x82\x22\x5d\xb1\x10\xf3\xb5\xc8\x47\x70\x43\xb7\x1e\x1b\xe8\xa7\x90\x92\x0e\x13\x69\x59\x94\x65\x26\x18\xea\x13\x3a\xf4\x32\x22\x84\x88\x7d\x4a\xe4\xbf\x3c\x34\x9e\x3a\x90\x90\xf7\xcd\x61\xe4\x22\x3c\xb0\x2a\xea\xf1\x84\xc1\xbf\x1a\xa7\x69\x1f\x40\xa1\xe7\x5e\x57\x23\x04\x53\xc1\x85\x26\xb1\x4a\x64\xd7\x90\x6f\x31\xb2\x77\xa3\x7e\x52\xec\xbd\xd9\xb1\xf0\x16\x8f\x97\x6c\xee\x2f\x40\x3d\xba\x10\x2c\xf4\x5b\x15\xca\x1b\xb8\x32\x2e\xa1\x26\xeb\x57\x34\xc4\x69\x85\x1d\x5c\x39\xda\xe2\x31\xfc\x9c\xd6\x16\x8f\xb3\x12\x1f\x04\xfe\xd1\x18\x04\x2f\xea\x74\xab\x0a\xd4\x10\x22\x75\xd7\x29\x85\xd7\xb3\x19\xb1\xc5\xe3\xbb\x02\x13\xe2\x9c\x81\xce\xb8\x44\x1e\xd2\x5a\xda\xa3\x86\xc7\xfb\x07\xd8\xa1\x67\xb6\x58\x80\x7a\xa7\x62\x1e\xef\x1f\xca\x82\x2b\x85\x7f\xca\xf9\xe7\x26\x5b\x8c\x45\xc3\x8b\x0f\x59\x2e\xa2\x0d\x75\x67\x5c\x3d\x61\x41\x05\x49\x8c\x5b\x33\xcd\x05\xf4\x9d\x19\xd9\x6d\xbf\x41\x37\x95\xf1\x5c\xbf\x3b\x23\xe1\x8b\x33\x07\xd0\xd4\x49\xee\x73\x52\x5b\x8c\xb9\xe0\x8a\xac\xc7\x45\x7d\x86\x50\xc1\xed\xed\xad\x58\xc1\x3d\x29\x69\xe1\xe2\x1f\xff\xfc\x76\x09\x5f\x3e\xdf\x27\x12\xe3\x2e\x46\x1f\xe0\x22\xcd\xa0\x87\x87\xdf\x61\xe8\xb5\x8c\x78\x09\x52\x29\x66\x45\xd7\xc2\x1e\xd7\xc9\x01\xa3\x90\xfb\xe4\x0f\x07\x1d\xb7\xa4\x92\x01\x03\x1c\x69\x00\x4d\xaf\x73\x2f\x12\xa8\x8d\x74\xed\x38\x2e\x34\x36\x72\xb0\x11\x76\xd2\x0e\x49\xf9\xef\x96\x59\xcc\xc4\x44\x58\x60\x1a\xd6\xf7\xc9\x6e\xba\xa2\x07\xce\x1f\x37\x30\x03\xa6\x81\xc3\x6c\x2a\x43\x1a\x17\xe9\x30\x17\x96\xef\x51\xa7\xf7\xc6\xe0\xb9\xef\x7e\xb9\x98\x9b\xf0\x32\x2c\xaf\xaf\x7f\xb9\x38\xb5\xd4\x65\x58\x4e\x2b\x4e\xcf\x65\xb8\x16\x6f\x47\x92\x36\x21\x3d\x44\x2c\xb5\x2d\x5f\xd5\x38\xf0\x34\x44\x9e\x6a\xd3\x51\x3d\xae\x6b\x7e\x11\x9d\x06\xd3\x19\xc2\xf4\x92\x39\xeb\x43\xb0\xb8\x43\x0b\x9f\xbe\xfd\xf1\x27\x28\xea\x7a\x3f\x0f\x97\x51\xb4\x6e\xbf\x9b\xfe\xf4\xf2\x79\x17\x2c\x12\x58\x92\x1a\x64\x08\x18\x03\x5c\x98\x1c\x73\xc8\x78\x60\x73\x3d\x45\xec\x7a\x2b\x23\x26\x3e\xea\x87\xb5\x35\x2a\xbb\x1c\x9b\x56\x9b\xb0\x05\xe3\x42\x44\xa9\x81\x1a\xc0\x6e\x8d\x5a\x33\x5b\x18\x37\x4e\x49\xc6\xad\x47\xdc\x9a\x55\xea\xa4\x72\xe6\x4d\x7a\xfd\x49\xa7\x39\x1a\xbd\x6c\xf1\x54\x29\xd2\x91\x3b\x76\x34\x24\x6e\xf5\x61\x91\xb2\x93\xf2\x0a\x61\x43\x83\xd5\x29\x65\xc6\x29\x3b\x68\x8e\x51\x18\xd6\xe9\x35\x38\x33\xf2\x46\x3a\x6d\x5f\x89\xcb\x23\x97\x7e\x62\xee\xc3\x31\x17\x93\xc9\x29\xa1\xd7\x42\x3c\x75\xe4\x5a\xd2\xeb\xe7\xf4\x38\xac\x5e\xd9\xff\xe6\xae\x28\xef\x84\x5e\x57\x3b\xfc\x2e\xc4\x13\x71\xec\x9e\x45\xd8\xd0\xbe\x6e\x88\x38\x55\xe9\x5d\xcc\xfe\xcf\xd7\x5a\xc1\xc3\x86\xf6\xe3\xec\xa7\x06\xe6\x00\x02\x1e\x50\x0d\x29\x65\xc6\x25\xa7\x46\x80\x37\x60\xb3\x70\x9d\x22\x37\x3d\x0b\x52\x19\x08\xf1\x9f\x00\x00\x00\xff\xff\xb6\x4e\xd3\x17\x95\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
