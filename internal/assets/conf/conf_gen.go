// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\xe4\xb6\x11\xbe\xf3\x29\x0a\x42\x0c\xcc\x00\x1a\x4d\x6b\x36\x18\x6f\xba\xa1\x43\xb0\x89\xd7\x06\x36\x89\xe1\x99\x85\x01\x2f\x06\x5a\x36\x59\x92\x98\xa6\x58\x02\x49\xf5\xcf\x9e\x72\xcb\x03\x04\xc8\x5b\x24\xe7\x5c\xf2\x36\x46\xf2\x1a\x41\x51\x52\x6f\x4f\x3c\x01\x7c\xc9\x49\x22\x59\xf5\x55\xb1\x7e\xbe\xa2\x1c\x86\xda\xc9\x1e\xa1\x82\x2c\x98\x5e\x77\x31\x13\x5b\x2f\x9d\xfe\xc9\xae\x1f\x5d\x3d\x06\xf4\xbc\xe7\x89\xe6\x9d\x9e\x74\x92\xd2\xb8\xcf\x84\xf8\xa0\x71\x3b\xb6\x4f\x62\x20\x1f\xab\xb2\x5c\x95\x77\x42\x88\x0f\x96\xda\x27\xb1\x81\xc7\x0e\xc1\x52\x0b\x0d\xf9\x5e\x46\x40\x13\x3b\xf4\x90\xfd\x31\x90\xcb\x80\x3c\x64\x11\x8f\x31\x13\xf3\x71\xb5\xac\xd9\x56\x3d\xc8\xd8\xf1\x96\xa5\x36\xb0\x1d\x8f\xda\x84\x27\x10\x1b\x08\x91\x3c\x42\xc0\x10\x0c\x39\x81\x4e\x6e\x2d\x3b\xd4\x48\x1b\x50\x48\xad\x3d\x86\xc0\x9a\xe5\xdd\x97\xc5\xaa\x58\x15\xe5\xfa\xfe\xd5\x97\xbf\xca\xc4\x20\x43\x38\x90\xd7\x7c\x96\x09\xbd\xe5\xef\x8a\xa1\x67\xa8\xc5\xe3\x79\x09\x83\xa7\xbd\xd1\xe8\xf3\xb3\xe3\x3d\xf6\xe4\x4f\x59\x0e\x59\x63\x2c\x66\x79\xba\x43\x72\x2c\x2b\xc4\x22\x0e\x15\x4c\x72\x33\x9c\x22\xd7\x98\x76\xf4\x32\x32\x68\x43\x1e\x3c\x86\x01\x55\x34\x7b\x3c\xdb\x58\x8b\x0d\xdc\xcc\x7a\x6b\xd0\x84\x01\x1c\x45\x70\x88\x1a\xa4\x3b\xcd\x20\x70\xc2\x98\x04\xd9\xfc\xfa\xec\x28\xaf\x80\xe3\x95\x03\x16\x6d\x01\x1f\xb5\x8c\xf2\x76\x3e\x0d\x1f\x93\x46\xf2\x72\x0d\x0e\xe3\x81\xfc\xae\x8a\x6a\xc8\x39\x54\x55\x8a\x4d\xbe\x84\xa6\xea\xa5\x92\x9e\x5c\xae\xb7\xd5\x2a\x1f\x88\x6c\x1d\xcc\x27\xac\xca\xd5\x2a\x37\xda\x62\x1d\x4d\x8f\x34\xc6\xaa\x7c\xbd\x3a\x5f\xb8\x9e\x9d\xab\xe0\x99\xdd\xf3\xf5\x69\x67\x10\x52\x6d\x45\x9a\x93\x17\x2f\xc2\x6c\x34\xba\x68\x1a\x83\xbe\x10\x93\xf0\x52\x88\xa6\xb6\x66\x87\xb5\xe9\xa5\xb1\x62\x03\xdf\x77\x98\xd2\xc0\x28\x18\x17\x60\xe3\xe0\xeb\xc7\xc7\x6f\x1f\x80\x9c\x3d\x9d\x11\x02\xaa\xd1\x33\x46\xf4\x23\xce\x9e\xbc\x7d\x03\xc6\x45\xf4\x7b\x69\x59\x2b\xa0\x22\xa7\x43\xca\xc8\xe2\x0b\x5f\xa0\x10\xad\xaa\xcf\x82\x15\xbc\xba\x5f\xad\x66\x84\x5e\x1e\x4d\x3f\xf6\x60\x4d\x83\xc0\xa1\xf8\x6f\x1c\xb9\x20\x15\xa2\x97\xc7\x9a\xe5\x52\xc8\xa0\x82\xd7\xf7\xbf\x3c\xe3\x5c\xc6\x84\xd5\xde\x3c\x7c\xf7\x15\x44\xda\xa1\x2b\x84\x0a\xbe\xa9\x9f\xc7\xa1\xe6\x3d\x6e\x2b\x25\x55\x87\x4b\x99\xa6\x05\x48\x2d\x87\xf8\x72\x8d\x4e\x85\x39\x15\x69\x8f\x7d\x92\xcf\x0a\x31\x6b\x5c\x96\xe9\x57\xf4\x59\x31\xc5\x31\xff\x1f\xc1\x2a\xc4\x45\x60\xca\xbb\xd5\xa2\x3b\x99\x02\xe9\xf4\x85\xa9\x9c\xab\xd6\x71\xa1\x93\x83\x8e\x42\x84\xb9\x39\xd7\xff\xaf\x8a\x9c\x7b\x28\x99\x5f\xc3\xc7\xcf\x04\x50\x96\x77\x65\xf9\x51\x24\x27\xd8\xf1\x67\xfb\x42\x7c\x38\xe0\x76\x09\xeb\xe0\x29\x92\x22\x0b\xb1\x93\x11\x4c\x80\x31\xa0\x9e\x6a\xce\xef\x11\xb4\xf1\xa8\x22\x44\x2f\x9b\xc6\x28\xde\xe7\x5a\x96\xc3\x60\x8d\x4a\x1d\x5e\x88\x0d\xbc\x19\xbd\x47\x17\xed\x09\xc2\x38\x30\x33\x06\xc8\xba\x18\x07\xce\x0a\x7f\x43\xa2\x10\xd5\x9a\x39\x64\xa3\x33\xc7\x89\x41\x26\xd3\x15\xb0\xd4\xec\xd0\xc2\x68\x91\x60\x8b\x60\x4d\x88\xe8\x50\xc3\xf6\xf4\x53\xcb\xac\x55\xb3\x3c\x54\xb0\x4a\x57\x5c\x89\xe5\x5a\xe4\x23\xb8\xb1\xdf\x4e\x0d\xf4\xb3\x90\x92\x0e\x13\x69\xb9\x2a\xcb\x4c\x30\xd4\x5b\x74\xe8\x65\x44\x08\x11\x87\x94\xc8\x3f\x78\x68\x3c\xf5\x20\xa1\x18\x9a\xe3\xc4\x45\x78\x64\x55\xd4\xd3\x09\x83\x7f\x6f\x9c\xa6\x43\x00\x85\x9e\x7b\x5d\x4d\x10\x4c\x05\x57\x9a\xc4\x26\x91\x5d\x43\xbe\xc5\xc8\xde\x4d\xfa\x49\x71\xf0\x66\xcf\xc2\x3b\x3c\x5d\xb3\xb9\x5f\x00\x0d\xe8\x42\xb0\x30\xec\x54\x28\xef\xe0\xc6\xb8\x84\x9a\xac\xdf\xd0\x18\xe7\x15\xf6\x70\xe3\x68\x87\xa7\xf0\xf3\xb4\x76\x78\x5a\x94\xf8\x20\xf0\x8f\xc6\x20\x78\x51\xa7\x5b\x55\xa0\xc6\x10\xa9\xbf\x4d\x29\xbc\x5d\xcc\x88\x1d\x9e\x5e\x14\x98\x11\x97\x0c\xf4\xc6\x25\xf2\x90\xd6\xd2\x01\x35\x3c\xbe\x7b\x80\x3d\x7a\x66\x8b\x1c\xd4\x0b\x15\xf3\xf8\xee\xa1\x5c\x71\xa5\xf0\x4f\xb9\xfc\xdc\x65\xf9\x54\x34\xbc\x78\x95\x15\x22\xda\x50\xf7\xc6\xd5\x33\x16\x54\x90\xc4\xb8\x35\xd3\x5c\x40\xdf\x9b\x89\xdd\x0e\x1d\xba\xb9\x8c\x97\xfa\xdd\x1b\x09\xef\x9d\x39\x82\xa6\x5e\x72\x9f\x93\xda\x61\x2c\x04\x57\x64\x3d\x2d\xea\x0b\x84\x0a\xee\xef\xef\xc5\x06\xde\x91\x92\x16\xae\x7e\xf3\xbb\x1f\xae\xe1\xfd\x77\xef\x12\x89\x71\x17\xa3\x0f\x70\x95\x66\xd0\xc3\xc3\xd7\x30\x0e\x5a\x46\xbc\x06\xa9\x14\xb3\xa2\x6b\xe1\x80\xdb\xe4\x80\x51\xc8\x7d\xf2\x8d\x83\x9e\x5b\x52\xc9\x80\x01\x4e\x34\x82\xa6\xcf\x73\x2f\x12\xa8\x4e\xba\x76\x1a\x17\x1a\x1b\x39\xda\x08\x7b\x69\xc7\xa4\xfc\x6b\xcb\x2c\x66\x62\x22\x2c\x30\x0d\xeb\xfb\x64\x37\x5d\xd1\x03\xe7\x8f\x1b\x98\x01\xd3\xc0\x61\x36\x95\x21\x8d\x8b\x74\x58\x08\xcb\xf7\xa8\xd3\x7b\x63\xf4\xdc\x77\x5f\x5c\x2d\x4d\x78\x1d\xd6\xb7\xb7\x5f\x5c\x9d\x5b\xea\x3a\xac\xe7\x15\xa7\xe7\x3a\xdc\x8a\xe7\x23\x49\x9b\x90\x1e\x22\x96\xda\x96\xaf\x6a\x1c\x78\x1a\x23\x4f\xb5\xf9\xa8\x9e\xd6\x35\xbf\x88\xce\x83\xe9\x02\x61\x7e\xc9\x5c\xf4\x21\x58\xdc\xa3\x85\xb7\x3f\x7c\xf3\x2d\x28\xea\x07\xbf\x0c\x97\x49\xb4\x6e\x3f\x99\xe1\xfc\xf2\x79\x11\x2c\x12\x58\x92\x1a\x64\x08\x18\x03\x5c\x99\x02\x0b\xc8\x78\x60\x73\x3d\x45\xec\x07\x2b\x23\x26\x3e\x1a\xc6\xad\x35\x2a\xbb\x9e\x9a\x56\x9b\xb0\x03\xe3\x42\x44\xa9\x81\x1a\xc0\x7e\x8b\x5a\x33\x5b\x18\x37\x4d\x49\xc6\xad\x27\xdc\x9a\x55\xea\xa4\x72\xe1\x4d\x7a\xfd\x49\xa7\x39\x1a\x83\x6c\xf1\x5c\x29\xd2\x91\x3b\xf5\x34\x26\x6e\xf5\x21\x4f\xd9\x49\x79\x85\xd0\xd1\x68\x75\x4a\x99\x71\xca\x8e\x9a\x63\x14\xc6\x6d\x7a\x0d\x2e\x8c\xdc\x49\xa7\xed\x67\xe2\xf2\xc8\xa5\x9f\x98\xfb\x78\x2a\xc4\x6c\x72\x4e\xe8\x2d\xcf\x4d\x53\xbe\x76\x4f\x7c\xd0\xf2\xc3\x10\xdd\xcd\xfb\x87\xfc\x53\x77\xf3\xe6\xf7\x82\x27\x2c\xef\xfd\xd6\xb5\xd6\x84\x2e\xff\xf7\xdf\xff\xf4\xe3\x3f\xff\xf2\xe3\x3f\xfe\xf6\xaf\xbf\xfe\x59\x6c\xe0\x3d\x73\x3f\xbb\xcc\x85\xcc\x93\x66\x30\x6a\x87\x7e\x42\x2c\x78\x93\x41\x9f\x44\x82\x4c\xd0\x22\xe1\x42\x05\x9f\x3a\x21\x3e\x10\xa7\xe3\x49\x84\x8e\x0e\x75\x43\xc4\xd9\x4f\x4f\x6d\x0e\xc9\x12\xa9\x0d\x3c\x74\x74\x98\x9e\x13\xd4\xc0\x92\x13\xc0\x23\xaa\x31\x55\x81\x71\xe9\x9e\x13\xc0\x33\xb0\x45\xb8\x4e\xc9\x98\x5f\x1a\xa9\xb2\x84\xf8\x4f\x00\x00\x00\xff\xff\x91\x79\xec\x9a\xe8\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
