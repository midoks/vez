// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6b\xe4\xb8\x12\x7e\xd7\xaf\x28\xcc\x19\x48\xa0\xe3\xb6\x93\x43\x32\xa7\x1b\x3f\x1c\xe6\x30\x17\xc8\x61\x87\x49\x86\x81\x09\xc1\x51\x5b\x65\xb7\xb6\x65\x95\x91\xe4\xbe\xe4\xd7\x2f\x25\xdb\x9d\xce\x6e\x16\xe6\x65\xfb\xa5\x2d\xa9\xea\xab\x52\x5d\x3e\x95\xec\xba\xd2\xca\x16\xa1\x80\x64\x8b\xcf\x89\x58\x39\x69\xd5\xeb\x2d\xd7\xdb\xb2\xf7\xe8\x78\xc3\x11\x85\x61\xa7\x25\x15\x45\x14\x6e\x13\x21\x1e\x14\xae\xfa\xe6\x51\x74\xe4\x42\x91\xe7\x59\x7e\x29\x84\x78\x30\xd4\x3c\x8a\x25\xdc\xaf\x11\x0c\x35\x50\x93\x6b\x65\x00\xd4\x61\x8d\x0e\x92\xdf\x3d\xd9\x04\xc8\x41\x12\x70\x1f\x12\x31\x1e\x17\xd3\x9a\x6d\x95\x9d\x0c\x6b\xde\x32\xd4\x78\xb6\xe3\x50\x69\xff\x08\x62\x09\x3e\x90\x43\xf0\xe8\xbd\x26\x2b\xd0\xca\x95\x61\x87\x82\xeb\x51\x48\xa5\x1c\x7a\xcf\x8a\xf9\xe5\x4d\x9a\xa5\x59\x9a\x2f\xae\xaf\x6e\xfe\x93\x88\x4e\x7a\xbf\x23\xa7\xf8\x2c\x11\x6a\xc5\xff\x19\x23\x8f\x48\x93\xc3\xe3\x12\x3a\x47\x5b\xad\xd0\xcd\x8e\x7e\xb7\xd8\x92\x3b\x24\x33\x48\x6a\x6d\x30\x99\xc5\x2b\x44\xbf\x92\x54\x4c\xe2\x50\xc0\x20\x37\xc2\x55\x64\x6b\xdd\xf4\x4e\x06\x06\xad\xc9\x81\x43\xdf\x61\x15\xf4\x16\x8f\x36\x16\x62\x09\x17\xa3\xde\x02\x14\xa1\x07\x4b\x01\x2c\xa2\x02\x69\x0f\x23\x08\x1c\x30\x44\x41\x36\xbf\x38\x3a\xca\x2b\xe0\x70\xcd\x00\xd3\x26\x85\x27\x25\x83\x9c\x8f\xa7\xfe\x29\x6a\x44\x2f\x17\x60\x31\xec\xc8\x6d\x8a\x50\x75\x33\x0e\x55\x11\x63\x33\x9b\x42\x53\xb4\xb2\x92\x8e\xec\x4c\xad\x8a\x6c\xd6\x11\x99\xd2\xeb\x67\x2c\xf2\x2c\x9b\x69\x65\xb0\x0c\xba\x45\xea\x43\x91\xbf\xcf\x8e\x17\x2e\x47\xe7\x0a\x78\x65\xf7\x78\x7d\xda\x68\x84\x58\x57\x81\xc6\xdc\x85\x93\x30\x6b\x85\x36\xe8\x5a\xa3\x4b\xc5\x20\x3c\x15\xa1\x2e\x8d\xde\x60\xb9\xc5\x67\xb1\x84\x1f\x6b\x8c\x49\x60\x0c\x0c\x13\xac\xb6\xf0\xf9\xfe\xfe\xeb\x1d\x90\x35\x87\xa3\xbe\xc7\xaa\x77\xc7\x92\x18\xfc\xf8\xf4\x01\xb4\x0d\xe8\xb6\xd2\xb0\x96\xc7\x8a\xac\xf2\x31\x1f\x93\x27\xec\x7e\x2a\x9a\xaa\x3c\x0a\x16\x70\x75\x9d\x65\x23\x42\x2b\xf7\xba\xed\x5b\x30\xba\x46\xe0\x40\xfc\x19\x47\x4e\x48\xa9\x68\xe5\xbe\x64\xb9\x18\x30\x28\xe0\xfd\xf5\xbf\x8f\x38\xa7\x11\x61\xb5\x0f\x77\xdf\x3e\x42\xa0\x0d\xda\x54\x54\xde\xd5\xe5\xeb\x28\x94\xbc\xc7\x3d\x55\xc9\x6a\x8d\x53\x91\xc6\x05\x48\x25\xbb\xf0\x76\x85\x0e\x65\x39\x94\x68\x8b\x6d\x94\x4f\x52\x31\x6a\x9c\x16\xe9\x47\x7a\x51\x8c\x71\x9c\xfd\x4d\xb0\x52\x71\x12\x98\xfc\x32\x9b\x74\x07\x53\x20\xad\x3a\x31\x35\xe3\x9a\xb5\x5c\xe6\x64\x61\x4d\x3e\xc0\xd8\x9a\x8b\x7f\xaa\x1e\xc7\x0e\x8a\xe6\x17\xf0\xf4\xd2\xfe\x79\x7e\x99\xe7\x4f\x22\x3a\xc1\x8e\xbf\xda\x17\xe2\x61\x87\xab\x29\xac\x9d\xa3\x40\x15\x19\x08\x6b\x19\x40\x7b\xe8\x3d\xaa\xa1\xe6\xdc\x16\x41\x69\x87\x55\x80\xe0\x64\x5d\xeb\x8a\xf7\xb9\x92\x65\xd7\x19\x5d\xc5\xfe\x4e\xc5\x12\x3e\xf4\xce\xa1\x0d\xe6\x00\xbe\xef\x98\x16\x3d\x24\xeb\x10\x3a\xce\x0a\xff\xfb\x48\x20\x55\xa3\xc7\x90\xf5\x56\xef\x07\xfe\x18\x4c\x17\xc0\x52\xa3\x43\x13\x9f\x05\x82\x15\x82\xd1\x3e\xa0\x45\x05\xab\xc3\x5f\x2d\xb3\x56\xc9\xf2\x50\x40\x16\xaf\x98\x89\xe9\x5a\xe4\x02\xd8\xbe\x5d\x0d\x0d\xf4\x4b\x48\x51\x87\x69\x34\xcf\xf2\x3c\x11\x0c\xf5\x09\x2d\x3a\x19\x10\x7c\xc0\x2e\x26\xf2\x37\x07\xb5\xa3\x16\x24\xa4\x5d\xbd\x1f\x98\x08\xf7\xac\x8a\x6a\x38\x61\xf0\x1f\xda\x2a\xda\x79\xa8\xd0\x71\xa7\x57\x03\x04\x13\xc1\x99\x22\xb1\x8c\x54\x57\x93\x6b\x30\xb0\x77\x83\x7e\x54\xec\x9c\xde\xb2\xf0\x06\x0f\xe7\x6c\xee\x5f\x40\x1d\x5a\xef\x0d\x74\x9b\xca\xe7\x97\x70\xa1\x6d\x44\x8d\xd6\x2f\xa8\x0f\xe3\x0a\x5b\xb8\xb0\xb4\xc1\x83\xff\x35\xad\x0d\x1e\x26\x25\x3e\xf0\xfc\xa1\xd0\x0b\x5e\x94\xf1\x56\x05\x54\xbd\x0f\xd4\xce\x63\x0a\xe7\x93\x19\xb1\xc1\xc3\x9b\x02\x23\xe2\x94\x81\x56\xdb\x48\x1e\xd2\x18\xda\xa1\x82\xfb\xdb\x3b\xd8\xa2\x63\xb6\x98\x41\xf5\x46\xc5\xdc\xdf\xde\xe5\x19\x57\x0a\x7f\xe4\xd3\xc7\x65\x32\x1b\x8a\x86\x17\x57\x49\x2a\x82\xf1\x65\xab\x6d\x39\x62\x41\x01\x51\x8c\x5b\x33\xbe\x0a\xe8\x5a\x3d\xb0\xdb\x6e\x8d\x76\x2c\xe3\xa9\x7e\xb7\x5a\xc2\x77\xab\xf7\xa0\xa8\x95\xdc\xe7\x54\x6d\x30\xa4\x82\x2b\xb2\x1c\x16\xe5\x09\x42\x01\xd7\xd7\xd7\x62\x09\xb7\x54\x49\x03\x67\xff\xfb\xff\xcf\x73\xf8\xfe\xed\x36\x92\x18\x77\x31\x3a\x0f\x67\xf1\x05\xba\xbb\xfb\x0c\x7d\xa7\x64\xc0\x73\x90\x55\xc5\xac\x68\x1b\xd8\xe1\x2a\x3a\xa0\x2b\xe4\x3e\xf9\x62\xa1\xe5\x96\xac\xa4\x47\x0f\x07\xea\x41\xd1\xcb\xab\x17\x08\xaa\xb5\xb4\xcd\xf0\x58\x28\xac\x65\x6f\x02\x6c\xa5\xe9\xa3\xf2\x7f\x0d\xb3\x98\x0e\x91\xb0\x40\xd7\xac\xef\xa2\xdd\x78\x45\x07\x9c\x3f\x6e\x60\x06\x8c\xcf\x0d\xb3\xa9\xf4\xf1\xb9\x88\x87\xa9\x30\x7c\x8f\x32\x0e\x1b\xbd\xe3\xbe\x7b\x77\x36\x35\xe1\xb9\x5f\xcc\xe7\xef\xce\x8e\x2d\x75\xee\x17\xe3\x8a\xd3\x73\xee\xe7\xe2\xf5\x93\xa4\xb4\x8f\x53\x88\xa1\xa6\xe1\xab\x6a\x0b\x8e\xfa\xc0\x6f\xda\x78\x54\x0e\xeb\x92\xc7\xa1\xe3\xc3\x74\x82\x30\x8e\x31\x27\x7d\x08\x06\xb7\x68\xe0\xd3\xcf\x2f\x5f\xa1\xa2\xb6\x73\xd3\xe3\x32\x88\x96\xcd\xb3\xee\xa0\x80\x5a\x1a\x8f\xe2\x4d\xb0\x40\x60\x48\x2a\x90\xde\x63\xf0\x70\xa6\x53\x4c\x21\xe1\xe7\x9a\xeb\x29\x60\xdb\x19\x19\x30\xf2\x51\xd7\xaf\x8c\xae\x92\xf3\xa1\x69\x95\xf6\x1b\xd0\xd6\x07\x94\x0a\xa8\x06\x6c\x57\xa8\x14\xb3\x85\xb6\xc3\x2b\xc9\xb8\xe5\x80\x5b\xb2\x4a\x19\x55\x4e\xbc\x89\xa3\x9f\xb4\x8a\xa3\xd1\xc9\x06\x8f\x95\x22\x2d\xd9\x43\x4b\x7d\xe4\x56\xe7\x67\x31\x3b\x31\xaf\xe0\xd7\xd4\x1b\x15\x53\xa6\x6d\x65\x7a\xc5\x31\xf2\xfd\x2a\x8e\x82\x13\x23\xaf\xa5\x55\xe6\x85\xb8\x1c\x72\xe9\x47\xe6\xde\x1f\x52\x31\x9a\x1c\x13\x3a\x17\xe2\xa1\x25\xdb\x90\x5a\x3d\xc6\xd1\xb0\x78\x61\xff\xcb\x9b\x2c\xbf\x11\x6a\x55\xf0\x7c\x21\xc4\x83\x6e\x65\x83\xa3\x14\x67\x7a\x31\x9f\x8f\x2c\xba\xb8\xba\xba\xba\x9a\xeb\xb9\xe8\xb4\x6d\xde\x3c\xe3\x83\x78\x5a\xf2\x6c\x47\xd6\x63\x41\x1b\x21\x1e\x88\x13\xf2\x28\xfc\x9a\x76\x65\x4d\xc4\xf9\x8f\x63\x36\x07\x65\x8a\xd5\x12\xee\xd6\xb4\x1b\x06\x0a\xaa\x61\xca\x0a\xe0\x1e\xab\x3e\xd6\x81\xb6\xf1\xa6\x03\xc0\x2b\xb0\x49\xb8\x8c\xe9\x18\x67\x8d\x58\x5b\xfc\xfb\x23\x00\x00\xff\xff\x37\x4e\x4b\x31\xe3\x0b\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf": confAppConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf": &bintree{confAppConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
