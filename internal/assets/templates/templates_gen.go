// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\xaf\x9b\x3c\x10\x85\xf7\xfc\x8a\x91\x5f\xe9\x55\xbb\x70\x7c\x9b\x64\xd5\x0b\x54\x6a\x37\x5d\x54\xea\xba\x4b\x83\x27\x30\xa9\x3f\x90\x3d\x90\xa0\x28\xff\xbd\x22\x7c\x44\xb7\xed\xa6\x1b\x34\x02\xce\x33\xe7\x1c\x3b\xcb\xb2\x2c\x37\x34\x40\x6d\x75\x4a\x85\xa8\x83\x67\x4d\x1e\xa3\x28\x33\x80\xfc\x14\x02\x63\x5c\x3f\x1a\x79\xb2\x78\x85\xe9\x21\x2f\x51\x77\x70\xee\x13\xd3\x69\x94\x93\x0a\x3d\xcb\x0a\xf9\x82\xe8\x41\x5b\x6a\xbc\x24\x46\x97\x64\x8d\x7e\x42\x74\xa3\x3c\x80\x1b\xe5\x11\xaa\x10\x0d\x46\xc9\xa1\x7b\xec\x00\x78\xbb\xdf\x4a\x67\xe4\x11\x96\x5d\x7f\x92\x16\x11\x40\xae\xa1\x8d\x78\x2a\x84\x12\xab\xda\x55\xd3\x12\x94\x7b\x70\xd5\x84\x79\x01\xc6\x2b\x4b\xd7\x33\x9a\x79\x34\x58\x87\xa8\x99\x82\x97\x3e\x78\x04\xdb\xca\x0f\x1b\x11\x20\x4f\x43\xb3\xc2\x2a\x12\x70\x21\xc3\x6d\x21\x0e\x2f\x02\x5a\xa4\xa6\xe5\x42\xec\x8f\xa2\xcc\xfb\x84\x70\xb5\xe4\x7f\x7e\x9c\x2d\xfc\x57\x85\xc0\x89\xa3\xee\x84\x2a\x73\x95\x86\x66\x73\xa9\xf4\x36\xa6\x4e\xfb\x95\xfe\x34\x26\xca\xff\xeb\xd0\x8d\xaf\x70\xbb\xfd\x40\x1d\xef\xf7\x5c\x4d\x3f\x2e\xdd\x28\x43\x43\x99\xcd\x73\x6f\x57\xb5\xd7\x03\x6c\x55\xfd\x7e\x0a\xe8\x0d\x58\x4a\x2c\x7b\x9f\x78\xb4\x68\x96\x32\x9f\xcd\x59\xda\x1a\x4b\xf2\x20\xca\x9c\x5c\xb3\x66\xdd\x1f\xdf\x64\x85\x14\xeb\x42\xa8\x93\x1e\xa8\x0e\x7e\xd7\xf9\xe6\x91\xd0\xd2\xea\xaf\xb7\x8f\x9b\xa2\xe6\xab\x52\x66\xab\xe3\x3c\xd5\x91\x3a\x5e\xf4\x89\x35\x53\xad\xce\x49\x6d\x4d\xed\x1c\xf9\xdd\x39\x7d\x1a\x8a\xdb\xed\x73\x4f\xd6\x7c\x09\xce\x11\xdf\xef\x62\x6a\xf0\x21\x2e\xff\x4e\x69\xa9\x69\xed\xe4\xf0\x39\xfd\x13\x8c\xc7\x0e\xe7\x13\x50\x67\x3d\xe8\xf9\xad\x28\xb3\xd6\x9e\xd3\x8e\x3c\xf1\xd7\x15\x4b\xbe\xf9\xee\xbf\x05\x6d\xde\xbd\x7f\xcd\x9e\xa0\x2c\x57\x55\x30\xe3\x14\xb6\x65\x67\xcb\x5f\x01\x00\x00\xff\xff\x40\x4f\x5d\x5e\x46\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\x1b\xc7\xf1\xbf\xf3\x53\x94\xe7\x7f\x91\x00\x75\xb1\x5f\xf3\xd2\x92\xfb\x87\xb4\x52\x42\x07\x92\x9c\xc0\x7a\xd8\x30\x8c\xa0\x39\xd3\xe4\x8c\x34\x0f\x7a\xa6\x39\xbb\xcb\xd5\x5e\x62\x18\xb9\x25\x39\x19\x41\xe0\x43\x12\x04\x41\x6e\x09\x10\x27\x30\xec\x43\xbe\x8c\xad\x44\xdf\x22\xe8\x19\x92\x3b\x5c\x51\xf2\x3a\x89\xb1\x58\xb2\xab\xa6\xfa\x57\x55\xbf\xae\xea\xe9\xe6\xe8\xad\x3b\xef\x1c\x3d\x7c\xff\xc7\x77\x21\x31\x79\x76\x38\x18\xad\xbf\xde\x22\x04\xbe\xf9\xc3\xe7\x2f\x3f\xfe\x13\x10\x62\xd5\x5a\xc5\x87\x83\x51\xae\x8d\x82\xc4\x98\x05\xd1\x1f\x2d\xd3\x66\xec\x1c\x95\x85\xd1\x85\x21\x0f\x4f\x17\xda\x81\xa8\x93\xc6\x8e\xd1\x27\x66\x68\xa1\x0e\x20\x4a\x54\x55\x6b\x33\x7e\xf4\xf0\x07\x24\x70\x60\xb8\x0f\xe5\x3d\xf2\xe8\x16\x39\x2a\xf3\x85\x32\xe9\x34\xeb\x03\xbd\x7d\x77\xac\xe3\xb9\x76\xde\xe4\xfb\x9e\x2a\xe6\x4b\x35\xef\x4f\x8b\x8a\xed\x8c\x42\xe5\x7a\xec\x34\xa9\x3e\x5e\x94\x95\xe9\xd9\x1c\xa7\xb1\x49\xc6\xb1\x6e\xd2\x48\x93\x56\xb8\x01\x69\x91\x9a\x54\x65\xa4\x8e\x54\xa6\xc7\x0c\xe9\x0d\xc8\xd5\x49\x9a\x2f\xf3\xbe\x6a\x59\xeb\xaa\x95\xd5\x34\xd3\xe3\xa2\xec\xb2\xca\xd2\xe2\x19\x54\x3a\x1b\x3b\x75\x52\x56\x26\x5a\x1a\x48\xa3\xb2\x70\x20\xa9\xf4\x6c\xec\x0c\x67\xaa\xb1\x32\x2e\x8a\xb9\x73\x38\xe8\x28\x7e\xf1\xe9\x5f\xe0\x76\x59\x9a\xda\x54\x6a\x01\x2f\x7e\xfb\xc5\x37\xff\xf8\x18\x8e\xde\x7d\x17\x5e\x7c\xfa\xf3\xaf\xbf\xfa\x7b\xc7\x7d\x0f\xd8\x9c\x66\xba\x4e\xb4\x36\x5b\xd4\xda\x28\x93\x46\xc3\xa8\xae\x87\xd3\x0d\x10\xe6\x69\x81\x51\x5d\xff\x7f\x33\x3e\x3b\xbb\xbd\x4c\xb3\xf8\xa8\xcc\xf3\xd4\x9c\x9f\x3b\x57\x84\x4b\xd2\x79\x92\xa5\xf3\xc4\x0c\x3b\x9b\x61\xac\x67\x6a\x99\x99\xff\x1e\xb9\xd6\xd9\xac\xfd\x78\x2d\xcc\x9a\x9a\x51\x1d\x55\xe9\xc2\x40\x5d\x45\x17\xb3\x9f\xd6\xc3\xa7\x1f\x2d\x75\x75\x4a\x18\x32\x86\xb4\x8d\xe7\xe9\x5e\x9c\xd1\xb0\x03\x38\x6c\x49\x1c\x0c\x36\x78\xb1\x32\x8a\xa8\x98\x44\x59\xda\x95\x8a\x22\x8b\xe5\x94\xf8\xbe\xf0\xbc\xd0\xf5\x3d\xee\xb2\x90\x0a\xe1\x80\xaa\x4f\x8b\xa8\x73\x6f\xab\xae\xbe\x39\x1c\x2e\xd4\x5c\xab\x98\xe3\xbc\x2c\xe7\x99\xae\x4f\x8b\x38\x8d\x94\x49\xcb\x02\xa3\x32\x5f\x3f\xb5\x31\xaa\xb8\x9e\x9e\x76\x46\xf8\xb4\xee\xc5\xb2\x53\x93\x9d\x01\xa9\x53\xa3\x49\xa3\xab\x74\xb6\x06\xeb\xd5\x68\x7c\x3b\xfc\x51\xf9\x20\x7a\x70\xe7\x27\xef\x3c\x79\xff\x51\xf5\x64\x79\x27\xb8\x1b\x33\x71\x2f\xfa\xe1\x9d\x67\xe2\xc9\xdb\x0d\x5d\x50\x37\xba\xff\xe8\xbd\x4a\x44\xbd\xd6\xea\xe0\xa7\x2a\x8d\x97\x6f\x44\x8f\xca\x58\x93\x27\xc7\xde\xb3\x8c\x7f\x34\x59\x74\x65\x7c\xc1\xd4\xe1\xa0\x51\x15\xfc\x34\xc9\x0d\x8c\xbb\xaf\xe7\xcf\xe1\x83\x0f\x0f\x06\xd7\x66\xcb\x22\xb2\x50\xd7\xae\xc3\xd9\x00\xc0\x9a\x25\x39\x8c\x21\x2e\xa3\x65\xae\x0b\x83\x51\xa5\x95\xd1\x77\x33\x6d\xa5\x6b\x4e\x87\xe7\x5c\x3f\x18\x00\x24\x39\xd6\x55\x04\x63\xd8\x92\x9a\xe4\xd8\x86\xda\x72\x98\xe4\x76\x39\x23\xcf\xf3\xa9\xa7\xe9\x2c\x62\x53\x8f\x87\x42\x79\x7c\x16\xe8\xa9\x72\x83\x40\x84\x54\x47\xce\xc1\xda\x6d\xdd\xf7\x3a\xd7\x66\xed\xb2\xbe\x7d\xfa\x50\xcd\x1f\xa8\x5c\x5f\x38\xff\x80\x7e\x78\x00\x03\x80\x1a\x17\xaa\xd2\x85\x79\x50\xc6\x1a\xd3\xa2\xd6\x95\xb9\xad\x67\x65\xa5\xaf\x25\xf9\x0d\xa8\xaf\x1f\x0c\xce\xaf\x5f\xbb\x7e\x30\xb8\x58\xb3\xc1\xe0\xec\x2c\x9d\x01\xde\xaa\x4c\x1a\x65\xfa\xfc\x7c\x30\x32\xa9\xc9\xf4\xe1\xd9\xd9\x46\x87\x0f\xad\xe2\xf9\x44\xab\xb8\x1d\x9d\x9f\x03\x81\x17\x3f\xfb\xe3\xbf\xfe\xfc\xd5\x68\xd8\x19\xef\xac\xcd\x33\x7d\x7a\x5c\x56\x71\xdd\x5b\x8c\x37\x81\xdd\xe8\xa0\x2e\xed\x69\xb1\xee\x22\xdc\x5d\xd4\xb3\x33\x9c\x98\x3c\x83\xe7\xb0\x17\xe0\xec\x4c\x67\x75\x2f\x87\xef\x16\xe4\x77\x88\xa3\xef\xb1\x88\xcf\xcf\x6d\x61\xbd\xb2\x85\x9f\x90\xb8\xa8\xc9\xa2\xd2\x33\x6d\xa2\x84\xd8\xc9\x55\x99\xf5\x50\xca\x62\x77\x63\xe9\x9b\x6f\xb7\x96\x61\x9a\xab\xb9\xc6\x48\x45\x89\x8e\x12\x65\x0b\xe9\x2a\xb3\x72\xb1\x0c\x2e\x4f\x1a\x7c\xfb\xb4\x37\x6e\x02\x57\xf1\x6b\x16\xd1\x7f\x3e\xb9\x9b\xa8\xe2\x1a\xe7\x18\x97\xcb\x69\xa6\xa3\x2c\x8d\x9e\x61\xa1\xcd\x55\xa6\x1f\x1f\x1f\xaf\x7d\x5f\xd5\xe1\x6c\x59\xc4\x69\x31\x8f\x92\x32\x8d\x74\x9d\xeb\xba\x56\x73\x5d\xef\x82\x0c\x06\xa3\x61\x77\x42\x18\x8c\xa6\x65\x7c\x6a\xbf\xeb\x66\x0e\x27\x79\x56\xd4\xdd\xf6\x79\xb3\xf3\x7d\x2c\xb0\xac\xe6\x43\x4e\x29\x1d\xd6\xcd\xdc\x81\xf6\x4d\x31\x76\xe2\xb4\x5e\x64\xea\xf4\x26\x14\x65\xa1\x0f\x9c\xc3\x01\xc0\xa8\x3e\xcd\xa7\x65\x06\x69\x3c\x76\xb6\xaf\x36\x07\xec\x9b\xfc\x76\x79\x32\x76\x28\x50\x60\x2c\x80\x50\xb6\xe6\x00\xeb\x8a\xde\xbe\x4f\xb7\x45\xdd\x3e\x5c\x28\x93\xc0\x2c\xcd\x32\x52\x2d\xad\x47\xdd\xe8\xa2\x8c\x63\x07\xa2\x2c\x5d\x5c\xd6\xc5\x63\xe7\x3e\x97\xe8\xd2\x10\x68\x44\x3c\xf4\x85\x00\x4a\x18\x43\x9f\xb9\xe0\x62\x10\x0a\x2b\xc8\x90\x03\xe3\xc8\x03\x89\x9c\x49\xf0\x90\x49\x82\xd4\x93\xc0\x24\xd2\x90\x13\x8e\xd4\xf3\x80\x53\x74\x7d\xff\x28\xc0\x50\x0a\x10\x21\x0a\xcf\x42\xb8\xd2\x07\x29\x50\x06\x2e\x50\x90\x12\x29\x93\x8d\x8b\xa1\xcf\xa3\xf6\x19\xba\x3c\x84\x6e\x8a\x44\x4f\x86\xc0\x28\x86\x2e\x03\xc6\x90\xb9\x02\x38\x52\xca\xc1\x6b\xa7\xdb\x00\xac\x47\x29\x7c\xd8\xf1\xc8\x38\xfa\xa1\x84\x20\x40\x46\x3d\x60\x3e\xfa\xbe\x07\xa1\x04\x9b\x18\x83\x50\x4e\x42\x81\x6e\xb4\x4e\x0e\xda\xe4\x24\x69\x93\x83\x36\x39\x46\xba\xe4\x88\xcd\x8e\xd8\xec\x6c\x72\xa4\x4b\xae\x73\x45\x3a\x57\x6d\x3c\x21\xf1\xd0\xa5\x12\x5c\x14\xa1\x47\x18\x45\x8f\xcb\x36\x6c\xd9\x92\xc5\x5c\xd1\x90\x2e\x43\xd2\xa6\x48\x6c\x8e\x24\xc0\x50\x48\xd2\xe6\x48\x76\x8c\x49\x9b\x23\xb1\x39\x4a\x62\xe3\x20\x5d\x8e\xa4\xef\xf8\x88\x51\xb7\xe5\xde\x86\x6d\xbd\x51\xe4\x6d\x36\x36\x35\xa0\x93\x76\x0d\x83\xd5\xfd\x80\x82\xeb\x63\xe0\x89\xa3\x80\x82\xe7\xa1\xe7\x09\xf0\x05\x4a\xe1\x81\xcf\xc1\xe3\xe8\x4a\x01\x3e\x9f\x48\xa9\x38\x70\xa0\x40\x19\xe1\x84\x3f\xe6\x17\x32\x27\x3c\x61\x81\x8d\x20\x0a\x91\x06\x2d\x65\x2e\x52\x29\x41\xa2\xad\x83\x6e\xcc\x38\x4a\x5f\x02\xb5\x2c\x50\x4e\xec\xba\x5a\x0e\xa8\x0c\x49\x88\x8c\xb5\xeb\x18\x04\x0d\x72\xdf\x3f\xf2\x5d\x14\xcc\x07\xe9\xa1\xb0\xcb\x44\xc1\x65\xc8\x19\x6c\x63\x5d\xdd\xf7\x28\xba\x9c\x01\x0f\x50\xc8\x89\x0c\x31\x94\x41\xc3\xa4\x65\x2c\x09\x30\xa4\x76\xf1\x82\xc0\x7a\xb3\x6c\x07\x84\xa3\xef\xf3\xf5\xd8\x47\x9f\xfb\x40\x5b\x66\x05\x11\xc8\x3d\x49\x7c\xe4\xd4\x27\x21\xda\x64\xda\xf1\xea\x7e\x07\x0a\x32\x44\xde\x30\x0f\xa5\x1b\x4c\x3c\x8a\x21\x8b\x7c\x64\x9e\xdf\x21\x87\x9e\x5d\x80\xc0\xf7\x36\x42\x80\x3c\x60\x40\x89\x8b\x92\x7a\x44\x60\x48\x05\x09\x90\xf9\x41\xdb\x14\xdc\xed\x84\x75\xc0\x2b\x7b\xfc\xb1\xcd\xd7\xf6\xf4\xb0\x6b\xea\xcb\xfd\x9d\x94\xb9\xbe\xdc\xda\x1e\x30\xcf\xe9\x37\xaf\x6d\xca\x00\x85\x2b\x81\x21\x93\x9e\x42\xd7\xae\xb1\xfd\x23\xe8\xd3\x00\x68\x46\x3c\xf0\x6e\x5d\xa8\x81\xa1\x0b\x3e\xba\x8d\xdf\xb3\x05\x3b\x4c\x24\xba\xbb\x3a\x82\x6e\x43\x64\xc2\x1b\x79\xd9\x76\xc2\xe4\x1e\x53\x7f\xc7\x3d\x93\x1e\xb1\x91\xdd\x63\x02\x5c\xf4\x43\xf1\x98\xef\x38\x20\xed\xac\x84\xb0\x5d\x1d\xba\x0d\x43\x1e\x8a\x7b\xbd\xb4\x56\xf7\x39\xba\xc0\xe4\x63\x1f\x7d\xea\x67\x2e\xba\xb6\x5d\x60\xfd\xff\x98\xc9\x09\xa3\x0d\x91\x7b\xc0\xc5\x2b\xe0\x72\xc2\xd1\x5d\x39\xc3\x37\x51\x6f\x54\x7b\xe3\xba\x02\xf7\x14\xf8\xa6\x1b\x80\x41\xdb\x0f\x3b\x0a\xe0\x4d\x5f\x41\x38\xf0\xc9\x8e\x6c\x1b\x6a\x95\x33\x17\x78\x42\x64\x23\x12\xf9\x58\xae\x72\x0a\x72\x23\x05\x3d\x49\x28\x06\x6c\xb3\x8c\x84\x35\x84\xaf\x72\xe2\x82\x68\x88\x98\x78\xd6\xba\x15\xa9\x15\x59\xc3\xfb\xc6\xc0\x12\xb1\xca\x89\x24\xd2\x42\x4e\x58\x23\x56\x39\x6d\x05\xd9\x09\x2e\x11\x9d\xf3\x89\xb7\xca\x25\xc8\x0e\xef\x71\xf0\x2d\x44\x2d\x74\xb9\xc8\x34\x89\xd2\x2a\xba\x22\x61\x8c\x81\xa7\x04\x88\x2e\x2a\xe2\x01\x85\x4e\xb2\xb2\x07\x74\xed\xf0\x4d\x2f\xa7\x8e\xf7\x40\x05\x10\x74\x28\xd6\x15\xbd\xd5\x89\xb4\x4d\x3a\x58\xe5\x01\xf1\x95\x0f\xfe\x7a\xe9\x5d\x94\x5e\x60\xb7\x70\xe1\x1f\x09\xe4\x92\xdb\x31\xe7\x1e\x48\x0c\xa8\x0b\x8c\x42\x00\x8c\xd6\x12\x7d\xd7\x07\xfb\xc4\x56\x96\x9d\xc2\x51\xf8\xb7\xb6\x38\xd6\xea\x5b\x28\x99\x57\x69\x7c\x35\x26\x80\xa3\x7b\xcb\xb6\x23\x5b\x57\x68\xab\xb1\x4b\x75\x49\x6b\xdf\x25\x6e\x73\x59\x6b\xeb\xda\x4f\xc8\x65\x75\xfb\xa0\x21\xa2\xeb\x19\xfe\x4a\xfd\x8b\x57\xfa\x5e\xec\x69\x65\xb1\xaf\x97\x56\xb9\x67\xb5\x97\x1d\xd2\xbd\x41\xdb\x92\xde\x13\x35\x13\xfb\xc3\x0e\x37\x61\xe7\xac\x75\xf7\x3f\x8d\xfb\x7e\x17\xe5\x1e\xb2\xc3\x3d\x64\x5b\xd3\xbd\x6c\x33\x77\x1f\xdd\x36\xa3\xef\x2b\xf0\xd7\x13\x1e\xda\xdd\x60\x57\xdd\x49\xcd\x25\x3d\x59\x4b\xfb\x28\xff\x3e\x43\xbf\xdc\x25\x23\x7b\xb6\xb5\x87\x60\x7b\x28\xd6\x15\x44\x99\xaa\xeb\xb1\xb3\x20\x02\xa6\x73\x12\xab\xea\x19\x18\x7d\x62\xc8\x71\x92\x1a\x0d\xf9\x94\x88\x4d\xc7\xc4\x69\xb3\xb1\xb6\x77\x20\x95\x16\xba\x5a\x3f\xdb\x7d\x1a\x93\x59\xa6\x4f\xc0\x7e\x90\xe3\x4a\x2d\x40\x65\xe9\xbc\x20\xa9\xd1\x79\x4d\x22\x5d\x18\x5d\xc1\xd3\x65\x6d\xd2\xd9\x29\x59\xdf\xa6\x5e\xa7\xce\xe6\xa4\x36\xaa\x32\x5b\x3f\x00\x23\xb5\x39\xff\x3b\x97\x1c\xee\x71\x93\x4f\x09\xb7\x1f\xd9\x9c\xd0\x7e\x5e\xed\x30\xd6\x51\x59\xb5\x37\x1c\x62\x8f\xf6\x3d\x1f\x76\x2b\x69\xe6\x1b\xf8\x69\x0a\xb9\x26\xdc\x81\xee\x67\x39\x47\x52\x07\x12\x9d\xce\x13\x33\x76\x04\x77\xa0\x2a\xed\xbe\x98\xe6\x73\x07\x54\x95\x2a\x92\xa9\xa9\xbd\xb3\x6c\x0f\xfb\xce\xe1\x68\x59\x6b\x38\xb1\xd7\x99\x9b\x5d\xec\xff\x77\x71\x6b\x18\x1e\xae\x97\x64\xeb\x7a\xa8\x0e\x07\x17\xd2\x32\xdb\xc4\x51\xa8\x06\xa2\x32\x23\x8c\xb7\x5f\xd9\x9c\xa8\xa5\x29\x6d\x6c\xdb\xa1\x4d\xf7\x35\xd4\xe6\x53\x92\xc7\x84\xee\x66\x99\xa5\x87\x7b\xf8\x2c\x54\x43\xda\xbb\xd7\xe2\x84\xf0\x1e\x6d\xce\xe1\xd7\x5f\x7c\xf5\xf2\x77\x7f\xb3\x11\x8e\x86\x59\xfa\x7a\xa8\x4a\x15\xf1\x15\xe0\x5e\xfe\xe6\x97\x2f\x3e\xfb\xf2\xe5\xaf\x3f\x69\xef\xf9\x7b\x40\xdb\x5f\xdb\x76\x90\xd5\xb4\x5c\x9a\x2b\x40\x7f\xf3\xc9\x5f\xbf\xfe\xf2\x17\x5b\xd0\xf6\x97\xb6\x0b\x86\x97\x59\x9f\xe2\x59\x59\xe5\x17\xa5\xfd\x2a\xc1\x53\x22\xb6\x45\xd4\xb1\x2d\x76\x69\x4c\x8b\xc5\xd2\x80\x39\x5d\xe8\xb1\x53\x6b\x55\xd9\x4b\xea\x1a\xcf\x62\x6f\x7e\x3c\x80\xbe\xd0\xf6\x9a\x03\x8b\x4c\x45\x3a\x29\xb3\x58\x57\x63\xe7\xc5\xaf\x3e\xfb\xe7\xe7\xbf\x47\xc4\xdd\x4a\x7a\xb7\x83\xec\x27\x60\x91\xb6\xbd\x37\x8c\xd3\x66\xdd\xa4\x9b\x61\x77\xe9\xd5\xd5\xe1\xbf\x03\x00\x00\xff\xff\x5e\x86\xd3\xe3\x46\x17\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
