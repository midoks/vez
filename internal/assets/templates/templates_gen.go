// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xc1\xae\x9c\x30\x0c\x45\xf7\x7c\x85\x95\x4a\x5d\xd5\xcd\x2b\x33\xab\x36\xb0\xe9\xaa\x9f\x11\x88\x81\xb4\x89\x83\x12\xc3\x0c\x7f\x5f\x31\x33\xf0\xf4\xda\x4d\xe4\x48\xf1\xf1\xbd\x37\xae\xaa\xaa\x32\xce\xaf\xd0\x07\x5b\x4a\xa3\xfa\xc4\x62\x3d\x53\x86\xc1\xdf\xc9\x61\x97\x44\x52\x54\x6d\x05\x60\x86\x94\x84\xf2\xf1\xd2\xe1\x10\xe8\x0e\xfb\x81\xb7\x6c\x67\xf8\xbd\x14\xf1\xc3\x86\x3b\x82\x58\xb0\x23\xb9\x11\x31\xd8\xe0\x47\x46\x2f\x14\x0b\xf6\xc4\x3b\x62\xde\xf0\x02\x71\xc3\x2b\x74\x29\x3b\xca\x28\x69\x7e\xcc\x00\xf8\x28\x26\x60\x74\x78\x85\xd7\xac\xff\x49\xaf\x26\x00\x63\x61\xca\x34\x34\x4a\xab\xa3\x3b\x76\xfb\x10\xc2\x1a\x62\xb7\x63\xde\x40\xe8\x2e\x18\x17\x21\xf7\x2c\x1d\xf5\x29\x5b\xf1\x89\x91\x13\x13\x84\x09\xbf\x9d\x44\x00\x53\xd6\xf1\x80\x75\x5e\xc1\xcd\x3b\x99\x1a\x75\x79\x53\x30\x91\x1f\x27\x69\x54\x7d\x55\xad\x59\x0a\xc1\x3d\x78\xfe\xf3\xfd\x29\xe1\x53\x97\x92\x14\xc9\x76\x56\xba\x35\xba\xac\xe3\xa9\x52\xdb\xb3\x2c\xb3\xe5\x83\xfe\x2e\x4c\xb5\x9f\xfb\x34\x6f\x3f\xa0\x7e\xab\x6b\xf8\x99\xe2\x6c\x79\xfb\x02\xbf\xb8\x37\x7a\xef\x78\x85\xa4\x9d\x5f\xdb\xea\x59\x2f\xe1\xc0\xb0\x5d\xe1\xcc\xec\xdf\xef\x20\x76\x10\x7c\x11\x5c\xb8\xc8\x16\xc8\xbd\x52\x7d\x8f\x30\xf8\x33\xba\x82\x17\xd5\x1a\x1f\xc7\xc3\x74\x7d\xfd\x60\x1a\x4a\xee\x1b\xa5\x07\xbb\xfa\x3e\xf1\xd7\x99\xc7\x87\xd5\xe0\x0f\x7d\x4b\x78\xac\x8c\x7e\xee\x4c\x5b\x1d\x8a\x8d\xee\x92\xdb\xf6\xfb\x24\x31\xb4\x7f\x03\x00\x00\xff\xff\xcb\xe5\x05\xd5\x7f\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcf\x8e\xe3\xc6\xd1\xbf\xcf\x53\x94\xe9\xab\xab\xd4\xff\x9b\xb4\x25\x7d\x58\xcf\xe7\x40\x01\x76\x90\x00\xbb\x1e\x24\x47\x8a\xea\x11\xb9\x4b\x8a\x32\x49\x71\x66\x74\x8c\x61\xe4\x96\xe4\x64\x04\x81\x0f\x49\x10\x04\xb9\x25\x40\x9c\xc0\xf0\x1e\xf2\x32\xbb\x93\xec\x5b\x04\x4d\x4a\x1a\x49\xa3\x5d\x2f\x02\x1b\x83\x91\xba\x8a\xd5\x55\xf5\xfb\x55\x15\xd5\x3d\x7c\xef\xff\x7f\x72\xfe\xf4\xe7\x3f\xfd\x04\xd2\xa6\xc8\xc7\x67\xc3\xcd\xd7\x7b\x88\xf0\xea\x4f\x5f\xbf\xfe\xfc\x2f\x80\xe8\xd5\x2e\x9e\x8d\xcf\x86\x85\x6b\x62\x48\x9b\x66\x89\xee\xb3\x55\xd6\x8e\x82\xf3\x72\xd1\xb8\x45\x83\x4f\x6f\x97\x2e\x80\xa4\x97\x46\x41\xe3\x6e\x9a\x81\x77\xf5\x11\x24\x69\x5c\xd5\xae\x19\x7d\xfa\xf4\x47\x18\x06\x30\x38\xe5\xe5\x67\xf8\xe9\x23\x3c\x2f\x8b\x65\xdc\x64\xd3\x7c\xdf\xd1\x8f\x3f\x19\xb9\xd9\xdc\x05\x6f\x8b\xfd\x38\x5e\xcc\x57\xf1\x7c\x7f\x5b\xb2\xd8\xed\x58\xc4\x85\x1b\x05\x6d\xe6\xae\x97\x65\xd5\xec\xd9\x5c\x67\xb3\x26\x1d\xcd\x5c\x9b\x25\x0e\x3b\xe1\x03\xc8\x16\x59\x93\xc5\x39\xd6\x49\x9c\xbb\x11\x27\xf6\x01\x14\xf1\x4d\x56\xac\x8a\x7d\xd5\xaa\x76\x55\x27\xc7\xd3\xdc\x8d\x16\x65\x8f\x2a\xcf\x16\xcf\xa1\x72\xf9\x28\xa8\xd3\xb2\x6a\x92\x55\x03\x59\x52\x2e\x02\x48\x2b\x77\x35\x0a\x06\x75\x13\x37\x59\x32\xb8\x8a\x5b\xaf\xa6\xe5\x62\x1e\x8c\xcf\x7a\xa6\xef\xbe\xfc\x1b\x7c\x5c\x96\x4d\xdd\x54\xf1\x12\xee\x7e\xff\xcd\xab\x7f\x7d\x0e\xe7\x4f\x9e\xc0\xdd\x97\xbf\x7c\xf9\xe2\x9f\x7d\x09\xf6\xfc\x37\xb7\xb9\xab\x53\xe7\x9a\x63\xe7\x49\x5d\x0f\xa6\x5b\x47\x54\x64\x0b\x4a\xea\xfa\xff\xda\x11\x0f\xde\xd1\x41\xed\xf2\xab\xee\x63\x6f\xe3\xd9\xd9\xb0\x4e\xaa\x6c\xd9\x40\x5d\x25\xf7\xa6\xcf\xea\xc1\xb3\xcf\x56\xae\xba\x45\x4e\x9c\x13\xeb\xc2\x3d\xdb\x6c\x1a\x0e\xfa\x2d\xe3\x37\xee\x3d\x4c\xf3\xe1\xbe\xb3\x61\x93\x35\xb9\x1b\xdf\xfd\xe2\xcf\xff\xf9\xeb\x8b\xe1\xa0\x97\x0e\x8a\xfa\xdc\xdd\x5e\x97\xd5\xac\xde\x2b\x6a\x6f\x7d\x54\xfc\x99\xeb\x9d\x66\xbe\x1a\x0f\x4d\xcf\x86\x83\xbe\xbd\xcf\x86\xd3\x72\x76\xeb\xbf\xeb\x76\x0e\x37\x45\xbe\xa8\x47\x81\xef\xb8\x0f\x07\x83\xeb\xeb\x6b\xba\x96\x54\x56\xf3\x81\x60\x8c\x0d\xea\x76\x1e\x40\xc7\xe3\x28\x98\x65\xf5\x32\x8f\x6f\x3f\x84\x45\xb9\x70\x1f\x05\xe3\x33\x80\x61\x7d\x5b\x4c\xcb\x1c\xb2\xd9\x28\xd8\x21\x0d\xc0\xb7\xe1\xc7\xe5\xcd\x28\x60\xc0\x80\xf3\x10\x22\xd5\x99\x03\x6c\xd0\xee\xba\x60\x07\xb8\x7b\xb8\x8c\x9b\x14\xae\xb2\x3c\xc7\x6a\xe5\x23\xba\xd6\x2d\xca\xd9\x2c\x80\x24\xcf\x96\xc7\xba\xd9\x28\xb8\x10\x8a\x34\x8b\x80\x25\x68\xc8\x4a\x09\x0c\x39\x27\xcb\x35\x68\x0a\x23\xe9\x05\x15\x09\xe0\x82\x44\xa8\x48\x70\x05\x86\xb8\x42\x62\x46\x01\x57\xc4\x22\x81\x82\x98\x31\x20\x18\x69\x6b\xcf\x43\x8a\x94\x04\x19\x91\x34\xde\x85\x56\x16\x94\x24\x15\x6a\x60\xa0\x14\x31\xae\x5a\x4d\x91\x15\x49\xf7\x8c\xb4\x88\xa0\xdf\xa2\xc8\xa8\x08\x38\xa3\x48\x73\xe0\x9c\xb8\x96\x20\x88\x31\x01\xa6\xdb\xee\x13\xf0\x11\x95\xb4\x70\x10\x91\x0b\xb2\x91\x82\x30\x24\xce\x0c\x70\x4b\xd6\x1a\x88\x14\x78\x60\x1c\x22\x35\x89\x24\xe9\x64\x03\x0e\x3a\x70\x0a\x3b\x70\xd0\x81\xe3\xd8\x83\x43\x8f\x0e\x3d\x3a\x0f\x0e\x7b\x70\x7d\x28\xec\x43\x75\xf9\x44\x68\x48\x33\x05\x9a\x64\x64\x90\x33\x32\x42\x75\x69\xab\x8e\x2c\xae\x65\x8b\x3d\x42\xec\x20\xa2\xc7\x88\x21\x45\x52\x61\x87\x11\x0f\x8c\xb1\xc3\x88\x1e\xa3\x42\x9f\x07\xf6\x18\x71\x3f\xf0\x39\x67\xba\xe3\xde\xa7\xed\xa3\x31\x12\x1d\x1a\x0f\x0d\xd8\xa4\xab\x61\xb8\xbe\x08\x19\x68\x4b\xa1\x91\xe7\x21\x03\x63\xc8\x18\x09\x56\x92\x92\x06\xac\x00\x23\x48\x2b\x09\x56\x4c\x94\x8a\x05\x08\x60\xc0\x38\x0a\x14\x97\xe2\x5e\x16\x28\x52\x1e\xfa\x0c\x92\x88\x58\xd8\x51\xa6\x89\x29\x05\x8a\x7c\x1f\xf4\x6b\x2e\x48\x59\x05\xcc\xb3\xc0\x04\xfa\xba\x7a\x0e\x98\x8a\x30\x22\xce\xbb\x3a\x86\x61\x4b\xc2\xda\x73\xab\x49\x72\x0b\xca\x90\xf4\x65\x62\xa0\x39\x09\x0e\xbb\x5c\xd7\x17\x86\x91\x16\x1c\x44\x48\x52\x4d\x54\x44\x91\x0a\x5b\xae\x3c\x63\x69\x48\x11\xf3\xc5\x0b\x43\x1f\xcd\xb3\x1d\xa2\x20\x6b\xc5\x66\x6d\xc9\x0a\x0b\xac\x63\x56\xa2\x24\x61\x14\x5a\x12\xcc\x62\x44\x1e\x4c\xb7\x5e\x5f\xf4\x4e\x41\x45\x24\x5a\x6e\x48\xe9\x70\x62\x18\x45\x3c\xb1\xc4\x8d\xed\x3d\x47\xc6\x17\x20\xb4\x66\x2b\x84\x24\x42\x0e\x0c\x35\x29\x66\x50\x52\xc4\x24\x86\xc4\x6d\xd8\x0d\x85\xd0\xbd\xb0\x49\x78\xed\xdf\x48\x7e\xf8\xba\x99\x1e\xf4\x43\x7d\x3c\xdf\x69\x59\xb8\xe3\xd1\x36\xc0\x4d\xb0\x3f\xbc\x7e\x28\x43\x92\x5a\x01\x27\xae\x4c\x4c\xda\xd7\xd8\xff\x21\x59\x16\x02\xcb\xd1\x80\x79\x74\xaf\x06\x4e\x1a\x2c\xe9\xd6\xee\xd9\x82\x5f\xa6\x8a\xf4\xa1\x0e\x49\xb7\xa8\x52\xd1\xaa\x63\xdb\x09\x57\x27\x4c\xed\x41\x78\xae\x0c\xfa\xcc\x1e\x73\x09\x9a\x6c\x24\x2f\xc5\x41\x00\xec\x76\xa5\xc8\x0f\x75\xa4\x5b\x4e\x22\x92\x8f\xf7\x60\xad\x2f\x04\x69\xe0\xea\xd2\x92\x65\x36\xd7\xa4\xfd\xb8\xc0\xe6\xff\x92\xab\x09\x67\x2d\xaa\x13\xce\xe5\x03\xe7\x6a\x22\x48\xaf\x83\xc1\xdb\xa8\x6f\xe2\xee\xb8\xf0\x0e\xdc\x33\x10\xdb\x69\x00\x0e\xdd\x3c\x1c\x28\x40\xb4\xfb\x0a\x14\x20\x26\x07\xb2\x1f\xa8\x75\xc1\x35\x88\x14\x55\x2b\x53\x75\xa9\xd6\x05\x03\xb5\x95\xc2\x3d\x49\xc6\x1c\xf8\xb6\x8c\xc8\x5b\x14\xeb\x02\x35\xc8\x16\xe5\xc4\x78\xeb\x4e\x64\x5e\xe4\xad\xd8\x37\x06\x9e\xca\x75\x81\x0a\x95\x77\x39\xe1\xad\x5c\x17\xac\x13\x54\x2f\x68\x94\x7d\xf0\x89\x59\x17\x0a\x54\xef\xef\x32\xfc\x0e\xa2\x96\xae\x5c\xe6\x0e\x93\xac\x4a\xde\x91\x30\xce\xc1\xc4\x12\x64\x9f\x15\x1a\x60\xd0\x4b\x5e\x36\xc0\x36\x01\xdf\xf6\xe3\xd4\xf3\x1e\xc6\x21\x84\xbd\x17\x1f\x8a\x3d\xea\x45\xd6\x81\x0e\xd7\x45\x88\x36\xb6\x60\x37\xa5\xd7\xa4\x4c\xe8\x5f\xe1\xd2\x9e\x4b\x12\x4a\xf8\xb5\x10\x06\x14\x85\x4c\x03\x67\x10\x02\x67\xb5\x22\xab\x2d\xf8\x27\xbe\xb3\xfc\x16\x41\xd2\x3e\xda\xf9\xf1\x56\xdf\x41\xc9\xbc\xca\x66\xef\xc6\x04\x08\xd2\x8f\xfc\x38\xf2\x4d\x87\x76\x1a\x5f\xaa\x23\xad\xff\x2d\xd1\xed\xb1\xd6\xf7\xb5\x4d\xf1\x58\xdd\x3d\x68\x51\xf6\x33\x23\x1e\xf4\xbf\x7c\x30\xf7\xf2\xc4\x28\xcb\x53\xb3\xb4\x2e\x8c\xd7\x1e\x07\x64\x27\x93\xf6\x2d\x7d\x22\x6b\x2e\x4f\xa7\x1d\x6d\xd3\x2e\x78\x17\xee\x7b\xcd\xfb\xa2\xcf\xf2\x04\xd9\xd1\x09\xb2\xbd\xe9\x49\xb6\xb9\x3e\x45\xb7\x47\xf4\x43\x25\xfe\x66\xc2\x23\xff\x36\x38\x54\xf7\x52\x7b\xa4\xc7\x8d\x74\x8a\xf2\x1f\x32\xf5\xe3\x29\x19\xfa\xb3\xad\x3f\x04\xfb\x43\xb1\xab\x20\xc9\xe3\xba\x1e\x05\x4b\x94\x30\x9d\xe3\x2c\xae\x9e\x83\xbf\xde\xe1\x75\x9a\x35\x6e\x3b\x2c\xb3\xac\xdd\x1a\xfa\x03\x76\x9c\x2d\x5c\xb5\x79\x76\xf8\x74\x86\x57\xb9\xbb\x01\xff\x81\xd7\xfe\xb6\x13\xe7\xd9\x7c\x81\x59\xe3\x8a\x1a\x13\xb7\x68\x5c\x05\xcf\x56\x75\x93\x5d\xdd\xe2\xe6\xa8\xfe\x26\x75\x3e\xc7\xba\x89\xab\x66\x17\x07\x60\x18\x6f\xef\x33\xc1\x51\xc0\x13\x61\x8a\x29\x0a\xff\x91\xcf\x91\xed\x41\xea\x97\x33\x97\x94\x55\xec\xaf\x0c\xe8\x4f\xf5\x7b\x31\xfc\x5b\xa4\x9d\x6f\xdd\x4f\x33\x28\x1c\x8a\x00\xfa\xeb\x64\xa0\x58\x00\xa9\xcb\xe6\x69\x33\x0a\xa4\x08\xa0\x2a\xfd\x2b\x31\x2b\xe6\x01\xc4\x55\x16\x63\x1e\x4f\xfd\x0d\x6c\x77\xce\x0f\xc6\xc3\x55\xed\xe0\xc6\x5f\xce\x3e\xec\x73\x7f\xff\xfe\xc2\x30\x18\x6f\xaa\xb1\x0b\x3d\x88\xc7\x67\xf7\xd2\x2a\xdf\xe6\xb1\x88\x5b\x48\xca\x1c\xb9\xe8\xbe\xf2\x39\xc6\xab\xa6\xf4\xb9\xed\x96\x1e\xee\x1b\xa8\x2d\xa6\x58\xcc\x90\x1d\xa2\xcc\xb3\xf1\x8e\xcf\xf7\x83\xbd\x40\xd8\xdd\x24\x97\x37\x28\x7a\xae\x6a\x97\x94\x8b\x59\x5c\xdd\x06\xe3\x97\xdf\xbc\x78\xfd\x87\x7f\xf8\x2c\x87\x83\x3c\xfb\xdf\xdc\x6d\x1a\xeb\xf5\xef\x7e\x7d\xf7\xd5\xb7\xaf\x7f\xfb\x45\x77\xfd\xfb\x1e\x1c\xbe\xfa\xe2\xef\x2f\xbf\xfd\xd5\x43\x57\xc3\xc1\x2a\xdf\x27\xf5\xaa\xac\x8a\xfb\x66\x7e\x48\xe9\x14\xe5\xae\x6d\x7a\x7e\xe5\x21\x71\xd9\x62\xb9\x6a\xa0\xb9\x5d\xba\x51\x50\xbb\xb8\x4a\xd2\x5d\x76\xde\x77\x47\x7e\x55\xe6\xb0\x2f\x74\x83\x15\xc0\x32\x8f\x13\x97\x96\xf9\xcc\x55\xa3\xe0\xee\x37\x5f\xfd\xfb\xeb\x3f\x12\xd1\x61\xef\x3c\xe9\x5d\xee\x03\xf0\x9e\xfc\x45\x7d\x2b\xcf\xb2\x76\x33\x98\xdb\x65\x7f\xc7\x75\xd5\xf8\xbf\x01\x00\x00\xff\xff\x75\x0d\xfe\x6b\xf2\x11\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/header.tmpl": baseHeaderTmpl,
	"home.tmpl":        homeTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
