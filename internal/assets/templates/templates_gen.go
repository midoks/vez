// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\xaf\x9b\x3c\x10\x85\xf7\xfc\x8a\x91\x5f\xe9\x55\xbb\x70\x7c\x9b\x64\xd5\x0b\x54\x6a\x37\x5d\x54\xea\xba\x4b\x83\x27\x30\xa9\x3f\x90\x3d\x90\xa0\x28\xff\xbd\x22\x7c\x44\xb7\xed\xa6\x1b\x34\x02\xce\x33\xe7\x1c\x3b\xcb\xb2\x2c\x37\x34\x40\x6d\x75\x4a\x85\xa8\x83\x67\x4d\x1e\xa3\x28\x33\x80\xfc\x14\x02\x63\x5c\x3f\x1a\x79\xb2\x78\x85\xe9\x21\x2f\x51\x77\x70\xee\x13\xd3\x69\x94\x93\x0a\x3d\xcb\x0a\xf9\x82\xe8\x41\x5b\x6a\xbc\x24\x46\x97\x64\x8d\x7e\x42\x74\xa3\x3c\x80\x1b\xe5\x11\xaa\x10\x0d\x46\xc9\xa1\x7b\xec\x00\x78\xbb\xdf\x4a\x67\xe4\x11\x96\x5d\x7f\x92\x16\x11\x40\xae\xa1\x8d\x78\x2a\x84\x12\xab\xda\x55\xd3\x12\x94\x7b\x70\xd5\x84\x79\x01\xc6\x2b\x4b\xd7\x33\x9a\x79\x34\x58\x87\xa8\x99\x82\x97\x3e\x78\x04\xdb\xca\x0f\x1b\x11\x20\x4f\x43\xb3\xc2\x2a\x12\x70\x21\xc3\x6d\x21\x0e\x2f\x02\x5a\xa4\xa6\xe5\x42\xec\x8f\xa2\xcc\xfb\x84\x70\xb5\xe4\x7f\x7e\x9c\x2d\xfc\x57\x85\xc0\x89\xa3\xee\x84\x2a\x73\x95\x86\x66\x73\xa9\xf4\x36\xa6\x4e\xfb\x95\xfe\x34\x26\xca\xff\xeb\xd0\x8d\xaf\x70\xbb\xfd\x40\x1d\xef\xf7\x5c\x4d\x3f\x2e\xdd\x28\x43\x43\x99\xcd\x73\x6f\x57\xb5\xd7\x03\x6c\x55\xfd\x7e\x0a\xe8\x0d\x58\x4a\x2c\x7b\x9f\x78\xb4\x68\x96\x32\x9f\xcd\x59\xda\x1a\x4b\xf2\x20\xca\x9c\x5c\xb3\x66\xdd\x1f\xdf\x64\x85\x14\xeb\x42\xa8\x93\x1e\xa8\x0e\x7e\xd7\xf9\xe6\x91\xd0\xd2\xea\xaf\xb7\x8f\x9b\xa2\xe6\xab\x52\x66\xab\xe3\x3c\xd5\x91\x3a\x5e\xf4\x89\x35\x53\xad\xce\x49\x6d\x4d\xed\x1c\xf9\xdd\x39\x7d\x1a\x8a\xdb\xed\x73\x4f\xd6\x7c\x09\xce\x11\xdf\xef\x62\x6a\xf0\x21\x2e\xff\x4e\x69\xa9\x69\xed\xe4\xf0\x39\xfd\x13\x8c\xc7\x0e\xe7\x13\x50\x67\x3d\xe8\xf9\xad\x28\xb3\xd6\x9e\xd3\x8e\x3c\xf1\xd7\x15\x4b\xbe\xf9\xee\xbf\x05\x6d\xde\xbd\x7f\xcd\x9e\xa0\x2c\x57\x55\x30\xe3\x14\xb6\x65\x67\xcb\x5f\x01\x00\x00\xff\xff\x40\x4f\x5d\x5e\x46\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x8f\xdb\xc6\x11\x7f\xd7\xa7\x98\xb0\x2f\x36\x90\x5d\xed\x3f\xee\x92\x3e\x49\x85\x7d\x76\xab\x14\x3e\xa7\x45\xfc\x27\x41\x10\x14\x2b\x72\x25\xd2\xe6\x1f\x85\x5c\xf1\x4e\xba\xdc\x4b\x83\xa0\x6f\x6d\x9f\x82\xa2\xc8\x43\x5b\x14\x45\xdf\x5a\xa0\x69\x11\x24\x0f\xfd\x32\xb1\x5b\x7f\x8b\x62\x49\x49\x27\x9d\x65\xe7\x80\x36\x38\x9c\xb4\x33\x3b\xfb\x9b\x99\xdf\xec\xac\x96\x1c\xbc\x75\xf7\xdd\xe3\x87\x1f\xfc\xf4\x1e\x24\x36\xcf\x46\xbd\xc1\xfa\xeb\x2d\x84\xe0\xf9\x9f\xbe\x7c\xf9\xe9\x5f\x00\x21\xa7\x36\x3a\x1e\xf5\x06\xb9\xb1\x1a\x12\x6b\xe7\xc8\x7c\xbc\x48\x9b\xa1\x77\x5c\x16\xd6\x14\x16\x3d\x5c\xce\x8d\x07\x51\x27\x0d\x3d\x6b\xce\x6c\xdf\x41\x1d\x41\x94\xe8\xaa\x36\x76\xf8\xe8\xe1\x8f\x50\xe0\x41\xff\x10\xca\xfb\xe8\xd1\x6d\x74\x5c\xe6\x73\x6d\xd3\x49\xb6\x0b\xf4\xce\xbd\xa1\x89\x67\xc6\x7b\x93\xef\xfb\xba\x98\x2d\xf4\x6c\x77\x59\x54\x6c\x57\x14\x3a\x37\x43\xaf\x49\xcd\xe9\xbc\xac\xec\x8e\xcd\x69\x1a\xdb\x64\x18\x9b\x26\x8d\x0c\x6a\x85\xb7\x21\x2d\x52\x9b\xea\x0c\xd5\x91\xce\xcc\x90\x62\xf2\x36\xe4\xfa\x2c\xcd\x17\xf9\xae\x6a\x51\x9b\xaa\x95\xf5\x24\x33\xc3\xa2\xec\xb2\xca\xd2\xe2\x19\x54\x26\x1b\x7a\x75\x52\x56\x36\x5a\x58\x48\xa3\xb2\xf0\x20\xa9\xcc\x74\xe8\xf5\xa7\xba\x71\x32\x9e\x17\x33\x6f\xd4\xeb\x28\x7e\xf1\xf9\xdf\xe0\x4e\x59\xda\xda\x56\x7a\x0e\x2f\x7e\xff\xd5\xf3\x7f\x7d\x0a\xc7\xef\xbd\x07\x2f\x3e\xff\xe5\xb7\xdf\xfc\xb3\xe3\x7e\x07\xd8\x2e\x33\x53\x27\xc6\xd8\x2d\x6a\x6d\xb5\x4d\xa3\x7e\x54\xd7\xfd\xc9\x06\x08\xe7\x69\x81\xa3\xba\xfe\x61\x33\x3c\x3f\xbf\xb3\x48\xb3\xf8\xb8\xcc\xf3\xd4\x5e\x5c\x78\xd7\x84\x4b\xd2\x59\x92\xa5\xb3\xc4\xf6\x3b\x9b\x7e\x6c\xa6\x7a\x91\xd9\xff\x1d\xb9\x36\xd9\xb4\xfd\x78\x2d\xcc\x9a\x9a\x41\x1d\x55\xe9\xdc\x42\x5d\x45\x97\xab\x9f\xd6\xfd\xa7\x1f\x2f\x4c\xb5\x44\x14\x53\x8a\x49\x1b\xcf\xd3\x83\x38\x83\x7e\x07\x30\x6a\x49\xec\xf5\x36\x78\xb1\xb6\x1a\xe9\x18\x45\x59\xda\x6d\x15\x8d\xe6\x8b\x09\x52\x8a\x4b\x19\xfa\x4a\x32\x9f\x86\x84\x73\x0f\x74\xbd\x2c\xa2\xce\xbd\xdb\x75\xf5\xad\x7e\x7f\xae\x67\x46\xc7\x0c\xcf\xca\x72\x96\x99\x7a\x59\xc4\x69\xa4\x6d\x5a\x16\x38\x2a\xf3\xf5\xac\x8b\x51\xc7\xf5\x64\xd9\x19\xe1\xa7\xf5\x4e\x2c\x7b\x7b\xb2\x33\x40\x75\x6a\x0d\x6a\x4c\x95\x4e\xd7\x60\x3b\x7b\x34\xbe\x13\xfe\xa4\x7c\x10\x3d\xb8\xfb\xb3\x77\x9f\x7c\xf0\xa8\x7a\xb2\xb8\x1b\xdc\x8b\x29\xbf\x1f\xfd\xf8\xee\x33\xfe\xe4\x9d\x86\xcc\x89\x1f\x9d\x3c\x7a\xbf\xe2\xd1\x4e\x6b\x75\xf0\x13\x9d\xc6\x8b\x37\xa2\x47\x65\x6c\xd0\x93\x53\xf9\x2c\x63\x1f\x8f\xe7\xdd\x36\xbe\x64\x6a\xd4\x6b\x74\x05\x3f\x4f\x72\x0b\xc3\xee\xeb\x93\x4f\xe0\xc3\x8f\x8e\x7a\x37\xa6\x8b\x22\x72\x50\x37\x6e\xc2\x79\x0f\xc0\x99\x25\x39\x0c\x21\x2e\xa3\x45\x6e\x0a\x8b\xa3\xca\x68\x6b\xee\x65\xc6\x49\x37\xbc\x0e\xcf\xbb\x79\xd4\x03\x48\x72\x5c\x57\x11\x0c\x61\x4b\x6a\x92\xe3\x36\xd4\x96\xc3\x24\x77\xe5\x8c\xa4\x54\x44\x1a\x32\x8d\xe8\x44\xb2\x90\x6b\xc9\xa6\x81\x99\x68\x3f\x08\x78\x48\x4c\xe4\x1d\xad\xdd\xd6\xbb\x5e\x67\xc6\xae\x5d\xd6\x77\x96\x0f\xf5\xec\x81\xce\xcd\xa5\xf3\x0f\xc9\x47\x47\xd0\x03\xa8\xf1\x5c\x57\xa6\xb0\x0f\xca\xd8\xe0\xb4\xa8\x4d\x65\xef\x98\x69\x59\x99\x1b\x49\xfe\x36\xd4\x37\x8f\x7a\x17\x37\x6f\xdc\x3c\xea\x5d\xd6\xac\xd7\x3b\x3f\x4f\xa7\x80\x6f\x57\x36\x8d\x32\x73\x71\xd1\x1b\xd8\xd4\x66\x66\x74\x7e\xbe\xd1\xe1\x87\x4e\x71\x71\x01\x08\x5e\xfc\xe2\xcf\xff\xf9\xeb\x37\x83\x7e\x67\xd2\x3b\x3f\x37\x59\xbd\xb3\xe6\xd5\xe9\x22\xbe\xb8\x70\xac\xef\x94\xee\x99\x59\x9e\x96\x55\x5c\xef\xd4\xaa\x5b\x77\xe5\x54\x8b\x4d\x17\xe3\x7e\x59\xb7\xa6\xbd\x41\xbf\x3b\xb7\x7b\x83\x49\x19\x2f\xdd\x77\xdd\xcc\xe0\x2c\xcf\x8a\xba\xdb\xd4\xb7\xfa\xfd\xd3\xd3\x53\x7c\xca\x71\x59\xcd\xfa\x8c\x10\xd2\xaf\x9b\x99\x07\x6d\xff\x0e\xbd\x38\xad\xe7\x99\x5e\xde\x82\xa2\x2c\xcc\x91\x37\xea\x01\x0c\xea\x65\x3e\x29\x33\x48\xe3\xa1\xb7\x3d\x70\x3c\x70\xe7\xeb\x9d\xf2\x6c\xe8\x11\x20\x40\x69\x00\xa1\x68\xcd\x01\xd6\x79\x6f\x4f\xb9\x6d\xea\xed\xe4\x5c\xdb\x04\xa6\x69\x96\xa1\x6a\xe1\x3c\x9a\xc6\x14\x65\x1c\x7b\x10\x65\xe9\xfc\xaa\x2e\x1e\x7a\x27\x4c\x60\x9f\x84\x40\x22\x24\xb1\xe2\x1c\x08\xa2\x14\x2b\xea\x83\x8f\x83\x90\x3b\x41\x84\x0c\x28\xc3\x2c\x10\x98\x51\x01\x12\x53\x81\x30\x91\x02\xa8\xc0\x24\x64\x88\x61\x22\x25\x30\x82\x7d\xa5\x8e\x03\x1c\x0a\x0e\x3c\xc4\x5c\x3a\x08\x5f\x28\x10\x1c\x8b\xc0\x07\x02\x42\x60\x42\x45\xe3\xe3\x50\xb1\xa8\x9d\xc3\x3e\x0b\xa1\x5b\x22\xb0\x14\x21\x50\x82\x43\x9f\x02\xa5\x98\xfa\x1c\x18\x26\x84\x81\x6c\x97\xbb\x00\x9c\x47\xc1\x15\xec\x79\xa4\x0c\xab\x50\x40\x10\x60\x4a\x24\x50\x85\x95\x92\x10\x0a\x70\x89\x51\x08\xc5\x38\xe4\xd8\x8f\xd6\xc9\x41\x9b\x9c\x40\x6d\x72\xd0\x26\x47\x51\x97\x1c\x72\xd9\x21\x97\x9d\x4b\x0e\x75\xc9\x75\xae\x50\xe7\xaa\x8d\x27\x44\x12\xfb\x44\x80\x8f\x79\x28\x11\x25\x58\x32\xd1\x86\x2d\x5a\xb2\xa8\xcf\x1b\xd4\x65\x88\xda\x14\x91\xcb\x11\x05\x38\xe4\x02\xb5\x39\xa2\x3d\x63\xd4\xe6\x88\x5c\x8e\x02\xb9\x38\x50\x97\x23\xda\x75\x7c\x4c\x89\xdf\x72\xef\xc2\x76\xde\x08\x66\x6d\x36\x2e\x35\x20\xe3\xb6\x86\xc1\xea\x24\x20\xe0\x2b\x1c\x48\x7e\x1c\x10\x90\x12\x4b\xc9\x41\x71\x2c\xb8\x04\xc5\x40\x32\xec\x0b\x0e\x8a\x8d\x85\xd0\x0c\x18\x10\x20\x14\x31\xc4\x1e\xb3\x4b\x99\x21\x96\xd0\xc0\x45\x10\x85\x98\x04\x2d\x65\x3e\x26\x42\x80\xc0\x6e\x1f\x74\x63\xca\xb0\x50\x02\x88\x63\x81\x30\xe4\xea\xea\x38\x20\x22\x44\x21\xa6\xb4\xad\x63\x10\x34\x98\x29\x75\xac\x7c\xcc\xa9\x02\x21\x31\x77\x65\x22\xe0\x53\xcc\x28\x6c\x63\x5d\x9d\x48\x82\x7d\x46\x81\x05\x98\x8b\xb1\x08\x71\x28\x82\x86\x0a\xc7\x58\x12\xe0\x90\xb8\xe2\x05\x81\xf3\xe6\xd8\x0e\x10\xc3\x4a\xb1\xf5\x58\x61\xc5\x14\x90\x96\x59\x8e\x38\x66\x52\x20\x85\x19\x51\x28\xc4\x2e\x99\x76\xbc\x3a\xe9\x40\x41\x84\x98\x35\x54\x62\xe1\x07\x63\x49\x70\x48\x23\x85\xa9\x54\x1d\x72\x28\x5d\x01\x02\x25\x37\x42\x80\x59\x40\x81\x20\x1f\x0b\x22\x11\xc7\x21\xe1\x28\xc0\x54\x05\x6d\x53\x30\xbf\x13\xd6\x01\xaf\xdc\x8f\x92\x6b\xbe\xb6\xa7\xfb\x5d\x53\x5f\xed\xef\xa4\xcc\xcd\xd5\xd6\x96\x40\xa5\xb7\xdb\xbc\xae\x29\x03\xcc\x7d\x01\x14\x53\x21\x35\xf6\x5d\x8d\xdd\x1f\xc2\x8a\x04\x40\x32\x24\x41\xde\xbe\x54\x03\xc5\x3e\x28\xec\x37\x6a\xc7\x16\xdc\x30\x11\xd8\xdf\xd7\x21\xec\x37\x48\x24\xac\x11\x57\x6d\xc7\x54\x1c\x30\x55\x7b\xee\xa9\x90\xc8\x45\x76\x9f\x72\xf0\xb1\x0a\xf9\x63\xb6\xe7\x00\xb5\xab\x12\x44\xf7\x75\xd8\x6f\x28\x66\x21\xbf\xbf\x93\xd6\xea\x84\x61\x1f\xa8\x78\xac\xb0\x22\x2a\xf3\xb1\xef\xda\x05\xd6\xff\x8f\xa9\x18\x53\xd2\x20\x71\x00\x9c\xbf\x02\x2e\xc6\x0c\xfb\x2b\xaf\xff\x26\xea\xad\x6e\xef\xc1\xd7\xe0\x9e\x00\xdb\x74\x03\x50\x68\xfb\x61\x4f\x01\xac\xd9\x55\x20\x06\x6c\xbc\x27\xbb\x86\x5a\xe5\xd4\x07\x96\x20\xd1\xf0\x44\x3c\x16\xab\x9c\x80\xd8\x48\xc1\x8e\xc4\x35\x05\xba\x29\x23\xa2\x0d\x62\xab\x1c\xf9\xc0\x1b\xc4\xc7\xd2\x59\xb7\x22\x71\x22\x6d\xd8\xae\x31\xd0\x84\xaf\x72\x24\x90\x70\x90\x63\xda\xf0\x55\x4e\x5a\x41\x74\x82\x8f\x78\xe7\x7c\x2c\x57\xb9\x00\xd1\xe1\x3d\x0e\xbe\x83\xa8\xb9\x29\xe7\x99\x41\x51\x5a\x45\xd7\x24\x8c\x52\x90\x9a\x03\xef\xa2\x42\x12\x08\x74\x92\x93\x25\x90\xb5\xc3\x37\xfd\x38\x75\xbc\x07\x3a\x80\xa0\x43\x71\xae\xc8\xed\x4e\x24\x6d\xd2\xc1\x2a\x0f\x90\xd2\x0a\xd4\xba\xf4\x3e\x16\x32\x70\x47\x38\x57\xc7\x1c\x33\xc1\xdc\x98\x31\x09\x02\x07\xc4\x07\x4a\x20\x00\x4a\x6a\x81\x95\xaf\xc0\xcd\xb8\x9d\xe5\x96\x30\xcc\xd5\xed\x2d\x8e\xb3\xfa\x0e\x4a\x66\x55\x1a\x5f\x8f\x09\x60\xd8\xbf\xed\xda\x91\xae\x77\x68\xab\x71\xa5\xba\xa2\x75\xbf\x25\x7e\x73\x55\xeb\xf6\xb5\x4a\xd0\x55\x75\x3b\xd1\x20\xde\xf5\x0c\x7b\x65\xff\xf3\x57\xfa\x9e\x1f\x68\x65\x7e\xa8\x97\x56\xb9\x74\xda\xab\x0e\xc9\xc1\xa0\xdd\x96\x3e\x10\x35\xe5\x87\xc3\x0e\x37\x61\xe7\xb4\x75\xf7\x7f\x8d\xfb\xa4\x8b\xf2\x00\xd9\xe1\x01\xb2\x9d\xe9\x41\xb6\xa9\x7f\x88\x6e\x97\xd1\xf7\x15\xf8\xeb\x09\x0f\xdd\x69\xb0\xaf\xee\xa4\xe6\x8a\x1e\xad\xa5\x43\x94\x7f\x9f\xa1\x5f\xed\x92\x81\xbb\xdb\xba\x4b\xb0\xbb\x14\x9b\x0a\xa2\x4c\xd7\xf5\xd0\x9b\x23\x0e\x93\x19\x8a\x75\xf5\x0c\xac\x39\xb3\xe8\x34\x49\xad\x81\x7c\x82\xf8\xa6\x63\xe2\xb4\xd9\x58\xbb\x5b\xb6\x4e\x0b\x53\xad\xe7\xf6\x67\x63\x34\xcd\xcc\x19\xb8\x0f\x74\xea\x1e\xe9\x75\x96\xce\x0a\x94\x5a\x93\xd7\x28\x32\x85\x35\x15\x3c\x5d\xd4\x36\x9d\x2e\xd1\xfa\xbe\xfe\x3a\x75\x36\x43\xb5\xd5\x95\xdd\xfa\x01\x18\xe8\xcd\xc3\xb4\x77\xc5\xe1\x01\x37\xf9\x04\x31\xf7\x91\xcd\x10\xd9\xcd\xab\x1d\xc6\x26\x2a\xab\xf6\x71\x10\xb9\xab\xfd\x8e\x0f\x77\x94\x34\xb3\x0d\xfc\x24\x85\xdc\x20\xe6\x41\xf7\xb2\xc4\x13\xc4\x83\xc4\xa4\xb3\xc4\x0e\x3d\xce\x3c\xa8\x4a\x77\x2e\xa6\xf9\xcc\x03\x5d\xa5\x1a\x65\x7a\xe2\x1e\xff\xb7\x97\x7d\x6f\x34\x58\xd4\x06\xce\xb2\xb4\x78\x76\xab\x8b\xfd\x07\x97\x4f\x0d\xfd\xd1\xba\x24\x5b\xd7\x7d\x3d\xea\x5d\x4a\x8b\x6c\x13\x47\xa1\x1b\x88\xca\x0c\x51\xd6\x7e\x65\x33\xa4\x17\xb6\x74\xb1\x6d\x87\x2e\xdd\xd7\x50\x9b\x4f\x50\x1e\x23\xb2\x9f\x65\x96\x8e\x0e\xf0\x59\xe8\x06\xb5\xaf\x31\xe6\x67\x88\xed\xd0\xe6\x8d\xbe\xfd\xea\x9b\x97\x7f\xf8\x87\x8b\x70\xd0\xcf\xd2\xd7\x43\x55\xba\x88\xaf\x01\xf7\xf2\x77\xbf\x7e\xf1\xc5\xd7\x2f\x7f\xfb\x59\xfb\x34\x78\x00\xb4\x7d\x07\xb2\x87\xac\x27\xe5\xc2\x5e\x03\xfa\xf9\x67\x7f\xff\xf6\xeb\x5f\x6d\x41\xdb\xf7\x1f\x97\x0c\x2f\xb2\x5d\x8a\xa7\x65\x95\x5f\x6e\xed\x57\x09\x9e\x20\xbe\xdd\x44\x1d\xdb\x7c\x9f\xc6\xb4\x98\x2f\x2c\xd8\xe5\xdc\x0c\xbd\xda\xe8\x2a\x4a\xb6\x11\x3a\xec\xb6\x14\x55\x99\xc1\xae\xd0\xf6\x9a\x07\xf3\x4c\x47\x26\x29\xb3\xd8\x54\x43\xef\xc5\x6f\xbe\xf8\xf7\x97\x7f\xc4\x18\xef\xef\xa4\xf7\x3a\xc8\xdd\x04\x1c\xd2\xb6\xf7\xfa\x71\xda\xac\x9b\x74\x33\xec\x1e\x7a\x4d\x35\xfa\x6f\x00\x00\x00\xff\xff\xdb\x78\x32\x34\xdc\x14\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6e\xdb\x30\x0c\xc7\xcf\xf6\x53\x10\x3a\x16\x50\x9c\xa2\x1b\x30\x6c\x89\x81\xdd\xba\xcb\x50\xa0\xdb\x03\xd0\x36\x6d\x6b\x95\xa5\x40\xa2\x93\x16\xae\x81\x9d\xb7\xa7\xd8\x43\x0c\xe8\x03\xf5\xb2\xb7\x18\xe4\x8f\xc6\xc9\xb6\xc3\x72\x88\x69\x93\xfa\x91\xfa\x8b\x62\xd7\x31\x35\x3b\x8d\x4c\x20\x32\xf4\x94\xd4\x84\x05\x39\x01\xab\xbe\x8f\xe3\x78\x53\xa8\x3d\xe4\x1a\xbd\xdf\x8a\xdc\x1a\x46\x65\xc8\x89\x34\xee\xba\xe4\x02\x3c\xa3\x63\xb8\x48\x42\xe4\x32\xd0\xd9\x03\x54\xf2\xb5\x48\x63\x80\x53\x80\x96\x4d\x21\xdf\x88\x14\x00\x62\x08\xbf\x68\xe9\x2f\x64\xa9\xe9\x1e\xc2\x9f\xcc\xad\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\xf3\x7a\xf4\xfb\xda\x29\x73\x27\xd7\x90\x55\xf2\x50\x2b\x26\x01\x9e\x1f\x34\x6d\xc5\x41\x15\x5c\xbf\x05\x6c\xd9\xbe\x13\x69\x1c\x47\x21\xcf\x32\x8d\x56\x9e\x65\xe5\x6c\xbb\x83\xa3\x29\x4b\xdd\xfa\x1a\x32\xeb\x0a\x72\x32\xb3\xcc\xb6\x01\x9f\x3b\xab\x35\x3a\x42\x91\x8e\x9c\xa8\xeb\x1c\x9a\x8a\x60\xf5\xde\xb1\xca\x35\xf9\xbe\x1f\x3d\x00\x1b\x84\xda\x51\xb9\x15\x49\xd7\xad\x6e\x6d\xeb\x72\xea\xfb\x60\x7f\xf6\xe4\x46\xeb\x43\xd1\xf7\xab\x9a\x1b\x2d\xfe\x2c\x66\xd8\x25\x9c\xbd\x4b\xcc\x59\x59\x03\xbb\x07\x79\x05\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\xf3\xd6\x39\x32\xbc\x15\xec\x5a\x9a\x0b\x3c\xdf\xec\xa4\xe9\x41\x5e\xae\xd7\x27\x6a\xe6\x64\x98\x1c\x7c\x69\x3d\xab\xf2\x41\x86\xc3\x25\xc3\x32\x23\x3e\x10\x99\x25\x0e\x60\xe3\xd9\x59\x53\xcd\xcc\x26\x93\x97\x22\xed\xba\xd5\x27\xc5\x9a\xe0\x11\x6e\xb1\xa4\xbe\xdf\x24\x63\xd8\xb2\x92\xa4\x50\xfb\x7f\x54\x16\xba\xe1\x72\x0d\x01\x06\xbe\x41\xad\x07\xe4\x35\x37\x1a\x1e\xe1\x9a\xb0\x18\xe8\x01\xbb\x64\x6c\x12\x7c\xb1\xbb\x8e\x4c\x31\xeb\x7f\x0c\x8b\xa3\x28\x9a\xdf\xa2\x93\x06\x6b\x32\x79\x25\xd2\xc9\x37\x38\x0d\xee\x47\x31\x35\x66\xa4\xb7\xe2\x06\x2b\x02\x83\x7b\x55\xe1\xa0\x3b\xdd\x63\xb3\xd3\x83\xba\x51\x14\xda\xb5\xd5\x33\x6c\x87\x95\x32\x63\xd4\xb9\x88\xa3\xb6\xf3\xa2\xb0\x4c\xab\xc5\x32\x1a\x8e\x40\xa4\x1b\x3c\xf9\xa8\x95\xb9\x13\xe9\xf3\xd3\xb7\xe7\xa7\xaf\xbf\x7e\xfc\x0c\x3b\xdd\x24\x5a\x8d\x95\x4e\xcd\xa7\x4a\x58\x7d\xa4\x7b\xbe\xb1\x43\xe3\xfd\x37\x7e\xee\xd0\x9d\xf5\xa1\x1f\x5f\x50\x21\xef\xf7\xf3\xbc\xc7\xb4\x93\xce\xa3\x04\x49\xab\x47\x65\x13\x83\xfb\xe1\x8e\x4f\x82\xfe\xf5\xb6\xbf\x1a\xc6\x40\x38\xac\xe3\xa0\xf1\xaa\xa0\x0c\x5d\x32\x3d\xc7\x61\xf3\xc2\x99\x71\xc3\x8c\x21\x53\x8c\x13\xe6\xf8\xf5\x6c\x60\x95\xd6\xf2\x34\xb0\x7e\x07\x00\x00\xff\xff\x55\xdb\x14\x8d\xcd\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
