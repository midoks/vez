// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x8e\xe3\xc6\x11\xbe\xcf\x53\x94\x99\xab\xab\xd4\x7f\x64\x93\x6b\x69\x82\xdd\x59\x27\xe3\x60\xc7\x4e\xe0\xdd\xb5\x7d\x6c\x91\x3d\x12\x77\xf9\x23\x93\x14\x67\x46\x83\xb9\xc4\x30\x72\x4b\x72\x32\x82\xc0\x87\x24\x08\x82\xdc\x12\x20\x4e\x60\xd8\x87\xbc\x8c\xbd\xc9\xbe\x45\xd0\xa4\xa4\xa1\xb4\x5a\x7b\x0e\x31\x06\x23\xb1\xaa\xbb\xbf\xaa\xef\xeb\x2a\xaa\x7b\xfc\xc6\xc3\xf7\x4e\x1e\x7f\xf4\xf3\xb7\x61\xde\xe4\xd9\xf1\xd1\x78\xfd\xf5\x06\x22\x7c\xfb\xe7\x2f\x5e\x7e\xf2\x57\x40\x74\x6e\x6b\x92\xe3\xa3\x71\x6e\x1b\x03\xf3\xa6\x59\xa0\xfd\x78\x99\xb6\x13\xef\xa4\x2c\x1a\x5b\x34\xf8\xf8\x6a\x61\x3d\x88\x7b\x6b\xe2\x35\xf6\xb2\x19\x39\xa8\xb7\x20\x9e\x9b\xaa\xb6\xcd\xe4\xc9\xe3\x9f\x60\xe8\xc1\xe8\x10\xca\x87\xf8\xe4\x3e\x9e\x94\xf9\xc2\x34\xe9\x34\x1b\x02\xbd\xf3\xf6\xc4\x26\x33\xeb\x7d\x57\xec\x47\xa6\x98\x2d\xcd\x6c\xb8\x2c\x2e\xb6\x2b\x0a\x93\xdb\x89\xd7\xa6\xf6\x62\x51\x56\xcd\x60\xce\x45\x9a\x34\xf3\x49\x62\xdb\x34\xb6\xd8\x19\x6f\x42\x5a\xa4\x4d\x6a\x32\xac\x63\x93\xd9\x09\x27\xf6\x26\xe4\xe6\x32\xcd\x97\xf9\xd0\xb5\xac\x6d\xd5\xd9\x66\x9a\xd9\x49\x51\xf6\xac\xb2\xb4\x78\x0e\x95\xcd\x26\x5e\x3d\x2f\xab\x26\x5e\x36\x90\xc6\x65\xe1\xc1\xbc\xb2\xe7\x13\x6f\x74\x6e\x5a\x67\xd3\xa2\x98\x79\xc7\x47\xbd\xc4\x2f\x3e\xfb\x3b\x3c\x28\xcb\xa6\x6e\x2a\xb3\x80\x17\x7f\xf8\xf2\xdb\x7f\x7f\x02\x27\xef\xbf\x0f\x2f\x3e\xfb\xd5\x37\x5f\xff\xab\xd7\x7e\x00\xdc\x5c\x65\xb6\x9e\x5b\xdb\x6c\x51\xeb\xc6\x34\x69\x3c\x8a\xeb\x7a\x34\xdd\x00\x51\x9e\x16\x14\xd7\xf5\x8f\xdb\xc9\xf5\xf5\x83\x65\x9a\x25\x27\x65\x9e\xa7\xcd\xcd\x8d\x77\x47\xb8\xda\x66\xe7\xdd\xc7\x6b\x61\xd6\x04\xc6\x75\x5c\xa5\x8b\x06\xea\x2a\xbe\x5d\xfd\xac\x1e\x3d\xfb\x78\x69\xab\x2b\xe4\xc4\x39\xb1\x2e\x9f\x67\x07\x71\xc6\xa3\x1e\xe0\xb8\xa7\xfa\x1a\xb4\x5d\x66\xdf\x83\x74\xb4\x85\x49\x4c\x63\xd0\x24\x18\x67\x69\x5f\x15\x06\x17\xcb\x29\x6a\x2d\x83\x20\xf2\x75\x20\x7c\x1e\x31\x29\x3d\x30\xf5\x55\x11\xf7\x51\x5d\x81\xd5\xf7\x46\xa3\x85\x99\x59\x93\x08\x9a\x95\xe5\x2c\xb3\xf5\x55\x91\xa4\xb1\x69\xd2\xb2\xa0\xb8\xcc\xd7\xa3\x2e\x35\x93\xd4\xd3\xab\x7e\x12\x3d\xab\x87\x69\x0c\xcb\xaf\x9f\x80\x75\xda\x58\x6c\x6d\x95\x9e\xaf\xc1\x06\xe5\x98\x3c\x88\x7e\x56\xbe\x1b\xbf\xfb\xf0\x17\xef\x7d\xf0\xd1\x93\xea\x83\xe5\xc3\xf0\xed\x84\xcb\x47\xf1\x4f\x1f\x3e\x97\x1f\xbc\xd3\xb2\x05\xf3\xe3\xb3\x27\x1f\x56\x32\xee\xea\xed\xe8\xfa\x3a\x3d\x07\xba\x5f\x35\x69\x9c\xd9\x9b\x9b\xa3\x71\x93\x36\x99\x3d\xbe\xbe\xde\xf8\xe8\xb1\x73\xdc\xdc\x00\xc2\x8b\x5f\xfe\xe5\xbf\x7f\xfb\x7a\x3c\xea\xa7\x1c\x5d\x5f\xdb\xac\x1e\xac\x79\x75\xb8\x48\x6e\x6e\xdc\x1e\x0f\x38\x3c\xb7\x57\x17\x65\x95\xd4\x83\x9c\xfb\x75\x7b\xad\x96\xd8\x5e\x81\x5d\x7a\xdb\xa9\x47\xe3\x51\xff\x32\x39\x1a\x4f\xcb\xe4\xaa\xdb\xae\x76\x06\x97\x79\x56\xd4\xbd\xfc\xf7\x46\xa3\x8b\x8b\x0b\xba\x90\x54\x56\xb3\x91\x60\x8c\x8d\xea\x76\xe6\x41\x57\xae\x13\x2f\x49\xeb\x45\x66\xae\xee\x41\x51\x16\xf6\x2d\xef\xf8\x08\x60\x5c\x5f\xe5\xd3\x32\x83\x34\x99\x78\xdb\x5a\xf1\xc0\x35\xfd\x83\xf2\x72\xe2\x31\x60\xc0\x79\x08\x91\xea\xa6\x03\xac\x79\x6f\x5b\x6f\x4b\xbd\x1b\x5c\x98\x66\x0e\xe7\x69\x96\x61\xb5\x74\x11\x6d\x6b\x8b\x32\x49\x3c\x88\xb3\x74\xb1\xef\x4b\x26\xde\x99\x50\xe4\xb3\x08\x58\x8c\x01\x69\x29\x81\x21\xe7\xa4\xb9\x0f\x3e\x85\x91\x74\x86\x8a\x04\x70\x41\x22\x54\x24\xb8\x82\x80\xb8\x42\x62\x81\x02\xae\x88\x45\x02\x05\xb1\x20\x00\xc1\xc8\xd7\xfa\x24\xa4\x48\x49\x90\x11\xc9\xc0\x41\xf8\x4a\x83\x92\xa4\x42\x1f\x18\x28\x45\x8c\xab\xd6\xa7\x48\x8b\xb8\x1b\x23\x5f\x44\xd0\x2f\x51\x14\xa8\x08\x38\xa3\xc8\xe7\xc0\x39\x71\x5f\x82\x20\xc6\x04\x04\xdd\x72\x97\x80\x8b\xa8\xa4\x86\x9d\x88\x5c\x90\x8e\x14\x84\x21\x71\x16\x00\xd7\xa4\x75\x00\x91\x02\x47\x8c\x43\xa4\x4e\x23\x49\x7e\xbc\x26\x07\x1d\x39\x85\x1d\x39\xe8\xc8\x71\xec\xc9\xa1\x63\x87\x8e\x9d\x23\x87\x3d\xb9\x3e\x14\xf6\xa1\xba\x7c\x22\x0c\xc8\x67\x0a\x7c\x92\x51\x80\x9c\x51\x20\x54\x97\xb6\xea\xc4\xe2\xbe\x6c\xb1\x67\x88\x1d\x45\x74\x1c\x31\xa4\x48\x2a\xec\x38\xe2\xce\x64\xec\x38\xa2\xe3\xa8\xd0\xe5\x81\x3d\x47\x1c\x06\x3e\xe1\xcc\xef\xb4\x77\x69\xbb\x68\x8c\x44\xc7\xc6\x51\x03\x76\xda\xed\x61\xb8\x3a\x0b\x19\xf8\x9a\xc2\x40\x9e\x84\x0c\x82\x80\x82\x40\x82\x96\xa4\x64\x00\x5a\x40\x20\xc8\x57\x12\xb4\x38\x55\xca\x08\x10\xc0\x80\x71\x14\x28\x9e\x8a\x5b\x5b\xa0\x98\xf3\xd0\x65\x10\x47\xc4\xc2\x4e\x32\x9f\x98\x52\xa0\xc8\xd5\x41\xff\xcc\x05\x29\xad\x80\x39\x15\x98\x40\xb7\xaf\x4e\x03\xa6\x22\x8c\x88\xf3\x6e\x1f\xc3\xb0\x25\xa1\xf5\x89\xf6\x49\x72\x0d\x2a\x20\xe9\xb6\x89\x81\xcf\x49\x70\xd8\xe6\xba\x3a\x0b\x18\xf9\x82\x83\x08\x49\xaa\x53\x15\x51\xa4\xc2\x96\x2b\xa7\xd8\x3c\xa4\x88\xb9\xcd\x0b\x43\x17\xcd\xa9\x1d\xa2\x20\xad\xc5\xfa\x59\x93\x16\x1a\x58\xa7\xac\x44\x49\x22\x50\xa8\x49\x30\x8d\x11\x39\x32\xdd\xf3\xea\xac\x07\x05\x15\x91\x68\x79\x40\xca\x0f\x4f\x03\x46\x11\x8f\x35\xf1\x40\xf7\xc8\x51\xe0\x36\x20\xd4\xc1\xc6\x08\x49\x84\x1c\x18\xfa\xa4\x58\x80\x92\x22\x26\x31\x24\xae\xc3\xae\x29\x84\xdf\x1b\xeb\x84\x57\xee\xf5\xe9\x9a\xaf\xeb\xe9\x51\xdf\xd4\xfb\xfd\x3d\x2f\x73\xbb\xdf\xda\x01\xf0\xc0\x1b\x36\xaf\x6b\xca\x90\xa4\xaf\x80\x13\x57\x81\x21\xdf\xed\xb1\xfb\x43\xd2\x2c\x04\x96\x61\x00\xc1\xfd\x5b\x37\x70\xf2\x41\x93\xdf\xea\xc1\x5c\x70\x8f\x73\x45\xfe\xae\x0f\xc9\x6f\x51\xcd\x45\xab\xf6\xe7\x9e\x72\x75\x60\xaa\xde\x09\xcf\x55\x80\x2e\xb3\x47\x5c\x82\x4f\x3a\x92\x4f\xc5\x4e\x00\xec\x56\xcd\x91\xef\xfa\xc8\x6f\x39\x89\x48\x3e\x1a\xd0\x5a\x9d\x09\xf2\x81\xab\xa7\x9a\x34\xd3\x99\x4f\xbe\x6b\x17\x58\xff\x3f\xe5\xea\x94\xb3\x16\xd5\x01\x70\xf9\x0a\xb8\x3a\x15\xe4\xaf\xbc\xd1\x77\x49\xdf\x98\xee\x70\x76\x07\xed\x19\x88\x4d\x37\x00\x87\xae\x1f\x76\x1c\x20\xda\xa1\x03\x05\x88\xd3\x1d\xdb\x35\xd4\x2a\xe7\x3e\x88\x39\xaa\x56\xce\xd5\x53\xb5\xca\x19\xa8\x8d\x15\x0e\x2c\x69\x38\xf0\xcd\x36\x22\x6f\x51\xac\x72\xf4\x41\xb6\x28\x4f\x03\x37\xbb\x33\x99\x33\x79\x2b\x86\x93\x81\xcf\xe5\x2a\x47\x85\xca\x41\x9e\xf2\x56\xae\x72\xd6\x19\xaa\x37\x7c\x94\x7d\xf0\xd3\x60\x95\x2b\x50\x3d\xde\xd3\xf0\x7b\x84\x5a\xd8\x72\x91\x59\x8c\xd3\x2a\xbe\xa3\x60\x9c\x43\x60\x24\xc8\x3e\x2b\x0c\x80\x41\x6f\x39\x3b\x00\xb6\x0e\xf8\x5d\x3f\x4e\xbd\xee\xa1\x09\x21\xec\x51\x5c\x28\x76\xbf\x37\x59\x47\x3a\x5c\xe5\x21\x6a\xa3\x41\xaf\xb7\xde\x27\x15\x84\xee\x15\x2e\xf5\x89\x24\xa1\x84\x7b\x16\x22\x00\x45\x21\xf3\x81\x33\x08\x81\xb3\x5a\x91\xf6\x35\xb8\x11\x57\x59\x6e\x89\x20\xa9\xef\x6f\x71\xdc\xac\xef\x91\x64\x56\xa5\xc9\xdd\x94\x00\x41\xfe\x7d\xd7\x8e\x7c\x5d\xa1\x9d\xc7\x6d\xd5\x9e\xd7\xfd\x96\xf8\xed\xbe\xd7\xd5\xb5\x9e\xe3\xbe\xbb\x1b\x68\x51\xf6\x3d\x23\x5e\xa9\x7f\xf9\x4a\xdf\xcb\x03\xad\x2c\x0f\xf5\xd2\x2a\x0f\x9c\x77\x3f\x20\x3b\x98\xb4\x2b\xe9\x03\x59\x73\x79\x38\xed\x68\x93\x76\xce\xbb\x70\xff\xd7\xbc\xcf\xfa\x2c\x0f\x88\x1d\x1d\x10\xdb\x4d\x3d\xa8\x36\xf7\x0f\xc9\xed\x18\xfd\x50\x89\xbf\x5e\xf0\xc8\xbd\x0d\x76\xdd\xbd\xd5\xee\xf9\x71\x6d\x1d\x92\xfc\x87\x4c\x7d\xbf\x4b\xc6\xee\x6c\xeb\x0e\xc1\xee\x50\x6c\x2b\x88\x33\x53\xd7\x13\x6f\x81\x12\xa6\x33\x4c\x4c\xf5\x1c\xdc\x65\x1a\x2f\xe6\x69\x63\x21\x9f\xa2\xdc\x74\x4c\x92\xb6\x9b\xd9\xee\x94\x6d\xd2\xc2\x56\xeb\xb1\xdd\xd1\x04\xcf\x33\x7b\x09\xee\x03\x2f\xdc\x3d\xd3\x64\xe9\xac\xc0\xb4\xb1\x79\x8d\xb1\x2d\x1a\x5b\xc1\xb3\x65\xdd\xa4\xe7\x57\xb8\x3e\xaf\xbf\xce\x9d\xcd\xb0\x6e\x4c\xd5\x6c\xe3\x00\x8c\xcd\xe6\xee\xe8\xed\x05\x3c\x10\x26\x9f\xa2\x70\x1f\xd9\x0c\xd9\x90\x57\xf7\x98\xd8\xb8\xac\xba\x6b\x11\xba\xa3\xfd\x20\x86\x7b\x95\xb4\xb3\x0d\xfc\x34\x85\xdc\xa2\xf0\xa0\xbf\xc1\x7b\x8a\x79\x30\xb7\xe9\x6c\xde\x4c\x3c\x29\x3c\xa8\x4a\xf7\x5e\x4c\xf3\x99\x07\xa6\x4a\x0d\x66\x66\xea\x6e\xbb\xdb\xc3\xbe\x77\x3c\x5e\xd6\x16\x2e\xdd\x45\xf8\x5e\x9f\xfb\x8f\x6e\x6f\x0d\xa3\xe3\xf5\x96\x6c\x43\x8f\xcc\xf1\xd1\xad\xb5\xcc\x36\x79\x14\xa6\x85\xb8\xcc\x90\x8b\xee\x2b\x9b\xa1\x59\x36\xa5\xcb\x6d\xfb\xe8\xe8\xbe\x46\xda\x7c\x8a\x79\x82\x6c\x97\x65\x96\x1e\x1f\xd0\xb3\x30\x2d\x76\xb7\xf6\xc5\x25\x8a\x81\x6c\xde\xf1\x37\x5f\x7e\xfd\xf2\x8f\xff\x74\x19\x8e\x47\x59\xfa\x7a\xa8\xca\x14\xc9\x1d\xe0\x5e\xfe\xfe\x37\x2f\x3e\xff\xea\xe5\xef\x3e\xed\x6e\x83\x07\x40\xbb\x2b\xff\x0e\xb2\x99\x96\xcb\xe6\x0e\xd0\xdf\x7e\xfa\x8f\x6f\xbe\xfa\xf5\x16\xb4\xbb\xee\xdf\x2a\xbc\xcc\x86\x12\x9f\x97\x55\x7e\x5b\xda\xaf\x0a\x3c\x45\xb9\x2d\xa2\x5e\x6d\xb9\x2b\x63\x5a\x2c\x96\x0d\x34\x57\x0b\x3b\xf1\x6a\x6b\xaa\x78\xbe\xcd\xd0\x61\x77\x5b\x51\x95\x19\x0c\x8d\xae\xd7\x3c\x58\x64\x26\xb6\xf3\x32\x4b\x6c\x35\xf1\x5e\xfc\xf6\xf3\xff\x7c\xf1\x27\x22\xda\xad\xa4\xf7\x7b\xc8\x21\x01\x87\xb4\xed\xbd\x51\x92\xb6\xeb\x26\xdd\x3c\xf6\x97\x5e\x5b\x1d\xff\x2f\x00\x00\xff\xff\x5f\x95\x90\xb0\x71\x13\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xc1\x6e\xd4\x30\x10\x86\xcf\xc9\x53\x8c\xcc\xad\x92\x37\x5b\x15\x24\x04\xd9\x48\xdc\xca\x0d\xa9\xf0\x00\x93\x78\x36\x31\x75\xec\x95\x3d\xd9\x6d\x95\x46\xe2\x0c\x4f\xc1\x43\x20\xf5\x81\x7a\xe1\x2d\x90\x93\xdd\x6e\x76\x29\xe4\x90\x8c\x33\xe3\xcf\xe3\xdf\xe3\xe9\x7b\xa6\x76\x63\x90\x09\x44\x89\x81\xb2\x86\x50\x91\x17\xb0\x18\x86\x34\x4d\x73\xa5\xb7\x50\x19\x0c\x61\x25\x2a\x67\x19\xb5\x25\x2f\x8a\xb4\xef\xb3\x0b\x08\x8c\x9e\xe1\x22\x8b\x91\xf3\x40\xef\x76\x50\xcb\x37\xa2\x48\x01\x4e\x01\x46\xb6\x4a\xbe\x15\x05\x00\xa4\x10\x9f\x64\xee\x57\x72\x6d\xe8\x0e\xe2\x4b\x56\xce\x74\xad\x05\x34\xba\xb6\x52\x33\xb5\x41\x06\xf6\xc4\x55\x33\xf9\x43\xe3\xb5\xbd\x95\x4b\x28\x6b\xb9\x6b\x34\x93\x80\xc0\xf7\x86\x56\x62\xa7\x15\x37\xef\x00\x3b\x76\xef\x45\x91\xa6\x49\x5c\x67\xbe\x8c\xd1\x81\x65\xed\x5d\xb7\x81\xa3\x29\xd7\xa6\x0b\x0d\x94\xce\x2b\xf2\xb2\x74\xcc\xae\x85\x50\x79\x67\x0c\x7a\x42\x51\x4c\x9c\xa4\xef\x3d\xda\x9a\x60\xf1\xc1\xb3\xae\x0c\x85\x61\x98\x3c\x00\x39\x42\xe3\x69\xbd\x12\x59\xdf\x2f\x6e\x5c\xe7\x2b\x1a\x86\x68\x7f\x09\xe4\x27\xeb\xa3\x1a\x86\x45\xc3\xad\x11\x7f\x27\x33\xee\x12\xce\xc6\x12\x2b\xd6\xce\xc2\xe6\x5e\x5e\x81\x69\x24\xeb\xba\x61\x01\xe8\x35\xca\xaa\xf3\x9e\x2c\xaf\x04\xfb\x8e\x0e\x09\x9e\x6f\x76\xaf\xe9\x4e\x5e\x2e\x97\x27\x6a\x56\x64\x99\x3c\x7c\xed\x02\xeb\xf5\xbd\x8c\x87\x4b\x96\x65\x49\xbc\x23\xb2\x73\x1c\x40\x1e\xd8\x3b\x5b\x1f\x98\x6d\x29\x2f\x45\xd1\xf7\x8b\xcf\x9a\x0d\xc1\x03\xdc\xe0\x9a\x86\x21\xcf\xa6\xb0\x79\x26\x99\xd2\xdb\x7f\x64\x16\xab\xe1\x72\x09\x11\x06\xa1\x45\x63\x46\xe4\x35\xb7\x06\x1e\xe0\x9a\x50\x8d\xf4\x88\x9d\x33\xf2\x0c\x9f\xed\xbe\x27\xab\x0e\xfa\x1f\xc3\xd2\x24\x49\x0e\xa3\xe4\xa4\xc0\xda\x52\x5e\x89\x62\xef\x1b\x9d\x16\xb7\x93\x98\x06\x4b\x32\x2b\xf1\x09\x6b\x02\x8b\x5b\x5d\xe3\xa8\x3b\xdd\x61\xbb\x31\xa3\xba\x49\x12\xcb\xb5\x33\x07\xd8\x06\x6b\x6d\xa7\xa8\x73\x11\x27\x6d\x0f\x93\xe2\x34\xa3\x67\xd3\x68\x3a\x6a\xa5\x03\x96\x86\x94\x28\x72\x3c\xf1\x1a\x6d\x6f\x45\xf1\xf4\xf8\xfd\xe9\xf1\xdb\xef\x9f\xbf\xe2\x96\xf3\xcc\xe8\xff\xe3\x5e\xa6\xec\x2b\xf2\x55\xc4\xfd\x78\x11\x97\xe4\x59\x67\x26\xa5\x32\x8b\xdb\xf1\xce\xee\x05\x7a\xf1\xf6\xbe\x1e\xaf\x75\x14\xff\xd8\x38\x82\x56\x54\xa2\xcf\xf6\xdf\xa9\x79\x3c\x73\x0e\xb8\xb1\x67\x90\x55\x53\xc7\x38\xfe\x3d\x6b\x40\x6b\xe7\x78\xdf\x80\xfe\x04\x00\x00\xff\xff\x7c\x30\x27\xc1\x9d\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\x8a\x63\x24\xcc\x21\xa9\xd4\x83\x6b\xa9\xb7\xde\xdb\x17\x00\xb3\x89\x91\xc0\x6b\xc1\x2a\x3d\x50\xbf\x7b\x55\x1b\x27\x69\xdd\x0b\x7f\x33\xfa\xd0\xce\x94\xc2\x18\xa7\x60\x18\x41\x5a\x93\x51\x0f\x68\x1c\x26\x09\xcd\x3c\x0b\x21\x44\xeb\xfc\x15\xfa\x60\x72\x7e\x91\x3d\x8d\x6c\xfc\x88\x49\x76\xa2\x14\x7d\x80\xcc\x26\x31\x1c\xf4\x3c\x0b\x80\x47\x67\xa2\x4f\xb8\xa8\x27\xd9\x09\x80\xdf\x4a\x4f\x41\x45\xa7\x9e\xab\x04\xd0\x0e\xc7\x4d\x9b\xac\x3a\x41\xfc\x59\x2c\x25\x87\x49\x59\x62\xa6\x78\xb3\x02\x94\xd2\xbc\x26\xf6\x7d\xc0\xe6\xc3\x73\x40\xf8\x82\x77\x73\xc6\xe5\xff\x05\xa6\x87\x63\x27\xb6\x8b\x59\xad\x1b\xde\x06\xba\xa8\x89\x32\xff\x0f\x7c\xe3\x18\xf6\xbc\xca\xa8\xd0\x56\x3b\x7f\xdd\xce\xfb\xa9\x4e\x37\xf2\x63\xac\xd9\x3b\xb4\x26\xe9\xba\xaf\xd1\xde\x59\x4b\x92\x38\xba\x35\xc7\xfb\xeb\x9f\x5e\xce\x44\x5c\x7b\xf9\x0e\x00\x00\xff\xff\x66\xf6\x1b\x4b\xb4\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xe9\xde\xb7\x2e\xad\x4f\xad\xa3\x57\x29\x92\xb5\x8d\x97\xea\x1f\xda\x6d\x4a\x08\x01\x45\xc4\xa4\x46\x72\x2c\x30\x45\x84\xba\x25\x07\xd7\x69\xa0\x45\xa1\x87\xb2\x6a\x44\x5f\x26\x5a\x59\x3a\xf9\x15\x8a\x2c\xd9\xd0\xe6\x34\x3b\xdf\xfc\xbe\x6f\x96\x19\x18\xf4\x08\x86\xa6\xc6\xd8\x01\x72\x1d\x46\x39\x75\x6c\xcc\x38\x1d\xbe\x3d\x46\xc0\xf8\xb1\x49\x0e\x10\x77\xdc\x97\xf0\xdc\x23\xd6\x2b\xa4\x2a\x00\x00\xff\x98\x70\x1f\x2c\x1d\xbf\x00\xfd\x10\x9b\xf4\x70\xc4\xc1\x73\xde\xd9\x06\x31\x3a\x16\x60\x30\xea\xef\xe0\x37\x8c\x63\xca\x35\x93\x0e\x91\x5a\x06\xab\x2a\xbd\x1f\xf4\x46\xfd\x3d\xe8\xee\x38\x4b\xc7\xcf\x90\x5a\x9f\xcd\xe5\x2c\xad\xcf\xe6\x9b\x3c\xaa\x3f\x7f\x91\x42\x6c\xdf\x9f\x64\x3c\x95\xb3\x54\xc6\xd3\xbd\x2e\xe3\xe9\x83\x1f\x28\x65\x72\xdd\xaa\x72\x79\x2b\x17\x77\x45\x16\xca\x9b\x70\x93\x47\xe5\x62\xd2\xea\x85\xb8\x58\x4f\x6e\x8b\x2c\x2c\xd3\xd6\xf0\x71\x2c\x85\x28\x93\xeb\xf2\xfb\xcf\x66\x7c\xff\xb5\xba\x09\xe4\xf8\x97\x5c\x5d\x35\x29\x42\x94\x8b\xc9\xff\xa3\x3f\xf9\xd6\xf9\x63\x59\x88\x65\xe5\x8f\x1b\x2e\x8e\xe4\xc5\xef\xca\x8f\x64\x1e\x74\xfb\xe3\xa8\xba\x9b\x17\x59\xb8\xbe\x3c\xdf\xe4\xd1\xfa\xf2\xbc\xf9\xcb\xec\x43\xdb\x16\x79\x22\x57\x57\x45\x16\xd6\xc9\xb7\x07\x3f\x18\xf4\xdc\xee\xac\x3d\x83\x1e\xa9\x8a\xd2\x36\x4f\x30\x06\x46\x0d\xa2\x6b\x1e\x30\xae\x79\x1c\x30\x6e\xb9\x93\x13\x4e\x2c\xd7\xd4\x38\x01\xd4\x11\xbd\xae\xbe\xb6\xc9\x7b\x04\x4f\x4f\x4f\x1f\x67\x10\xdb\xd8\x25\x28\xfb\x5d\x6d\xf9\x1b\x00\x00\xff\xff\x28\x1e\xb6\x18\x05\x02\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
