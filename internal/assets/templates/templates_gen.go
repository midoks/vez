// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
// ../../../templates/soso.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xc1\x8e\x9c\x38\x10\xbd\xf3\x15\xb5\xec\x6a\xe9\xd6\xc8\x30\x33\xdd\xa7\x1d\x60\xa5\x9d\x3d\x24\x52\xa4\x48\x51\x72\xc8\xd1\x40\x01\xee\x36\x36\xb1\x0b\x68\xd4\xea\x7f\x8f\x0c\x0d\x9d\x99\x28\x87\x8c\x0f\xa8\x28\xfb\xbd\x57\xf5\x5c\xf6\x3c\xcf\x8b\x0b\xd1\x43\x2e\xb9\xb5\x89\x9f\x6b\x45\x5c\x28\x34\x7e\xea\x01\xc4\xa5\xd6\x84\x66\xd9\x2c\x58\x29\xf1\x04\xee\xc3\x06\xc3\x5b\x38\x74\x96\x44\x39\x32\x87\x42\x45\x2c\x43\x1a\x10\x15\x70\x29\x2a\xc5\x04\x61\x63\x59\x8e\xca\x51\xb4\x23\xdb\x41\x33\xb2\x3d\x64\xda\x14\x68\x18\xe9\x76\xd2\x00\x78\xa9\x2f\x59\x53\xb0\x3d\x5c\xb5\x7e\x66\xba\x82\x00\x62\x0e\xb5\xc1\x32\xf1\x23\x7f\x41\x37\x99\x13\x41\xf6\x08\x4d\xe6\x68\xee\x81\xf0\x44\xac\xe9\x08\x8b\x39\x2c\x30\xd7\x86\x93\xd0\x8a\x29\xad\x10\x64\xcd\x1e\x56\x46\x80\xd8\xf6\xd5\x42\x96\x09\x1f\x06\x51\x50\x9d\xf8\xbb\x7b\x1f\x6a\x14\x55\x4d\x89\xff\xb8\xf7\xd3\xb8\xb3\x08\x27\x29\xd4\xf1\x9f\xb9\x84\x3f\x33\xad\xc9\x92\xe1\xad\x1f\xa5\x71\x64\xfb\x6a\xad\x32\xe2\x6b\x68\x5b\xae\x16\xf6\x5b\x61\x7e\xfa\x77\xae\xdb\xf1\x09\xce\xe7\xaf\xc8\xcd\xe5\x12\x47\xee\xe0\xd5\x9b\xa8\x10\x7d\xea\xcd\x71\x27\x17\xb4\xe2\x3d\xac\x56\xbd\xbe\x05\x54\x05\x48\x61\x89\x75\xca\xd2\x28\xb1\xb8\x9a\x79\x73\x4e\x8a\xd5\x31\xcb\x76\x7e\x1a\x8b\xa6\x5a\x7a\x7d\xdc\xbf\xe8\x15\xac\xc9\x13\x3f\x2a\x79\x2f\x72\xad\xc2\x56\x55\x53\x87\x52\x2c\xf5\x75\x72\x9a\x94\x68\x1e\x95\xd4\x5b\x2a\x8e\x6d\x6e\x44\x4b\x57\xbc\x25\x4e\x22\x8f\x0e\x36\x3a\x7c\xeb\xd0\x8c\x6c\x17\xee\xc2\x87\xb0\x11\x2a\x3c\xd8\x7f\xfb\xe4\x7c\xfe\xaf\x13\xb2\x78\xd6\x4d\x23\xe8\x72\xf1\x9d\x89\x13\x3e\xfd\x25\xd1\x6a\xf9\xdb\x59\x6a\x51\xd5\xd2\xb5\x7a\x8b\xde\x4e\x46\x3c\x93\x78\xab\x8a\x4d\xff\xbf\x45\x47\x63\x8b\xf3\x64\x44\x07\xde\xf3\x39\xeb\xa7\x5e\x2d\x0f\x36\x14\x4a\xd0\xbb\xa5\x4a\xa1\xaa\x8f\xea\x83\xe6\xc5\x66\xfb\xe4\xfd\xb5\x09\x26\xad\x60\x1b\xae\xea\x9f\x5d\x62\x73\xbe\x6c\x9f\xbc\x9b\xce\x22\x94\x3a\x48\x78\x62\x16\xb9\xc9\xeb\x60\x1b\xda\x2e\x6b\x04\x6d\xca\x4e\xe5\xee\x69\x6c\x70\x7b\x9e\x6e\x17\xc3\xd6\x60\x8f\x8a\xfe\xc7\x92\x77\x92\x9c\x9a\xcb\xf7\xdc\xc0\x71\x80\x04\x66\x9e\xe3\x10\x6c\xc3\x9e\xcb\x65\x5b\x94\x9b\x3f\x8e\xc3\x95\xc3\xad\x1f\x8e\x95\x3a\xef\xec\x72\xd0\x2d\x83\xd4\x19\x05\x25\x97\x16\xe7\xec\x65\xd5\xe8\x8c\x84\x04\x82\xc8\xea\x28\x80\x3b\x40\x95\xeb\x02\xbf\x7c\x7a\xff\xac\x9b\x56\x2b\x54\xb4\x39\x0e\x5b\xb8\x83\x20\xac\xa9\x91\xc1\x0c\x1f\x84\x2a\xf4\x10\x4a\x9d\x4f\xef\x1c\x12\x47\x33\x6f\xbd\xd4\x7a\x6d\x4e\x94\xe9\x62\x74\x03\xec\xc8\xd2\xef\x01\x00\x00\xff\xff\xbf\x0f\x83\x1e\x1a\x05\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\x1b\xc7\xf1\xbf\xf3\x53\x94\xe7\x7f\x91\x00\x75\xb3\x5f\xf3\xd2\x92\xfb\x87\xb4\x52\x42\x27\x92\x9c\xc0\x7a\xd8\x30\x8c\xa0\x39\xd3\x9c\x69\xed\x3c\xe8\x99\xe6\xec\x2e\x57\x7b\x89\x61\xe4\x96\xe4\x64\x04\x81\x0f\x49\x10\x04\xb9\x25\x40\x9c\xc0\xb0\x0f\xf9\x32\xb6\x12\x7d\x8b\xa0\x67\x48\xee\x90\xa2\xe4\xf5\x0b\x82\x96\x5d\x35\xd5\xbf\xaa\xfa\x55\x57\x4f\xf7\x8c\xde\xb8\xf3\xd6\xd1\xc3\x77\x7f\x76\x17\x52\x93\x67\x87\x83\xd1\xea\xe7\x0d\x84\xe0\xab\x3f\x7f\xfa\xe2\xc3\xbf\x02\x42\x56\xad\x64\x7c\x38\x18\xe5\xca\x48\x48\x8d\x99\x23\xf5\xc1\x42\x37\x63\xe7\xa8\x2c\x8c\x2a\x0c\x7a\x78\x36\x57\x0e\x44\x9d\x34\x76\x8c\x3a\x35\x43\x0b\x75\x00\x51\x2a\xab\x5a\x99\xf1\xa3\x87\x3f\x42\x81\x03\xc3\x7d\x28\xef\xa0\x47\xb7\xd0\x51\x99\xcf\xa5\xd1\xd3\xac\x0f\xf4\xe6\xdd\xb1\x8a\x13\xe5\xbc\xce\xf7\x3d\x59\x24\x0b\x99\xf4\xa7\x45\xc5\x66\x46\x21\x73\x35\x76\x1a\xad\x4e\xe6\x65\x65\x7a\x36\x27\x3a\x36\xe9\x38\x56\x8d\x8e\x14\x6a\x85\x1b\xa0\x0b\x6d\xb4\xcc\x50\x1d\xc9\x4c\x8d\x29\x26\x37\x20\x97\xa7\x3a\x5f\xe4\x7d\xd5\xa2\x56\x55\x2b\xcb\x69\xa6\xc6\x45\xd9\x65\x95\xe9\xe2\x18\x2a\x95\x8d\x9d\x3a\x2d\x2b\x13\x2d\x0c\xe8\xa8\x2c\x1c\x48\x2b\x35\x1b\x3b\xc3\x99\x6c\xac\x8c\xe7\x45\xe2\x1c\x0e\x3a\x8a\x9f\x7f\xfc\x77\xb8\x5d\x96\xa6\x36\x95\x9c\xc3\xf3\x3f\x7c\xf6\xd5\xbf\x3f\x84\xa3\xb7\xdf\x86\xe7\x1f\xff\xea\xcb\x2f\xfe\xd5\x71\xdf\x03\x36\x67\x99\xaa\x53\xa5\xcc\x06\xb5\x36\xd2\xe8\x68\x18\xd5\xf5\x70\xba\x06\xc2\xb9\x2e\x70\x54\xd7\xff\xdf\x8c\xcf\xcf\x6f\x2f\x74\x16\x1f\x95\x79\xae\xcd\xc5\x85\xf3\x6d\xe0\x50\xa5\xec\xf8\xbb\xa3\x1a\xcb\x57\x0f\xb7\x95\xbf\x3b\x6c\xaa\x93\x34\xd3\x49\x6a\x86\x9d\xcd\x30\x56\x33\xb9\xc8\xbe\x87\x80\x6b\x95\xcd\xda\x3f\xaf\x84\x59\xd5\x71\x54\x47\x95\x9e\x1b\xa8\xab\xe8\x72\xf6\xd3\x7a\xf8\xf4\x83\x85\xaa\xce\x10\xc5\x94\x62\xd2\xc6\xf3\x74\x2f\xce\x68\xd8\x01\x1c\xb6\x15\x1f\x0c\xd6\x78\xb1\x34\x12\xc9\x18\x45\x99\xee\xd6\xb5\x44\xf3\xc5\x14\xf9\x3e\xf7\xbc\xd0\xf5\x3d\xe6\xd2\x90\x70\xee\x80\xac\xcf\x8a\xa8\x73\x6f\x5b\xa4\xbe\x39\x1c\xce\x65\xa2\x64\xcc\x70\x52\x96\x49\xa6\xea\xb3\x22\xd6\x91\x34\xba\x2c\x70\x54\xe6\xab\xa7\x36\x46\x19\xd7\xd3\xb3\xce\x08\x3f\xad\x7b\xb1\x6c\x35\x50\x67\x80\x6a\x6d\x14\x6a\x54\xa5\x67\x2b\xb0\x5e\x43\xc5\xb7\xc3\x9f\x94\x0f\xa2\x07\x77\x7e\xfe\xd6\x93\x77\x1f\x55\x4f\x16\x77\x82\xbb\x31\xe5\xf7\xa2\x1f\xdf\x39\xe6\x4f\xde\x6c\xc8\x9c\xb8\xd1\xfd\x47\xef\x54\x3c\xea\xed\x03\x1d\xfc\x54\xea\x78\xf1\x5a\xf4\xa8\x8c\x15\x7a\x72\xe2\x1d\x67\xec\x83\xc9\xbc\xeb\xb9\x4b\xa6\x0e\x07\x8d\xac\xe0\x17\x69\x6e\x60\xdc\xfd\x3c\x7b\x06\xef\xbd\x7f\x30\xb8\x36\x5b\x14\x91\x85\xba\x76\x1d\xce\x07\x00\xd6\x2c\xcd\x61\x0c\x71\x19\x2d\x72\x55\x18\x1c\x55\x4a\x1a\x75\x37\x53\x56\xba\xe6\x74\x78\xce\xf5\x83\x01\x40\x9a\xe3\xba\x8a\x60\x0c\x1b\x52\xd3\x1c\xb7\xa1\xb6\x1c\xa6\xb9\x2d\x67\xe4\x79\x3e\xf1\x14\x99\x45\x74\xea\xb1\x90\x4b\x8f\xcd\x02\x35\x95\x6e\x10\xf0\x90\xa8\xc8\x39\x58\xb9\xad\xfb\x5e\x13\x65\x56\x2e\xeb\xdb\x67\x0f\x65\xf2\x40\xe6\xea\xd2\xf9\x7b\xe4\xfd\x03\x18\x00\xd4\x78\x2e\x2b\x55\x98\x07\x65\xac\xb0\x2e\x6a\x55\x99\xdb\x6a\x56\x56\xea\x5a\x9a\xdf\x80\xfa\xfa\xc1\xe0\xe2\xfa\xb5\xeb\x07\x83\xcb\x9a\x0d\x06\xe7\xe7\x7a\x06\xf8\x56\x65\x74\x94\xa9\x8b\x8b\xc1\xc8\x68\x93\xa9\xc3\xf3\xf3\xb5\x0e\x3f\xb4\x8a\x67\x13\x25\xe3\x76\x74\x71\x01\x08\x9e\xff\xf2\x2f\xff\xfd\xdb\x17\xa3\x61\x67\xbc\x55\x9b\x63\x75\x76\x52\x56\x71\xdd\x2b\xc6\x2e\x18\x3c\x83\x1e\xdc\x8d\x0e\x6c\x67\x0b\x8e\x55\x17\xe3\x76\x59\x7b\x48\x13\x93\x67\xaf\x02\x3a\x3f\x57\x59\xdd\xcb\xe6\x9b\x85\xfb\x0d\xe2\xe9\x7b\x2c\xe2\x8b\x0b\xbb\xc4\x5e\x7a\xf3\x9c\xa2\xb8\xa8\xd1\xbc\x52\x33\x65\xa2\x14\xd9\xc9\x55\x99\xf5\x50\xca\x62\x7b\x8b\xe9\x9b\x6f\x36\x99\xa1\xce\x65\xa2\x70\x24\xa3\x54\x45\xa9\xb4\x4b\xea\x2a\xb3\x72\xbe\x08\x76\x27\x0d\xbe\x7e\xda\x6b\xb7\x83\xab\xf8\x35\xf3\xe8\xdb\x4f\xee\x26\xca\xb8\xc6\x09\x8e\xcb\xc5\x34\x53\x51\xa6\xa3\x63\x5c\x28\x73\x95\xe9\x27\x27\x27\x2b\xdf\x57\x75\x38\x5b\x14\xb1\x2e\x92\x28\x2d\x75\xa4\xea\x5c\xd5\xb5\x4c\x54\xbd\x0d\x32\x18\x8c\x86\xdd\xc1\x66\x30\x9a\x96\xf1\x99\xfd\xad\x9b\x04\x4e\xf3\xac\xa8\xbb\x8d\xf4\x66\xe7\xfb\x84\xe3\xb2\x4a\x86\x8c\x10\x32\xac\x9b\xc4\x81\xf6\x9d\x31\x76\x62\x5d\xcf\x33\x79\x76\x13\x8a\xb2\x50\x07\xce\xe1\x00\x60\x54\x9f\xe5\xd3\x32\x03\x1d\x8f\x9d\xcd\xab\xce\x01\x7b\x00\xb9\x5d\x9e\x8e\x1d\x02\x04\x28\x0d\x20\x14\xad\x39\xc0\x6a\x45\x6f\x8e\x01\x9b\x45\xdd\x3e\x9c\x4b\x93\xc2\x4c\x67\x19\xaa\x16\xd6\xa3\x6a\x54\x51\xc6\xb1\x03\x51\xa6\xe7\xbb\xba\x78\xec\xdc\x67\x02\xbb\x24\x04\x12\x21\x0f\xfb\x9c\x03\x41\x94\x62\x9f\xba\xe0\xe2\x20\xe4\x56\x10\x21\x03\xca\x30\x0b\x04\x66\x54\x80\x87\xa9\x40\x98\x78\x02\xa8\xc0\x24\x64\x88\x61\xe2\x79\xc0\x08\x76\x7d\xff\x28\xc0\xa1\xe0\xc0\x43\xcc\x3d\x0b\xe1\x0a\x1f\x04\xc7\x22\x70\x81\x80\x10\x98\x50\xd1\xb8\x38\xf4\x59\xd4\x3e\xc3\x2e\x0b\xa1\x9b\x22\xb0\x27\x42\xa0\x04\x87\x2e\x05\x4a\x31\x75\x39\x30\x4c\x08\x03\xaf\x9d\x6e\x03\xb0\x1e\x05\xf7\x61\xcb\x23\x65\xd8\x0f\x05\x04\x01\xa6\xc4\x03\xea\x63\xdf\xf7\x20\x14\x60\x13\xa3\x10\x8a\x49\xc8\xb1\x1b\xad\x92\x83\x36\x39\x81\xda\xe4\xa0\x4d\x8e\xa2\x2e\x39\x64\xb3\x43\x36\x3b\x9b\x1c\xea\x92\xeb\x5c\xa1\xce\x55\x1b\x4f\x88\x3c\xec\x12\x01\x2e\xe6\xa1\x87\x28\xc1\x1e\x13\x6d\xd8\xa2\x25\x8b\xba\xbc\x41\x5d\x86\xa8\x4d\x11\xd9\x1c\x51\x80\x43\x2e\x50\x9b\x23\xda\x32\x46\x6d\x8e\xc8\xe6\x28\x90\x8d\x03\x75\x39\xa2\xbe\xe3\x23\x4a\xdc\x96\x7b\x1b\xb6\xf5\x46\x30\x6b\xb3\xb1\xa9\x01\x99\xb4\x35\x0c\x96\xf7\x03\x02\xae\x8f\x03\x8f\x1f\x05\x04\x3c\x0f\x7b\x1e\x07\x9f\x63\xc1\x3d\xf0\x19\x78\x0c\xbb\x82\x83\xcf\x26\x42\x48\x06\x0c\x08\x10\x8a\x18\x62\x8f\xd9\xa5\xcc\x10\x4b\x69\x60\x23\x88\x42\x4c\x82\x96\x32\x17\x13\x21\x40\x60\xbb\x0e\xba\x31\x65\x58\xf8\x02\x88\x65\x81\x30\x64\xeb\x6a\x39\x20\x22\x44\x21\xa6\xb4\xad\x63\x10\x34\x98\xf9\xfe\x91\xef\x62\x4e\x7d\x10\x1e\xe6\xb6\x4c\x04\x5c\x8a\x19\x85\x4d\xac\xcb\xfb\x1e\xc1\x2e\xa3\xc0\x02\xcc\xc5\x44\x84\x38\x14\x41\x43\x85\x65\x2c\x0d\x70\x48\x6c\xf1\x82\xc0\x7a\xb3\x6c\x07\x88\x61\xdf\x67\xab\xb1\x8f\x7d\xe6\x03\x69\x99\xe5\x88\x63\xe6\x09\xe4\x63\x46\x7c\x14\x62\x9b\x4c\x3b\x5e\xde\xef\x40\x41\x84\x98\x35\xd4\xc3\xc2\x0d\x26\x1e\xc1\x21\x8d\x7c\x4c\x3d\xbf\x43\x0e\x3d\x5b\x80\xc0\xf7\xd6\x42\x80\x59\x40\x81\x20\x17\x0b\xe2\x21\x8e\x43\xc2\x51\x80\xa9\x1f\xb4\x4d\xc1\xdc\x4e\x58\x05\xbc\xb4\x07\x21\xdb\x7c\x6d\x4f\x0f\xbb\xa6\xde\xed\xef\xb4\xcc\xd5\x6e\x6b\x7b\x40\x3d\xa7\xdf\xbc\xb6\x29\x03\xcc\x5d\x01\x14\x53\xe1\x49\xec\xda\x1a\xdb\x7f\x08\xfb\x24\x00\x92\x21\x0f\xbc\x5b\x97\x6a\xa0\xd8\x05\x1f\xbb\x8d\xdf\xb3\x05\x3b\x4c\x05\x76\xb7\x75\x08\xbb\x0d\x12\x29\x6b\xc4\xae\xed\x84\x8a\x3d\xa6\xfe\x96\x7b\x2a\x3c\x64\x23\xbb\x47\x39\xb8\xd8\x0f\xf9\x63\xb6\xe5\x00\xb5\xb3\x52\x44\xb7\x75\xd8\x6d\x28\x66\x21\xbf\xd7\x4b\x6b\x79\x9f\x61\x17\xa8\x78\xec\x63\x9f\xf8\x99\x8b\x5d\xdb\x2e\xb0\xfa\xff\x98\x8a\x09\x25\x0d\x12\x7b\xc0\xf9\x4b\xe0\x62\xc2\xb0\xbb\x74\x86\xaf\xa3\xbe\xbd\x3b\x5c\x89\x7b\x02\x6c\xdd\x0d\x40\xa1\xed\x87\x2d\x05\xb0\xa6\xaf\x40\x0c\xd8\x64\x4b\xb6\x0d\xb5\xcc\xa9\x0b\x2c\x45\xa2\xe1\xa9\x78\x2c\x96\x39\x01\xb1\x96\x82\x9e\xc4\x25\x05\xba\x2e\x23\xa2\x0d\x62\xcb\x1c\xb9\xc0\x1b\xc4\x27\x9e\xb5\x6e\x45\x62\x45\xda\xb0\xbe\x31\xd0\x94\x2f\x73\x24\x90\xb0\x90\x13\xda\xf0\x65\x4e\x5a\x41\x74\x82\x8b\x78\xe7\x7c\xe2\x2d\x73\x01\xa2\xc3\x7b\x1c\x7c\x0d\x51\x73\x55\xce\x33\x85\x22\x5d\x45\x57\x24\x8c\x52\xf0\x24\x07\xde\x45\x85\x3c\x20\xd0\x49\x56\xf6\x80\xac\x1c\xbe\xee\xe5\xd4\xf1\x1e\xc8\x00\x82\x0e\xc5\xba\x22\xb7\x3a\x91\xb4\x49\x07\xcb\x3c\x40\xbe\xf4\xc1\x5f\x95\xde\xc5\xc2\x0b\xec\x16\xce\xfd\x23\x8e\x99\x60\x76\xcc\x98\x07\x02\x07\xc4\x05\x4a\x20\x00\x4a\x6a\x81\x7d\xd7\x07\xfb\xc4\xae\x2c\x3b\x85\x61\xee\xdf\xda\xe0\x58\xab\xaf\xa1\x24\xa9\x74\x7c\x35\x26\x80\x61\xf7\x96\x6d\x47\xba\x5a\xa1\xad\xc6\x96\x6a\x47\x6b\xdf\x25\x6e\xb3\xab\xb5\xeb\xda\x4f\xd1\xae\xba\x7d\xd0\x20\xde\xf5\x0c\x7b\x69\xfd\xf3\x97\xfa\x9e\xef\x69\x65\xbe\xaf\x97\x96\xb9\x67\xb5\xbb\x0e\xc9\xde\xa0\xed\x92\xde\x13\x35\xe5\xfb\xc3\x0e\xd7\x61\xe7\xb4\x75\xf7\xbd\xc6\x7d\xbf\x8b\x72\x0f\xd9\xe1\x1e\xb2\xad\xe9\x5e\xb6\xa9\xbb\x8f\x6e\x9b\xd1\x0f\x15\xf8\xab\x09\x0f\xed\x6e\xb0\xad\xee\xa4\x66\x47\x8f\x56\xd2\x3e\xca\x7f\xc8\xd0\x77\xbb\x64\x64\xcf\xb6\xf6\x10\x6c\x0f\xc5\xaa\x82\x28\x93\x75\x3d\x76\xe6\x88\xc3\x34\x41\xb1\xac\x8e\xc1\xa8\x53\x83\x4e\x52\x6d\x14\xe4\x53\xc4\xd7\x1d\x13\xeb\x66\x6d\x6d\xef\x40\x52\x17\xaa\x5a\x3d\xdb\x7e\x1a\xa3\x59\xa6\x4e\xc1\xfe\x41\x27\x95\x9c\x83\xcc\x74\x52\x20\x6d\x54\x5e\xa3\x48\x15\x46\x55\xf0\x74\x51\x1b\x3d\x3b\x43\xab\xdb\xd4\xab\xd4\x59\x82\x6a\x23\x2b\xb3\xf1\x03\x30\x92\xeb\xf3\xbf\xb3\xe3\x70\x8f\x9b\x7c\x8a\x98\xfd\x93\x25\x88\xf4\xf3\x6a\x87\xb1\x8a\xca\xaa\xbd\xe1\x20\x7b\xb4\xef\xf9\xb0\x5b\x49\x93\xac\xe1\xa7\x1a\x72\x85\x98\x03\xdd\xd7\x44\x47\x10\x07\x52\xa5\x93\xd4\x8c\x1d\xce\x1c\xa8\x4a\xbb\x2f\xea\x3c\x71\x40\x56\x5a\xa2\x4c\x4e\xed\x9d\x65\x73\xd8\x77\x0e\x47\x8b\x5a\xc1\xa9\xbd\xce\xdc\xec\x62\xff\xbf\xcb\x5b\xc3\xf0\x70\x55\x92\x8d\xeb\xa1\x3c\x1c\x5c\x4a\x8b\x6c\x1d\x47\x21\x1b\x88\xca\x0c\x51\xd6\xfe\x64\x09\x92\x0b\x53\xda\xd8\x36\x43\x9b\xee\x2b\xa8\xcd\xa7\x28\x8f\x11\xd9\xce\x32\xd3\x87\x7b\xf8\x2c\x64\x83\xda\xbb\xd7\xfc\x14\xb1\x1e\x6d\xce\xe1\x97\x9f\x7d\xf1\xe2\x8f\xff\xb4\x11\x8e\x86\x99\x7e\x35\x54\x25\x8b\xf8\x0a\x70\x2f\x7e\xff\x9b\xe7\x9f\x7c\xfe\xe2\x77\x1f\xb5\xf7\xfc\x3d\xa0\xed\x77\xb7\x2d\x64\x39\x2d\x17\xe6\x0a\xd0\x5f\x7d\xf4\x8f\x2f\x3f\xff\xf5\x06\xb4\xfd\xe6\x76\xc9\xf0\x22\xeb\x53\x3c\x2b\xab\x7c\x8d\x78\x8a\x6a\x25\xab\x28\xdd\xcb\xf4\x14\xf1\xcd\x6a\xea\x68\xe7\xdb\x7c\xea\x62\xbe\x30\x60\xce\xe6\x6a\xec\x74\x38\xce\x25\xf0\xf1\x09\x58\x4f\xeb\x4f\x09\x5b\x42\xdb\x79\x0e\xcc\x33\x19\xa9\xb4\xcc\x62\x55\x8d\x9d\xe7\xbf\xfd\xe4\x3f\x9f\xfe\x09\x63\xec\x40\x23\xb3\x85\x6a\x3f\xa4\xfc\xb4\xfb\xf2\x71\x71\xb1\xbd\xd8\xde\xee\x9c\xf5\x73\xb4\xf0\x9b\xf6\x1c\xc6\xba\x59\xf5\xf1\x7a\xd8\xdd\x8b\x55\x75\xf8\xbf\x00\x00\x00\xff\xff\xba\x6d\x03\x92\x20\x18\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sosoHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x8a\xdb\x48\x10\x3e\x4b\x4f\x51\xf4\x71\xa0\x2d\x0f\xb3\x0b\xcb\xae\x2c\xd8\xdb\x2c\x0b\x61\x60\x92\x07\x28\x49\x65\xa9\x33\xad\x6e\xd3\x5d\xf2\x0f\x1a\x41\xce\xc9\x53\xe4\x21\x02\xf3\x40\x73\xc9\x5b\x84\x96\x2c\x5b\x76\x12\x72\x89\x0f\x56\xab\xaa\xf8\xfa\xd3\x57\x1f\x5f\xd7\x31\x35\x1b\x8d\x4c\x20\x72\xf4\x94\xd4\x84\x25\x39\x01\x8b\xbe\x8f\xe3\x38\x2d\xd5\x16\x0a\x8d\xde\xaf\x44\x61\x0d\xa3\x32\xe4\x44\x16\x77\x5d\x72\x03\x9e\xd1\x31\xdc\x24\x61\x72\x3e\xe8\xec\x0e\x2a\xf9\xa7\xc8\x62\x80\x4b\x00\x2d\x9b\x52\xfe\x25\x32\x00\x88\x21\xfc\xa2\x79\xbf\x94\x6b\x4d\x7b\x08\x7f\xb2\xb0\xba\x6d\x0c\xa0\x56\x95\x91\x8a\xa9\xf1\xd2\xb3\x23\x2e\xea\xb1\xef\x6b\xa7\xcc\x93\x5c\x42\x5e\xc9\x5d\xad\x98\x04\x78\x3e\x68\x5a\x89\x9d\x2a\xb9\xfe\x1b\xb0\x65\xfb\x8f\xc8\xe2\x38\x0a\xf7\xcc\xaf\xd1\xca\xb3\xac\x9c\x6d\x37\x70\x3e\xca\xb5\x6e\x7d\x0d\xb9\x75\x25\x39\x99\x5b\x66\xdb\x80\x2f\x9c\xd5\x1a\x1d\xa1\xc8\x46\x9c\xa8\xeb\x1c\x9a\x8a\x60\xf1\xaf\x63\x55\x68\xf2\x7d\x3f\x76\x00\x52\x84\xda\xd1\x7a\x25\x92\xae\x5b\x3c\xda\xd6\x15\xd4\xf7\xe1\xfc\xce\x93\x1b\x4f\xff\x95\x7d\xbf\xa8\xb9\xd1\xe2\x7b\x32\xc3\x57\xc2\xd5\xbb\xc4\x82\x95\x35\xb0\x39\xc8\x3b\xd0\xb5\x64\x55\xd5\x2c\x00\x9d\x42\x59\xb4\xce\x91\xe1\x95\x60\xd7\xd2\x44\xf0\xfa\x63\x8f\x9a\xee\xe4\xed\x72\x79\xa1\x66\x41\x86\xc9\xc1\xfb\xd6\xb3\x5a\x1f\x64\x58\x2e\x19\x96\x39\xf1\x8e\xc8\xcc\xe1\x00\x52\xcf\xce\x9a\x6a\xc2\x6c\x72\x79\x2b\xb2\xae\x5b\xbc\x55\xac\x09\x9e\xe1\x11\xd7\xd4\xf7\x69\x32\x8e\xcd\x99\x24\xa5\xda\xfe\x84\x59\x70\xc3\xed\x12\x02\x18\xf8\x06\xb5\x1e\x20\xef\xb9\xd1\xf0\x0c\xf7\x84\xe5\x80\x1e\x60\xe7\x18\x69\x82\xa7\x73\xd7\x91\x29\x27\xfd\xcf\x63\x71\x14\x45\xd3\x5b\x74\x61\xb0\x26\x97\x77\x22\x3b\xf6\x86\xa6\xc1\xed\x28\xa6\xc6\x9c\xf4\x4a\x3c\x60\x45\x60\x70\xab\x2a\x1c\x74\xa7\x3d\x36\x1b\x3d\xa8\x1b\x45\xc1\xae\xad\x9e\xc0\x36\x58\x29\x33\x4e\x5d\x8b\x38\x6a\x2b\xc6\x3b\x00\xa2\xa8\xeb\xd4\x1a\x16\x0f\x8e\x1e\xec\x60\x98\x68\x34\x53\xaa\xd5\x0c\x8d\x86\xcd\x88\x2c\xc5\x8b\xa2\x56\xe6\x49\x4c\xce\xf2\x36\xd8\xe8\x7f\x3a\xec\xac\x2b\xfb\x3e\xd9\x38\xda\x86\xca\x04\x3d\x9a\x2b\x7b\x7d\xf9\xf8\xfa\xf2\xe1\xeb\xe7\x2f\x41\xae\x34\xd1\x2a\x3b\xdd\x39\x89\x36\x2b\x04\x6e\x6f\x68\xcf\xbf\x9b\x9c\xa1\x3d\x87\xca\x09\xfb\xc4\xee\xd3\xaf\xd8\x1d\xd5\x4e\x5a\x3d\x2e\x31\x31\xb8\x1d\xe2\xe4\xb8\xbb\x1f\x06\xcb\x1f\x43\xe2\x04\x5f\x9c\x33\xcd\xab\x92\x72\x74\xc9\xf1\x39\xe6\xda\x09\x67\x82\x1b\xe2\x8c\x4c\x39\x86\xd9\xb9\x7a\x95\x8d\x6b\x6b\xf9\x98\x8d\xdf\x02\x00\x00\xff\xff\x90\xd3\x63\x4b\x38\x05\x00\x00"

func sosoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_sosoHtml,
		"soso.html",
	)
}

func sosoHtml() (*asset, error) {
	bytes, err := sosoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soso.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
	"soso.html":                sosoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
	"soso.html": &bintree{sosoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
