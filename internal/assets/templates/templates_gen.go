// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xdd\xae\x9b\x30\x0c\xbe\xe7\x29\xac\x4c\xda\x9d\x97\x8e\xf6\x6a\x0b\xbc\x4b\x20\x06\xb2\x05\x07\x25\x86\x96\xb7\x9f\x68\x1b\x8e\xce\xce\x0d\x32\x4a\xbe\xdf\xb8\xaa\xaa\xca\x38\xbf\x41\x1f\x6c\xce\x8d\xea\x23\x8b\xf5\x4c\x49\xb5\x15\x80\x19\x62\x14\x4a\xe5\xd0\xe1\x10\xe8\x01\xc7\x07\xef\xc9\x2e\xf0\x67\xcd\xe2\x87\x1d\x0f\x14\xb1\x60\x47\x72\x27\x62\xb0\xc1\x8f\x8c\x5e\x68\xce\xd8\x13\x1f\x14\xcb\x8e\x57\x98\x77\xbc\x41\x17\x93\xa3\x84\x12\x97\xa7\x06\xc0\x67\xfd\x80\xb3\xc3\x1b\xbc\xb5\xbe\x32\xbd\x41\x00\xc6\xc2\x94\x68\x68\x94\x56\x05\x3d\x77\x87\x08\x61\x0d\x73\x77\xd0\x5c\x40\xe8\x21\x38\xaf\x42\xee\x35\x3a\xea\x63\xb2\xe2\x23\x23\x47\x26\x08\x13\xfe\x3c\x19\x01\x4c\xde\xc6\x42\xd6\x79\x05\x77\xef\x64\x6a\xd4\xf5\xa2\x60\x22\x3f\x4e\xd2\xa8\xfa\xa6\x5a\xb3\x66\x82\x47\xf0\xfc\xf7\xd7\xcb\xc2\xb7\x2e\x46\xc9\x92\xec\xa2\x74\x6b\x74\xde\xc6\xd3\xa5\xb6\xe7\x98\x17\xcb\x85\xfd\xc3\x98\x6a\xbf\xf7\x71\xd9\x7f\x43\x7d\xa9\x6b\xa3\x8f\x4b\xef\x5e\xb4\xf3\x5b\x5b\xbd\xe6\x35\x14\x24\xdb\x0d\xce\x9a\xfe\x7f\x01\x62\x07\xc1\x67\xc1\x95\xb3\xec\x81\xdc\xbb\xc8\x8f\xd6\x82\x3f\xdb\xca\x78\x55\xad\xf1\xf3\x58\x72\xd6\xb7\x4f\x39\x21\xa7\xbe\x51\x7a\xb0\x9b\xef\x23\xff\x58\x78\x7c\xa6\x0b\xbe\xf8\x5b\xc3\x73\x4b\xf4\x6b\x4d\xda\xaa\x38\x36\xba\x8b\x6e\x3f\xfe\x27\x99\x43\xfb\x2f\x00\x00\xff\xff\xbf\x4d\x50\xca\x65\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcf\x8e\xe3\xc6\xd1\xbf\xcf\x53\x94\xe9\xab\xab\xd4\x7f\xd9\xa4\x2d\xe9\xc3\x7a\x3e\x07\x0a\xb0\x83\x04\xd8\xf5\x20\x39\x52\x54\x8f\xc8\x5d\x52\x94\x49\x8a\x33\xa3\x63\x0c\x23\xb7\x24\x27\x23\x08\x7c\x48\x82\x20\xc8\x2d\x01\xe2\x04\x86\xf7\x90\x97\xd9\x9d\x64\xdf\x22\xe8\xa6\xa4\x91\x34\xda\xf5\x22\xb0\x31\x18\xa9\xab\x58\x5d\x55\xbf\x5f\x55\x51\xdd\xc3\xf7\xfe\xff\x27\xe7\x4f\x7f\xfe\xd3\x4f\x20\x6b\xcb\x62\x7c\x36\xdc\x7c\xbd\x87\x08\xaf\xfe\xf4\xf5\xeb\xcf\xff\x02\x88\x4e\x6d\x93\xd9\xf8\x6c\x58\xda\x36\x81\xac\x6d\x97\x68\x3f\x5b\xe5\xdd\x28\x38\xaf\x16\xad\x5d\xb4\xf8\xf4\x76\x69\x03\x48\x7b\x69\x14\xb4\xf6\xa6\x1d\x38\x57\x1f\x41\x9a\x25\x75\x63\xdb\xd1\xa7\x4f\x7f\x84\x51\x00\x83\x53\x5e\x7e\x86\x9f\x3e\xc2\xf3\xaa\x5c\x26\x6d\x3e\x2d\xf6\x1d\xfd\xf8\x93\x91\x9d\xcd\x6d\xf0\xb6\xd8\x8f\x93\xc5\x7c\x95\xcc\xf7\xb7\xa5\x8b\xdd\x8e\x45\x52\xda\x51\xd0\xe5\xf6\x7a\x59\xd5\xed\x9e\xcd\x75\x3e\x6b\xb3\xd1\xcc\x76\x79\x6a\xd1\x0b\x1f\x40\xbe\xc8\xdb\x3c\x29\xb0\x49\x93\xc2\x8e\x38\xb1\x0f\xa0\x4c\x6e\xf2\x72\x55\xee\xab\x56\x8d\xad\xbd\x9c\x4c\x0b\x3b\x5a\x54\x3d\xaa\x22\x5f\x3c\x87\xda\x16\xa3\xa0\xc9\xaa\xba\x4d\x57\x2d\xe4\x69\xb5\x08\x20\xab\xed\xd5\x28\x18\x34\x6d\xd2\xe6\xe9\xe0\x2a\xe9\x9c\x9a\x96\x8b\x79\x30\x3e\xeb\x99\xbe\xfb\xf2\x6f\xf0\x71\x55\xb5\x4d\x5b\x27\x4b\xb8\xfb\xfd\x37\xaf\xfe\xf5\x39\x9c\x3f\x79\x02\x77\x5f\xfe\xf2\xe5\x8b\x7f\xf6\x25\xd8\xf3\xdf\xde\x16\xb6\xc9\xac\x6d\x8f\x9d\xa7\x4d\x33\x98\x6e\x1d\x51\x99\x2f\x28\x6d\x9a\xff\xeb\x46\x3c\x78\x47\x07\x8d\x2d\xae\xfc\xc7\x66\xa3\x70\x39\x9e\x0d\x9b\xb4\xce\x97\x2d\x34\x75\x7a\x6f\xfa\xac\x19\x3c\xfb\x6c\x65\xeb\x5b\xe4\xc4\x39\x31\x1f\xee\xd9\x26\xda\x70\xd0\x6f\x19\xbf\x71\xef\x61\x9a\x0f\xf7\x9d\x0d\xdb\xbc\x2d\xec\xf8\xee\x17\x7f\xfe\xcf\x5f\x5f\x0c\x07\xbd\x74\x50\xd4\xe7\xf6\xf6\xba\xaa\x67\xcd\x5e\x51\x7b\xeb\xa3\xe2\xcf\x6c\xef\x34\x77\xd5\x78\x68\x7a\x36\x1c\xf4\xed\x7d\x36\x9c\x56\xb3\x5b\xf7\xdd\x74\x73\xb8\x29\x8b\x45\x33\x0a\x5c\xc7\x7d\x38\x18\x5c\x5f\x5f\xd3\xb5\xa4\xaa\x9e\x0f\x04\x63\x6c\xd0\x74\xf3\x00\x3c\x8f\xa3\x60\x96\x37\xcb\x22\xb9\xfd\x10\x16\xd5\xc2\x7e\x14\x8c\xcf\x00\x86\xcd\x6d\x39\xad\x0a\xc8\x67\xa3\x60\x87\x34\x00\xd7\x86\x1f\x57\x37\xa3\x80\x01\x03\xce\x23\x88\x95\x37\x07\xd8\xa0\xdd\x75\xc1\x0e\xb0\x7f\xb8\x4c\xda\x0c\xae\xf2\xa2\xc0\x7a\xe5\x22\xda\xce\x2e\xaa\xd9\x2c\x80\xb4\xc8\x97\xc7\xba\xd9\x28\xb8\x10\x8a\x34\x8b\x81\xa5\x18\x92\x91\x12\x18\x72\x4e\x86\x6b\xd0\x14\xc5\xd2\x09\x2a\x16\xc0\x05\x89\x48\x91\xe0\x0a\x42\xe2\x0a\x89\x85\x0a\xb8\x22\x16\x0b\x14\xc4\xc2\x10\x04\x23\x6d\xcc\x79\x44\xb1\x92\x20\x63\x92\xa1\x73\xa1\x95\x01\x25\x49\x45\x1a\x18\x28\x45\x8c\xab\x4e\x53\x6c\x44\xea\x9f\x91\x16\x31\xf4\x5b\x14\x85\x2a\x06\xce\x28\xd6\x1c\x38\x27\xae\x25\x08\x62\x4c\x40\xe8\xb7\xbb\x04\x5c\x44\x25\x0d\x1c\x44\xe4\x82\x4c\xac\x20\x8a\x88\xb3\x10\xb8\x21\x63\x42\x88\x15\x38\x60\x1c\x62\x35\x89\x25\xe9\x74\x03\x0e\x3c\x38\x85\x1e\x1c\x78\x70\x1c\x7b\x70\xe8\xd0\xa1\x43\xe7\xc0\x61\x0f\xae\x0f\x85\x7d\x28\x9f\x4f\x8c\x21\x69\xa6\x40\x93\x8c\x43\xe4\x8c\x42\xa1\x7c\xda\xca\x93\xc5\xb5\xec\xb0\x47\x88\x1e\x22\x3a\x8c\x18\x51\x2c\x15\x7a\x8c\x78\x60\x8c\x1e\x23\x3a\x8c\x0a\x5d\x1e\xd8\x63\xc4\xfd\xc0\xe7\x9c\x69\xcf\xbd\x4b\xdb\x45\x63\x24\x3c\x1a\x07\x0d\xd8\xc4\xd7\x30\x5a\x5f\x44\x0c\xb4\xa1\x28\x94\xe7\x11\x83\x30\xa4\x30\x94\x60\x24\x29\x19\x82\x11\x10\x0a\xd2\x4a\x82\x11\x13\xa5\x12\x01\x02\x18\x30\x8e\x02\xc5\xa5\xb8\x97\x05\x8a\x8c\x47\x2e\x83\x34\x26\x16\x79\xca\x34\x31\xa5\x40\x91\xeb\x83\x7e\xcd\x05\x29\xa3\x80\x39\x16\x98\x40\x57\x57\xc7\x01\x53\x31\xc6\xc4\xb9\xaf\x63\x14\x75\x24\x8c\x39\x37\x9a\x24\x37\xa0\x42\x92\xae\x4c\x0c\x34\x27\xc1\x61\x97\xeb\xfa\x22\x64\xa4\x05\x07\x11\x91\x54\x13\x15\x53\xac\xa2\x8e\x2b\xc7\x58\x16\x51\xcc\x5c\xf1\xa2\xc8\x45\x73\x6c\x47\x28\xc8\x18\xb1\x59\x1b\x32\xc2\x00\xf3\xcc\x4a\x94\x24\x42\x85\x86\x04\x33\x18\x93\x03\xe3\xd7\xeb\x8b\xde\x29\xa8\x98\x44\xc7\x43\x52\x3a\x9a\x84\x8c\x62\x9e\x1a\xe2\xa1\xe9\x3d\xc7\xa1\x2b\x40\x64\xc2\xad\x10\x91\x88\x38\x30\xd4\xa4\x58\x88\x92\x62\x26\x31\x22\x6e\x22\x3f\x14\x42\xf7\xc2\x26\xe1\xb5\x7b\x23\xb9\xe1\xf3\x33\x3d\xe8\x87\xfa\x78\xbe\xb3\xaa\xb4\xc7\xa3\x1d\x02\x0f\x83\xfd\xe1\x75\x43\x19\x91\xd4\x0a\x38\x71\x15\x26\xa4\x5d\x8d\xdd\x1f\x92\x61\x11\xb0\x02\x43\x08\x1f\xdd\xab\x81\x93\x06\x43\xba\x33\x7b\xb6\xe0\x96\x99\x22\x7d\xa8\x43\xd2\x1d\xaa\x4c\x74\xea\xd8\x76\xc2\xd5\x09\x53\x73\x10\x9e\xab\x10\x5d\x66\x8f\xb9\x04\x4d\x26\x96\x97\xe2\x20\x00\xfa\x5d\x19\xf2\x43\x1d\xe9\x8e\x93\x88\xe5\xe3\x3d\x58\xeb\x0b\x41\x1a\xb8\xba\x34\x64\x98\x29\x34\x69\x37\x2e\xb0\xf9\xbf\xe4\x6a\xc2\x59\x87\xea\x84\x73\xf9\xc0\xb9\x9a\x08\xd2\xeb\x60\xf0\x36\xea\xdb\xc4\x1f\x17\xde\x81\x7b\x06\x62\x3b\x0d\xc0\xc1\xcf\xc3\x81\x02\x44\xb7\xaf\x40\x01\x62\x72\x20\xbb\x81\x5a\x97\x5c\x83\xc8\x50\x75\x32\x53\x97\x6a\x5d\x32\x50\x5b\x29\xda\x93\x64\xc2\x81\x6f\xcb\x88\xbc\x43\xb1\x2e\x51\x83\xec\x50\x4e\x42\x67\xed\x45\xe6\x44\xde\x89\x7d\x63\xe0\x99\x5c\x97\xa8\x50\x39\x97\x13\xde\xc9\x75\xc9\xbc\xa0\x7a\x41\xa3\xec\x83\x4f\xc2\x75\xa9\x40\xf5\xfe\x2e\xa3\xef\x20\x6a\x69\xab\x65\x61\x31\xcd\xeb\xf4\x1d\x09\xe3\x1c\xc2\x44\x82\xec\xb3\xc2\x10\x18\xf4\x92\x93\x43\x60\x9b\x80\x6f\xfb\x71\xea\x79\x8f\x92\x08\xa2\xde\x8b\x0b\xc5\x1e\xf5\x22\xf3\xa0\xa3\x75\x19\xa1\x49\x0c\x98\x4d\xe9\x35\xa9\x30\x72\xaf\x70\x69\xce\x25\x09\x25\xdc\x5a\x88\x10\x14\x45\x4c\x03\x67\x10\x01\x67\x8d\x22\xa3\x0d\xb8\x27\xae\xb3\xdc\x16\x41\xd2\x3c\xda\xf9\x71\x56\xdf\x41\xc9\xbc\xce\x67\xef\xc6\x04\x08\xd2\x8f\xdc\x38\xf2\x4d\x87\x7a\x8d\x2b\xd5\x91\xd6\xfd\x96\xe8\xee\x58\xeb\xfa\xda\x64\x78\xac\xf6\x0f\x3a\x94\xfd\xcc\x88\x07\xfd\x2f\x1f\xcc\xbd\x3c\x31\xca\xf2\xd4\x2c\xad\xcb\xd0\x69\x8f\x03\xb2\x93\x49\xbb\x96\x3e\x91\x35\x97\xa7\xd3\x8e\xb7\x69\x97\xdc\x87\xfb\x5e\xf3\xbe\xe8\xb3\x3c\x41\x76\x7c\x82\x6c\x67\x7a\x92\x6d\xae\x4f\xd1\xed\x10\xfd\x50\x89\xbf\x99\xf0\xd8\xbd\x0d\x0e\xd5\xbd\xd4\x1d\xe9\x71\x23\x9d\xa2\xfc\x87\x4c\xfd\x78\x4a\x86\xee\x6c\xeb\x0e\xc1\xee\x50\x6c\x6b\x48\x8b\xa4\x69\x46\xc1\x12\x25\x4c\xe7\x38\x4b\xea\xe7\xe0\xae\x77\x78\x9d\xe5\xad\x85\x72\x8a\x72\x3b\x31\xb3\xbc\xdb\x5a\xbb\x53\x76\x92\x2f\x6c\xbd\x79\x76\xf8\x74\x86\x57\x85\xbd\x01\xf7\x81\xd7\xee\xca\x93\x14\xf9\x7c\x81\x79\x6b\xcb\x06\x53\xbb\x68\x6d\x0d\xcf\x56\x4d\x9b\x5f\xdd\xe2\xe6\xbc\xfe\x26\x75\x31\xc7\xa6\x4d\xea\x76\x17\x07\x60\x98\x6c\x2f\x35\xc1\x51\xc0\x13\x61\xca\x29\x0a\xf7\x51\xcc\x91\xed\xe3\xf2\xcb\x99\x4d\xab\x3a\x71\xf7\x06\x74\x47\xfb\xbd\x18\xee\x55\xd2\xcd\xb7\xee\xa7\x39\x94\x16\x45\x00\xfd\x9d\x32\x50\x2c\x80\xcc\xe6\xf3\xac\x1d\x05\x52\x04\x50\x57\xee\xbd\x98\x97\xf3\x00\x92\x3a\x4f\xb0\x48\xa6\xee\x1a\xb6\x3b\xec\x07\xe3\xe1\xaa\xb1\x70\xe3\x6e\x68\x1f\xf6\xb9\xbf\x7f\x7f\x6b\x18\x8c\x37\x25\xd9\x85\x1e\x24\xe3\xb3\x7b\x69\x55\x6c\xf3\x58\x24\x1d\xa4\x55\x81\x5c\xf8\xaf\x62\x8e\xc9\xaa\xad\x5c\x6e\xbb\xa5\x83\xfb\x06\x6a\xcb\x29\x96\x33\x64\x87\x28\x8b\x7c\xbc\xe3\xf3\xfd\x60\x2f\x10\xfa\xeb\xe4\xf2\x06\x45\xcf\x55\x63\xd3\x6a\x31\x4b\xea\xdb\x60\xfc\xf2\x9b\x17\xaf\xff\xf0\x0f\x97\xe5\x70\x50\xe4\xff\x9b\x3b\x5f\x85\x60\xfc\xfa\x77\xbf\xbe\xfb\xea\xdb\xd7\xbf\xfd\xc2\xdf\x01\xbf\x07\x87\xaf\xbe\xf8\xfb\xcb\x6f\x7f\xf5\xd0\xd5\x70\xb0\x2a\xf6\x49\xbd\xaa\xea\xf2\xbe\x99\x1f\x52\x3a\x45\xb9\x6b\x9b\x9e\x5f\x79\x48\x5c\xbe\x58\xae\x5a\x68\x6f\x97\x76\x14\x34\x36\xa9\xd3\x6c\x97\x9d\xf3\xed\xc9\xaf\xab\x02\xf6\x05\x3f\x5d\x01\x2c\x8b\x24\xb5\x59\x55\xcc\x6c\x3d\x0a\xee\x7e\xf3\xd5\xbf\xbf\xfe\x23\x11\x1d\xf6\xce\x93\xde\xe5\x3e\x00\xe7\x69\x37\x6d\x83\x59\xde\x6d\xc6\x72\xbb\xec\xaf\xb9\xb6\x1e\xff\x37\x00\x00\xff\xff\x16\x0b\x04\x63\xf5\x11\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xcd\x6e\xe4\x44\x10\x3e\xef\x3c\x45\xa9\xb9\xad\xd2\xf1\x24\x1b\x24\xb4\xeb\xb1\x84\x10\x3f\x07\x90\x90\x58\x89\x73\xd9\xae\x71\x37\x29\x77\x5b\xdd\xd5\x33\x19\xa2\x48\x9c\xe1\x29\x78\x08\xa4\x3c\x50\x2e\xbc\x05\xb2\x3d\x9e\x78\x66\x93\x65\x0f\x39\xc0\xc5\x6e\xbb\xfe\xbf\xaf\xaa\xd4\xb7\xb7\x42\x6d\xc7\x28\x04\xaa\xc4\x48\x99\x21\xac\x29\x28\x38\xbf\xbb\x5b\x2c\x16\x79\x6d\x37\x50\x31\xc6\xb8\x52\x95\x77\x82\xd6\x51\x50\xc5\xe2\xf6\x36\x7b\x0d\x51\x30\x08\xbc\xce\xee\xee\x16\x00\x73\xcd\xe0\xb7\xd0\xe8\xcf\x55\xb1\x00\x38\x96\x54\x9e\x75\x5b\xeb\x2f\xf6\x22\x18\x9f\xc7\x3a\xb5\x5e\x33\xdd\x40\xff\xd0\x95\xe7\xd4\x3a\x40\xb6\x8d\xd3\x56\xa8\x8d\x3a\x4a\x20\xa9\xcc\x28\x8f\x26\x58\x77\xad\x97\x50\x36\x7a\x6b\xac\x90\x82\x28\x3b\xa6\x95\xda\xda\x5a\xcc\x5b\xc0\x24\xfe\x9d\x2a\x16\xaf\x5e\x0d\xe1\xf6\xef\x79\x38\xb6\x51\x74\x13\x7c\xea\xe0\xf1\xa8\xd7\x9c\xa2\x81\xd2\x87\x9a\x82\x2e\xbd\x88\x6f\x21\x56\xc1\x33\x63\x20\x3c\x38\x04\xc8\x11\x4c\xa0\xf5\x4a\x7d\xa6\x3e\xf4\x38\xa4\x0c\x27\xdf\x1a\x2b\xb1\xde\x41\xff\xda\x10\x74\x3b\xfd\x06\xd8\x68\xb1\x8d\x11\x05\x18\x2c\xea\x2a\x85\x40\x4e\x56\x4a\x42\xa2\x59\xb0\x27\x81\xda\xea\x8b\xe5\xf2\x08\xa2\x8a\x9c\x50\x80\x5f\x52\x14\xbb\xde\xe9\x9e\x38\x72\xa2\x4b\x92\x2d\x91\x3b\xf2\x07\x90\x47\x09\xde\x35\x93\xd3\xb6\xd4\x17\xaa\xf8\xde\x46\x81\x11\x94\xa1\x84\xbe\x2b\xac\x6b\xf2\x6c\x54\x3e\xf5\xd0\x22\x73\xf1\x33\xd5\x79\x36\x1e\xe7\x09\x67\xb5\xdd\x3c\x57\x41\xdf\x0e\x17\x4b\xe8\x63\xc2\x60\xa9\x8a\x9f\x7c\x4b\xd0\x31\x56\x64\x3c\xd7\x14\x60\x9f\x3d\x58\x07\x08\x1d\x06\x6c\x02\x76\x06\x4a\x62\xbf\x05\x31\x34\xe5\x06\xe8\x6a\xa8\x51\xe8\xfc\x24\x64\x9e\xe1\x4b\xd0\x75\xcc\xd3\xff\x83\x93\xc9\x81\xd0\x8d\xe8\x36\x09\xd5\xaa\x78\x9f\x28\xfe\xf7\x79\x9a\x06\xf5\x51\x65\x7f\x1c\x47\x78\x9e\x9c\x2a\x26\xd1\x20\x71\xb8\x19\x87\x88\xb1\x24\x5e\xa9\x1f\xb1\x21\x70\xb8\xb1\x0d\x0e\x3c\xd2\x0d\xb6\x1d\x4f\x53\x95\xa7\x03\x48\x1d\x36\xd6\x8d\x3a\xa7\x2c\x8d\xe4\x1d\x48\xca\xd9\xce\x8c\x68\x6c\x9b\xda\x46\x2c\xb9\x47\x38\xc7\x23\x29\x5b\x77\xad\x8a\x87\xfb\xdf\x1f\xee\x7f\xfb\xfb\xcf\xbf\xfa\x32\xf3\x8c\xed\xc7\x9c\x3d\xed\xe3\xd0\xb9\xc5\xc3\xfd\x1f\x4f\x39\xcb\xb3\x34\x70\x9a\x67\x0e\x7b\x3c\x66\x08\x3e\xb7\x89\xaf\xa6\x4d\x7c\x24\xec\x7c\xb4\x3d\x10\x3a\x8a\xad\xae\x77\x87\xa5\x2a\xbe\x7b\x0b\x97\x81\xda\x77\x07\xb3\x13\x43\x7d\xd5\x77\xc9\x9b\x7e\x1f\x73\x3f\x28\x10\x7c\x72\x75\x8f\xca\x62\xd6\x9c\xe6\x6a\x32\x58\x47\xd1\x56\x90\x6d\xa5\x8a\x2f\x4b\x9f\x24\xcf\xcc\xd5\x91\x6e\x37\x9b\x82\xa5\x2a\xbe\x4a\x51\x7c\x6b\x7f\x25\x10\x63\x23\x44\x1a\xa7\x53\x3c\x08\x31\xc3\xce\xa7\x00\x1b\x1b\xad\xf8\x10\x01\x81\xad\x08\x13\x94\x56\x00\x7b\xf7\xa3\x42\x97\x4a\xb6\xd5\xc0\xf5\x19\x6c\x83\x15\x0a\xf1\x6c\xea\xe0\x33\xf0\x01\xa2\x6f\x49\x4c\xdf\xae\xc4\x91\x80\x9c\xd8\x40\xbc\x3b\x87\xf7\x5e\x90\x79\x07\xa9\xeb\x63\xee\x7c\x3a\xcf\xb3\x6e\x06\xc6\x0c\xee\x27\xc0\xf9\x24\x18\x42\x65\xec\xa6\x1f\xd2\x13\x24\x3c\x1f\xad\xac\xe4\x06\x56\x6a\x18\x81\x99\x69\x0e\x4d\x55\xcc\x56\x5d\xf1\x03\x86\xca\xc0\xe5\xf2\xf2\xe2\xb1\x63\x3e\xa6\xff\x0d\x95\x21\x61\xd8\x3d\x6b\x92\x67\x9e\x5f\xb4\xea\xaf\x39\xd2\xd6\x50\xa0\x4f\x2d\xfb\x5f\x2a\xfe\xd6\xca\x77\xa9\x7c\x3e\xf5\xd3\xdc\x3f\xf8\x38\x1c\xa7\xe2\x86\x3b\x0f\xb9\x7a\xbc\xf1\x3c\xfe\x3d\xb9\x40\xad\xbd\x97\xfd\x05\xea\x9f\x00\x00\x00\xff\xff\xfb\xee\xb4\xc1\x5d\x09\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x8f\x14\xb9\x11\x7f\xdf\x4f\x51\x9a\x48\x07\x39\xcd\x6c\xc3\xee\x46\x49\xa0\x69\x09\x16\x08\x87\x80\x4b\xb4\x8b\x78\x76\xb7\x6b\xda\xd6\xba\x6d\xc7\xae\x9e\x61\x40\x48\xf7\x21\xf2\x92\xaf\x77\x9f\x24\x2a\x77\xcf\xbf\x9e\x99\xdb\x3d\x76\x1f\x0e\x85\x87\x85\x19\xbb\xec\xaa\xfa\xb9\xfe\xb9\x3c\x9f\x3f\x13\x36\xde\x08\x42\x18\x95\x22\x62\xa6\x50\x48\x0c\x23\x38\xfe\xf2\xe5\xe8\xe8\xe8\x28\x97\x7a\x06\x95\x11\x31\x3e\x19\x55\xce\x92\xd0\x16\xc3\xa8\x38\xfa\xfc\x39\xfb\x11\x22\x89\x40\xf0\x63\xf6\xe5\xcb\x11\xc0\x26\x65\x70\x73\xa8\x27\x7f\x19\x15\x47\x00\xdb\x33\x95\x33\x93\x46\x4e\xfe\xd6\x4f\x01\xe4\xea\x74\x39\xe7\xcb\xc9\x19\x34\xfc\xcf\x34\xd2\x44\x93\x30\xba\x82\xd2\x05\x89\x61\x52\x3a\x22\xd7\xac\x56\x01\xbc\x0c\xae\x01\x52\x08\x2f\x75\x40\xe5\x22\x2e\xf7\xcb\xd4\x69\x71\xb4\xfc\x22\x02\xe9\xca\xe0\x92\x43\x69\x5c\x3d\xf1\x2e\xd2\xc6\x46\xb9\x3a\xd9\x99\x9e\x90\x26\x83\xa3\xe2\x42\x34\xde\x20\xf0\x38\xf0\x78\x9e\xa9\x93\x8d\x95\x7e\x77\x61\x83\x24\x46\xc5\x6b\x61\x5b\x11\x16\xf0\x70\x0c\x27\x0f\x4e\x1e\x42\xb9\x80\x5c\x80\x0a\x38\x7d\x32\xfa\xd3\xa8\x78\x2b\xc2\x55\x9e\x89\x22\xcf\xfc\x4a\x54\xde\xae\xb8\x54\x3a\xae\xb9\x41\x54\x6e\x1e\x41\xc0\x14\xe7\x20\xf5\x74\x8a\x01\x2d\x01\x2d\x3c\x46\x70\x53\xe0\xf3\x48\x03\x4a\xd0\xaf\xbf\xfc\x37\x42\x6c\xbd\x77\x81\x50\x82\xb0\x12\x22\x2d\x0c\x4a\x98\x6b\x52\xf0\xcc\x39\x8a\x14\x84\x3f\x86\x67\x22\xea\x8a\x37\x71\x75\x10\x5e\x2d\xc6\x60\x74\xa4\x38\x06\x12\xa5\xc1\x38\x06\xdd\x88\x9a\xff\xaf\x9c\xc4\x71\xda\xa9\x71\x01\x41\xf0\x9f\x31\x9b\x4c\x22\xe0\x47\x8f\x15\xa1\x3c\x4e\xaa\xac\x21\x0d\xc5\x8e\x5a\x3a\x42\x74\x0d\x82\x90\x52\x93\x76\x56\x18\xf0\x22\x88\x24\x04\x78\x23\x2a\x54\xce\x48\x0c\x4b\xb5\x8e\xe1\x27\x02\x25\x22\x94\x88\x16\xe6\x41\x13\xa1\x05\x72\x30\xd5\xc6\xa4\x93\x17\x33\xa1\x0d\x0b\x0d\xd1\x8b\x0a\x3b\xa5\x95\x9b\x03\xff\x09\x30\xce\xd6\x18\x20\x5a\xed\x3d\x12\x03\x46\xf8\x91\x40\x4c\xa7\x58\x51\x4c\x3b\xc4\x36\x04\xd7\x5a\xa9\x6d\xbd\x66\xfb\x01\xef\x19\x03\x01\x3d\x0a\x02\xcd\x0b\x7b\xc6\x57\x88\x3e\x2d\x93\xd8\x38\xcb\x70\xb2\x1e\x30\x35\x6e\xae\x6d\x3d\x86\xe8\xa0\x44\x70\x36\xd1\x18\xe7\xae\x5c\x4b\x30\x75\x01\x88\xf5\xc7\x8f\xa2\x22\x88\xa2\x41\x88\x14\x98\x63\x2f\xd1\x10\xbb\x93\xe2\x99\x71\xd5\xd5\xbf\x5b\x47\x18\x87\x16\xb7\xc2\x52\x58\xde\x71\x69\x9e\x3d\x39\x68\x0b\xa2\x62\xa9\x1e\x6d\x6f\xba\x41\xb2\x36\xd9\x7e\x64\xc3\x17\x12\x87\x7f\xf1\xa0\xec\xc0\xaa\x1d\x46\x50\x18\x70\x20\x64\xb6\x5e\xfe\xfd\xa4\xbf\xfa\xa4\x4f\x8b\x17\xfd\x11\x26\x17\xec\x42\xd7\x5d\xa0\x79\x8f\xa3\x46\x34\xba\x56\x64\x16\x8c\x54\x20\x0c\x30\xc3\x10\x59\x0d\x96\x46\x21\x38\x52\x18\x40\xe9\x5a\x99\x45\x02\x81\x34\xe9\x19\x42\xe9\xe4\xa2\x03\xb0\x8d\x6c\x07\x2a\xb8\xb6\x56\xae\xa5\x63\xd8\x63\x7c\xad\x4d\x01\x1a\x65\xd2\x61\x60\x76\xad\xd9\xb2\x2d\xa3\x8b\x97\x3a\x44\x4a\xa4\xa0\x09\x9b\x3c\x33\x7a\x48\x72\x81\x95\xb3\x72\x4d\xd3\x45\xb0\xd5\x29\x4b\x8c\x55\xd0\x9e\xa1\xd8\xb7\xfa\x52\xe9\xb0\xb9\x98\x1c\x54\xc6\x45\x4c\xe7\xdb\xd2\xf6\x92\x3c\xdb\x94\x30\xf7\xc5\x53\x2b\xbb\x33\xec\x94\xfc\x0d\xd5\xdc\x1f\x5e\x35\xf7\x1b\xaa\x81\xc4\xa9\xb6\xc9\x9e\xf6\x29\x27\xb7\x95\x93\x54\xbc\x5a\x78\x0c\x97\x6c\x14\x9c\xbc\x5a\x0f\x6f\x84\xad\x5b\x51\x23\xdc\x7f\x75\xf9\xf6\xcd\x9f\xf3\x4c\xd2\xf6\x1a\x59\x5c\xb2\x73\x2c\xc9\x3a\x5b\x72\xbd\x8e\x65\xe7\xc3\x49\x0a\x4c\xd6\xb8\x4c\x66\x6e\x0a\x02\x3e\x60\x09\x5e\xd4\x98\x67\x52\x0e\x25\x39\x17\xb1\x12\xc9\x8f\x2f\x38\xc1\xc1\x85\x42\xa4\x08\xf7\xcf\x2f\x2e\xf6\x4a\xf1\x7e\xc8\x38\x05\x14\xef\x51\x04\x61\x2b\x64\x86\xcc\xae\xe7\xbf\x8f\xe3\x6b\x31\x13\x17\xe9\x60\xe0\xfe\xeb\xfd\x4c\x58\x55\x1f\x38\xa3\x36\x0d\x8b\xb6\xa3\x76\xd9\x6a\x23\x41\xc8\x19\xf3\x94\x89\x63\xd4\x84\x31\xc1\x20\xbc\x37\xba\x4a\x31\x26\x6e\x0b\x90\x67\x9b\x47\xc1\xb9\xe1\x27\x6b\x18\x32\x06\x1d\xd0\x60\x83\x96\x76\x93\x44\x9a\xed\xc0\x8d\xbd\x79\x75\x76\xc3\xe8\xae\x62\xa9\xee\xb6\x22\x51\xc7\x31\x08\xa8\x1c\x3b\x34\xe1\x8a\x72\xae\x74\xa5\xa0\x12\x96\x83\xdd\x94\xa3\xe7\x32\xe4\xad\x8a\x19\x45\xe4\xe3\xa3\x2c\x93\x38\x43\xe3\x3c\x86\xe3\xc6\x7d\xd2\xc6\x88\x63\x17\xea\x0c\xed\xe4\xfd\x45\x26\x5d\x15\xb3\x0f\x58\x66\x2c\x55\xf6\xa2\x93\x79\x54\xbc\xed\x08\xe1\xf9\x72\x29\xbc\x43\x9a\xbb\xae\x32\x3a\xbe\x2e\x8e\xe4\x91\x82\xb3\x75\x71\xe9\xa0\x74\xa6\xcb\x56\x79\xd6\x0f\x8e\x19\x76\xc8\xb9\x80\x59\xa6\xbb\xe5\x81\x4c\xbc\x11\xda\xa6\xe8\x96\x22\x1f\x87\x48\x0c\x13\x0e\x71\x38\x2a\x7e\x30\xf4\xb8\xdb\xe3\x87\x9a\x1e\xe7\x19\xef\xc0\xb2\xec\xfa\x62\x8e\x0d\xf3\xee\x8a\x54\xfd\x09\x7b\x01\xb0\xb9\x1d\x73\x6c\xae\x63\xfc\xb4\x2c\x03\xce\x74\x67\x2c\x5c\xbb\x5d\xf1\x71\x94\x65\x80\x54\xb3\x3e\x19\xed\xf5\x54\xc1\x0c\x18\xff\x3c\x63\xda\x82\x73\x42\x6b\xe4\x6d\x44\xe5\x7d\x36\x84\x1d\xf7\xb1\xcc\x82\xf3\x7d\x9a\xfa\x8a\x8d\x93\x0e\xfd\x8e\x20\x88\x82\x2e\x5b\xc2\x3e\xb5\x22\x4c\x5b\x63\xc0\xab\x20\x22\xee\x05\xe7\x5c\xd3\x36\x30\x95\x26\x2c\x7e\xfd\xe5\x3f\x09\x0b\xf8\x99\xc8\xe5\x59\x1a\x1b\xdf\x01\x02\xbc\xd1\xb5\x76\x22\xd1\x14\xcf\x91\xfd\x4a\xe6\x19\x7f\xe9\x52\xeb\xed\xb9\x4b\x34\x1b\xcc\x53\x1c\xc9\xb5\x8d\x85\xb6\x11\x43\xe2\xc6\xdf\xee\x8a\x9b\xb6\xf1\x3a\x55\x2f\x5a\x8f\xa1\x4b\x60\x90\xc7\xd6\x17\xbd\x4f\xb6\xbe\x60\xce\xf1\xab\x1d\xb2\xf5\x43\x45\x63\x5b\xae\x19\x95\x2b\x46\xe5\x6d\x19\x95\x87\x75\xdc\x29\x15\xde\xba\x2e\x4a\x92\xc2\x88\xab\x50\x9c\xae\x49\xfd\xcd\xab\x5c\x40\x19\xdc\x3c\x62\x88\x9d\x73\xf0\x3d\xae\x71\x52\x4f\x97\xc1\x9e\xe3\xa9\x6b\x03\x17\x74\x7b\xae\x01\xaf\x30\xe5\xb9\x83\x57\x80\xef\x45\xf6\xcd\x8a\xec\x8b\xb6\x9c\xa8\x15\x96\x77\x54\x62\xff\x3f\x62\xe9\x03\x16\xc9\xb7\x56\xf7\x96\xe4\x68\xe9\x2e\xd8\x7b\x4d\x9e\x31\xd1\x1f\xf9\x12\xb3\xa1\x52\x9e\xf5\xfd\xa1\x3b\x6b\x18\x3d\xb5\x9d\x40\xbf\xbb\x63\xf4\x1c\x2b\x6c\x4a\x0c\x70\x72\x9a\x7a\x46\x0f\x86\x3d\xa3\xd7\xa2\x72\xe5\xe1\xa6\xd1\x77\x13\xbe\x99\x09\xef\xeb\x5b\x24\x14\xdf\x74\xfa\x74\x3d\x92\x55\xdb\x63\x0c\x8d\x58\x94\xd8\x85\xef\x04\xf0\xb2\xf0\xc4\xc6\x2b\x11\xf5\x27\x1c\xd4\x9e\xa0\x3b\x09\x1b\x2d\xa5\x49\xb7\x0b\x3d\x94\xe1\x7b\xf3\xe4\x6e\x9b\x27\xa9\x71\xb9\x13\xd9\xf9\xbe\x2b\x9d\xbd\x97\xf6\xae\x91\x40\x94\xcc\xa8\xeb\x72\xf6\xa7\x14\x31\x39\x69\x1c\x5c\x7f\x13\xcd\xd2\x53\xd3\x97\xed\x1e\x19\x71\x36\xd9\x1c\xe1\xb1\xb0\x3d\x90\xc8\x8a\x77\xa2\xc1\x3c\x23\xb5\x6f\xee\xbd\x9f\x75\x1d\xbe\xfd\xd3\xcf\xdd\xdc\x1e\x20\xc8\xb3\x6d\x6e\x4c\x31\x90\x28\x27\x8e\x80\x37\x90\x51\x16\x4f\x8d\xae\x58\x48\xb9\x6f\xf2\xe1\x83\x83\x33\x0f\x77\x67\x86\x82\x1d\xe4\xf9\x8c\x63\xd9\xfe\x7d\xcf\x0e\x4d\x9c\xde\x82\xdf\xb9\x12\xc1\xe8\x83\x5a\xfe\xf5\xd0\xc4\xdf\xaf\xe7\x99\x67\x3b\x50\xe7\x34\x75\x8e\x6e\x24\xd8\xa5\x23\x61\xe2\x21\xf6\x27\x7b\x30\xee\x67\x6e\x80\x46\x9e\x0d\xe4\xc8\xb3\x64\xcc\x77\x94\x3e\xbe\xc5\xfc\xfc\x0e\xe7\x30\x45\x41\x6d\xc0\xdf\x9d\x99\x1f\x9e\xed\xcf\xcc\xe7\x2a\xe8\xf8\x3d\x33\xdf\x36\xa0\x7f\x73\xbd\xe2\x6f\xcb\x71\xac\x98\x6d\x5b\xb8\xa8\xb5\x4d\x07\x39\x02\x11\xb4\x98\x18\x51\xa2\x79\x32\xfa\xe7\x7a\x7c\x43\x5b\xb1\x5a\x4b\x16\x4a\xb2\x13\xd7\x92\xd1\x16\x27\x3e\xe8\x46\x84\xc5\x68\xed\x0e\x3f\xb3\xba\xec\x0e\x37\x58\x1d\xd3\xf1\x89\xb0\x00\xa9\x23\x5b\xb4\x4c\x2e\xba\xb5\x3e\xcf\xac\x98\xf5\x7a\xe4\x99\xd4\xab\xcf\xbb\xaf\xca\x67\xeb\x57\xe5\x8d\x49\xef\x62\x3a\x9a\x49\x24\x5d\x5d\x2d\x46\xdd\xf5\xfc\xc9\x88\x9c\x7f\x04\x27\x01\x9b\xc7\x9b\x9a\x6e\x2e\xec\x9e\xa3\x4f\xa1\xac\x27\xe9\xb4\x20\x39\x0d\x0b\xb9\x69\x48\xea\x6c\xb9\x60\xfd\x6c\x3d\x2a\x9e\x96\xc9\x82\xd4\xd9\x76\x9d\xb9\x24\x6d\xca\xc9\x83\x51\x71\xde\x46\x72\x4d\x6a\x1f\xb2\x31\x45\x4c\x6f\x77\x6c\x87\x84\xc6\xc0\xc2\xb5\x01\x66\x3a\x6a\x72\x21\xf5\x71\x35\x91\x41\x28\xf5\xb2\x98\x49\x04\xbe\x2d\x97\xdd\xe3\x71\x8a\x17\x18\xd2\xeb\x6d\xb2\xb7\x31\xb8\x90\x2c\x94\x14\xbb\x1e\x9a\x88\x80\x96\x74\x40\xb3\x38\x86\x94\x7d\xcc\x02\x5a\xcf\x3c\x17\xae\x1d\x56\xaa\x6b\xb8\xf7\x80\x73\x23\x18\x42\xa5\xf4\x2c\xbd\x63\x6e\x23\xe1\xcc\xaa\x41\xa3\x23\x4d\x5a\xdb\x37\x4d\x3a\x60\xb6\xf3\x9a\xd1\xc5\xe0\xf9\xbc\x52\xe9\x61\xbd\x8b\xba\xdb\x8e\xbd\x4b\xff\x12\xcb\x90\x9e\xe3\x0f\x2d\x19\xbc\x95\xdc\x5e\xeb\x17\x26\xe2\x9c\xef\x0f\x37\x55\xfb\x1a\x8d\xff\xa1\xe9\x55\x5b\x1e\x16\x7d\x28\xfb\xce\x97\xd5\xc7\xa5\x72\xe9\xf7\x1b\x68\x65\xf7\xeb\x8d\xf5\xe8\xe0\xd7\x20\x5c\x3f\xf4\xbf\x06\xf9\x5f\x00\x00\x00\xff\xff\x94\xcd\x8b\x2a\x2a\x22\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl":  baseFooterTmpl,
	"base/header.tmpl":  baseHeaderTmpl,
	"home.tmpl":         homeTmpl,
	"page/content.tmpl": pageContentTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
