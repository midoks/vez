// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x8f\xdb\xc6\xd5\xbe\xd7\xaf\x38\xe1\x7b\x63\x03\x99\xa3\xf9\xe2\x90\xf4\x4a\x7a\x61\xaf\xdd\x2a\x85\xd7\x69\x11\x7f\x24\x08\x82\x62\x44\x8e\x44\xae\xf9\xa1\x90\x14\x77\x57\x9b\xbd\x69\x10\xf4\xae\xed\x55\x50\x14\xb9\x68\x8b\xa2\xe8\x5d\x0b\x34\x2d\x82\xe4\xa2\x7f\x26\x71\xeb\x7f\x51\x0c\x29\x69\x25\x59\x76\xf6\xa2\x81\xe1\xd5\x9c\xc3\x33\xcf\x39\xcf\x33\x73\x86\x1f\x83\xb7\xee\xbf\x7b\xfc\xf8\x83\x9f\x3e\x80\xb8\xce\xd2\x51\x6f\xb0\xfa\x79\x8b\x10\xf8\xee\x4f\x5f\xbe\xfc\xf4\x2f\x40\x88\x75\x1b\x1d\x8d\x7a\x83\xcc\xd4\x1a\xe2\xba\x9e\x13\xf3\xf1\x22\x69\x86\xce\x71\x91\xd7\x26\xaf\xc9\xe3\x8b\xb9\x71\x20\xec\xac\xa1\x53\x9b\xf3\xba\x6f\xa1\x8e\x20\x8c\x75\x59\x99\x7a\xf8\xe4\xf1\x8f\x88\xef\x40\xff\x10\xca\xfb\xe4\xc9\x5d\x72\x5c\x64\x73\x5d\x27\x93\x74\x1b\xe8\x9d\x07\x43\x13\xcd\x8c\xf3\xa6\xdc\x0f\x75\x3e\x5b\xe8\xd9\xf6\xb4\x30\xdf\xcc\xc8\x75\x66\x86\x4e\x93\x98\xb3\x79\x51\xd6\x5b\x31\x67\x49\x54\xc7\xc3\xc8\x34\x49\x68\x48\x6b\xbc\x0d\x49\x9e\xd4\x89\x4e\x49\x15\xea\xd4\x0c\x19\xd2\xb7\x21\xd3\xe7\x49\xb6\xc8\xb6\x5d\x8b\xca\x94\xad\xad\x27\xa9\x19\xe6\x45\xc7\x2a\x4d\xf2\xe7\x50\x9a\x74\xe8\x54\x71\x51\xd6\xe1\xa2\x86\x24\x2c\x72\x07\xe2\xd2\x4c\x87\x4e\x7f\xaa\x1b\x6b\xe3\x3c\x9f\x39\xa3\x5e\x27\xf1\x8b\xcf\xff\x06\xf7\x8a\xa2\xae\xea\x52\xcf\xe1\xc5\xef\xbf\xfa\xee\x5f\x9f\xc2\xf1\x7b\xef\xc1\x8b\xcf\x7f\xf9\xed\x37\xff\xec\xb4\xdf\x02\xae\x2f\x52\x53\xc5\xc6\xd4\x1b\xd4\xaa\xd6\x75\x12\xf6\xc3\xaa\xea\x4f\xd6\x40\x98\x25\x39\x86\x55\xf5\xff\xcd\xf0\xf2\xf2\xde\x22\x49\xa3\xe3\x22\xcb\x92\xfa\xea\xca\xb9\x21\x5c\x9c\xcc\xe2\x34\x99\xc5\x75\xbf\x8b\xe9\x47\x66\xaa\x17\x69\xfd\x46\xe4\x9b\x41\x57\x26\x9d\xb6\x7f\x5e\x8f\xd3\x69\x33\xa8\xc2\x32\x99\xd7\x50\x95\xe1\xf5\xec\xd3\xaa\x7f\xfa\xf1\xc2\x94\x17\x84\x21\x63\x48\xdb\x82\x4e\x0f\xe2\x0c\xfa\x1d\xc0\xa8\x53\xf1\x35\x68\xbb\xa2\x7d\x0f\xd2\x61\x94\x6b\xb1\x36\xa3\x1b\x81\x6d\xd0\x22\x5d\x6b\xa2\x23\x12\xa6\x49\xb7\x7b\x35\x99\x2f\x26\xc4\xf3\x84\x52\x81\xeb\x29\xee\xb2\x80\x0a\xe1\x80\xae\x2e\xf2\xb0\x4b\x6e\x1b\xa1\xba\xd3\xef\xcf\xf5\xcc\xe8\x88\xe3\xac\x28\x66\xa9\xa9\x2e\xf2\x28\x09\x75\x9d\x14\x39\x86\x45\xb6\xba\x6a\x79\xea\xa8\x9a\x5c\x74\x41\x78\x5a\xed\x70\xda\x6a\x93\x2e\x80\x54\x49\x6d\x48\x63\xca\x64\xba\x02\xdb\x6a\x9b\xe8\x5e\xf0\x93\xe2\x51\xf8\xe8\xfe\xcf\xde\x7d\xf6\xc1\x93\xf2\xd9\xe2\xbe\xff\x20\x62\xe2\x61\xf8\xe3\xfb\xcf\xc5\xb3\x77\x1a\x3a\xa7\x6e\x78\xf2\xe4\xfd\x52\x84\x5b\xdd\xde\xc1\x4f\x74\x12\x2d\xde\x88\x1e\x16\x91\x21\xcf\xce\xd4\xf3\x94\x7f\x3c\x9e\x77\x9d\xb5\xd1\xa9\xbe\x98\x9b\xd5\xd9\x72\xaa\x1b\xdd\x79\x9d\x51\x2f\x4e\x4f\x2b\xb4\xad\x3b\x5e\xeb\x9f\xe4\xb3\x77\xf3\x87\x85\x8e\x6e\xdd\x3e\xea\xbd\xaa\xf8\xa8\xd7\xe8\x12\x7e\x1e\x67\x35\x0c\xbb\x9f\x4f\x3e\x81\x0f\x3f\x3a\xea\xdd\x9a\x2e\xf2\xd0\x96\x74\xeb\x36\x5c\xf6\x00\x6c\x58\x9c\xc1\x10\xa2\x22\x5c\x64\x26\xaf\x31\x2c\x8d\xae\xcd\x83\xd4\x58\xeb\x96\xb3\xaa\xe1\xf6\x51\x0f\x20\xce\xb0\x2a\x43\x18\xc2\x66\x71\xe2\x0c\x5b\xca\xed\x5a\xc4\x99\xdd\x11\xa1\x52\x1e\x55\x86\x4e\x43\x36\x51\x3c\x10\x5a\xf1\xa9\x6f\x26\xda\xf5\x7d\x11\x50\x13\x3a\x47\xab\xb4\xd5\x76\xd6\x99\xa9\x57\x29\xab\x7b\x17\x8f\xf5\xec\x91\xce\xcc\x75\xf2\x0f\xe9\x47\x47\xd0\x03\xa8\x70\xae\x4b\x93\xd7\x8f\x8a\xc8\x60\x92\x57\xa6\xac\xef\x99\x69\x51\x9a\x5b\x71\xf6\x36\x54\xb7\x8f\x7a\x57\xb7\xf7\x04\xe9\x5d\x5e\x26\x53\xc0\xbb\x65\x9d\x84\xa9\xb9\xba\xea\x0d\xea\xa4\x4e\xcd\xe8\xf2\x72\xed\xc3\xc7\xd6\x71\x75\x05\x04\x5e\xfc\xe2\xcf\xff\xf9\xeb\x37\x83\x7e\x17\xd2\xbb\xbc\x34\x69\xb5\x35\xe7\xd5\xcb\x79\x74\x75\x65\xdb\x79\x6b\x0b\x3c\x37\x17\x67\x45\x19\x55\x5b\x6b\xde\xcd\xdb\x3b\xb0\x23\xd3\xd5\xb8\xbb\x3d\x36\xa1\xbd\x41\xbf\xbb\x25\xf5\x06\x93\x22\xba\x68\x97\xb6\x99\xc1\x79\x96\xe6\x55\xd7\x1c\x77\xfa\xfd\xb3\xb3\x33\x3c\x13\x58\x94\xb3\x3e\xa7\x94\xf6\xab\x66\xe6\x40\x7b\x32\x0d\x9d\x28\xa9\xe6\xa9\xbe\xb8\x03\x79\x91\x9b\x23\x67\xd4\x03\x18\x54\x17\xd9\xa4\x48\x21\x89\x86\xce\xe6\x58\x70\xc0\xde\x3a\xee\x15\xe7\x43\x87\x02\x05\xc6\x7c\x08\x64\x1b\x0e\xb0\xe2\xbd\x39\xc0\x37\xd4\xdb\x8b\x73\x5d\xc7\x30\x4d\xd2\x94\x94\x0b\x9b\xd1\x34\x26\x2f\xa2\xc8\x81\x30\x4d\xe6\xfb\xbe\x68\xe8\x9c\x70\x89\x2e\x0d\x80\x86\x44\xa1\x27\x04\x50\xc2\x18\x7a\xcc\x05\x17\xfd\x40\x58\x43\x06\x1c\x18\x47\xee\x4b\xe4\x4c\x82\x42\x26\x09\x52\x25\x81\x49\xa4\x01\x27\x1c\xa9\x52\xc0\x29\xba\x9e\x77\xec\x63\x20\x05\x88\x00\x85\xb2\x10\xae\xf4\x40\x0a\x94\xbe\x0b\x14\xa4\x44\xca\x64\xe3\x62\xe0\xf1\xb0\xbd\x86\x2e\x0f\xa0\x9b\x22\x51\xc9\x00\x18\xc5\xc0\x65\xc0\x18\x32\x57\x00\x47\x4a\x39\xa8\x76\xba\x2d\xc0\x66\x94\xc2\x83\x9d\x8c\x8c\xa3\x17\x48\xf0\x7d\x64\x54\x01\xf3\xd0\xf3\x14\x04\x12\x2c\x31\x06\x81\x1c\x07\x02\xdd\x70\x45\x0e\x5a\x72\x92\xb4\xe4\xa0\x25\xc7\x48\x47\x8e\x58\x76\xc4\xb2\xb3\xe4\x48\x47\xae\x4b\x45\xba\x54\x6d\x3d\x01\x51\xe8\x52\x09\x2e\x8a\x40\x11\x46\x51\x71\xd9\x96\x2d\x5b\xb1\x98\x2b\x1a\xd2\x31\x24\x2d\x45\x62\x39\x12\x1f\x03\x21\x49\xcb\x91\xec\x04\x93\x96\x23\xb1\x1c\x25\xb1\x75\x90\x8e\x23\xd9\x4e\x7c\xcc\xa8\xdb\x6a\x6f\xcb\xb6\xd9\x28\xf2\x96\x8d\xa5\x06\x74\xdc\xae\xa1\xbf\x3c\xf1\x29\xb8\x1e\xfa\x4a\x1c\xfb\x14\x94\x42\xa5\x04\x78\x02\xa5\x50\xe0\x71\x50\x1c\x5d\x29\xc0\xe3\x63\x29\x35\x07\x0e\x14\x28\x23\x9c\xf0\xa7\xfc\xda\xe6\x84\xc7\xcc\xb7\x15\x84\x01\x52\xbf\x95\xcc\x45\x2a\x25\x48\xb4\xfb\xa0\x1b\x33\x8e\xd2\x93\x40\xad\x0a\x94\x13\xbb\xae\x56\x03\x2a\x03\x12\x20\x63\xed\x3a\xfa\x7e\x83\xdc\xf3\x8e\x3d\x17\x05\xf3\x40\x2a\x14\x76\x99\x28\xb8\x0c\x39\x83\x4d\xad\xcb\x13\x45\xd1\xe5\x0c\xb8\x8f\x42\x8e\x65\x80\x81\xf4\x1b\x26\xad\x62\xb1\x8f\x01\xb5\x8b\xe7\xfb\x36\x9b\x55\xdb\x27\x1c\x3d\x8f\xaf\xc6\x1e\x7a\xdc\x03\xda\x2a\x2b\x88\x40\xae\x24\xf1\x90\x53\x8f\x04\x68\xc9\xb4\xe3\xe5\x49\x07\x0a\x32\x40\xde\x30\x85\xd2\xf5\xc7\x8a\x62\xc0\x42\x0f\x99\xf2\x3a\xe4\x40\xd9\x05\xf0\x3d\xb5\x36\x7c\xe4\x3e\x03\x4a\x5c\x94\x54\x11\x81\x01\x15\xc4\x47\xe6\xf9\x6d\x53\x70\xb7\x33\x56\x05\x2f\xed\xcd\xcd\x36\x5f\xdb\xd3\xfd\xae\xa9\xf7\xfb\x3b\x2e\x32\xb3\xdf\xda\x0a\x98\x72\xb6\x9b\xd7\x36\xa5\x8f\xc2\x95\xc0\x90\x49\xa5\xd1\xb5\x6b\x6c\xff\x11\xf4\xa8\x0f\x34\x25\x0a\xd4\xdd\x6b\x37\x30\x74\xc1\x43\xb7\xf1\xb6\x62\xc1\x0e\x63\x89\xee\xae\x8f\xa0\xdb\x10\x19\xf3\x46\xee\xc7\x8e\x99\x3c\x10\xea\xed\xa4\x67\x52\x11\x5b\xd9\x43\x26\xc0\x45\x2f\x10\x4f\xf9\x4e\x02\xd2\xce\x8a\x09\xdb\xf5\xa1\xdb\x30\xe4\x81\x78\xb8\x45\x6b\x79\xc2\xd1\x05\x26\x9f\x7a\xe8\x51\x2f\x75\xd1\xb5\xed\x02\xab\xff\x4f\x99\x1c\x33\xda\x10\x79\x00\x5c\xbc\x02\x2e\xc7\x1c\xdd\xa5\xd3\x7f\x93\xf4\xb5\x6e\x1f\xf1\x6f\xa0\x3d\x05\xbe\xee\x06\x60\xd0\xf6\xc3\x8e\x03\x78\xb3\xed\x20\x1c\xf8\x78\xc7\xb6\x0d\xb5\xcc\x98\x0b\x3c\x26\xb2\x11\xb1\x7c\x2a\x97\x19\x05\xb9\xb6\xfc\x2d\x4b\x68\x06\x6c\xbd\x8c\x84\x35\x84\x2f\x33\xe2\x82\x68\x88\x18\x2b\x1b\xdd\x9a\xd4\x9a\xac\xe1\xdb\xc1\xc0\x62\xb1\xcc\x88\x24\xd2\x42\x8e\x59\x23\x96\x19\x6d\x0d\xd9\x19\x2e\x11\x5d\xf2\xb1\x5a\x66\x12\x64\x87\xf7\xd4\xff\x1e\xa1\xe6\xa6\x98\xa7\x86\x84\x49\x19\xde\x50\x30\xc6\x40\x69\x01\xa2\xab\x8a\x28\xa0\xd0\x59\xd6\x56\x40\x57\x09\xdf\x74\x73\xea\x74\xf7\xb5\x0f\x7e\x87\x62\x53\xd1\xbb\x9d\x49\x5b\xd2\xfe\x32\xf3\x89\xa7\x3d\xf0\x56\x4b\xef\xa2\x54\xbe\x3d\xc2\x85\x77\x2c\x90\x4b\x6e\xc7\x9c\x2b\x90\xe8\x53\x17\x18\x05\x1f\x18\xad\x24\x7a\xae\x07\xf6\x8a\xdd\x59\x76\x0a\x47\xe1\xdd\xdd\xe0\xd8\xa8\xef\x91\x64\x56\x26\xd1\xcd\x94\x00\x8e\xee\x5d\xdb\x8e\x6c\xb5\x43\x5b\x8f\x5d\xaa\x3d\xaf\xbd\x97\xb8\xcd\xbe\xd7\xee\x6b\x2f\x26\xfb\xee\xf6\x42\x43\x44\xd7\x33\xfc\x95\xfd\x2f\x5e\xe9\x7b\x71\xa0\x95\xc5\xa1\x5e\x5a\x66\xca\x7a\xf7\x13\xd2\x83\x45\xdb\x2d\x7d\xa0\x6a\x26\x0e\x97\x1d\xac\xcb\xce\x58\x9b\xee\x7f\x5a\xf7\x49\x57\xe5\x01\xb1\x83\x03\x62\xdb\xd0\x83\x6a\x33\xf7\x90\xdc\x96\xd1\x0f\x55\xf8\xeb\x05\x0f\xec\x69\xb0\xeb\xee\xac\x66\xcf\x4f\x56\xd6\x21\xc9\x7f\xc8\xd2\xf7\xbb\x64\x60\x9f\x6d\xed\x43\xb0\x7d\x28\x36\x25\x84\xa9\xae\xaa\xa1\x33\x27\x02\x26\x33\x12\xe9\xf2\x39\xd8\xd7\x26\x72\x16\x27\xb5\x81\x6c\x42\xc4\xba\x63\xa2\xa4\x59\x47\xdb\xa7\x6c\x9d\xe4\xa6\x5c\x5d\xdb\xbd\x1a\x91\x69\x6a\xce\xc1\xfe\x21\x67\xa5\x9e\x83\x4e\x93\x59\x4e\x92\xda\x64\x15\x09\x4d\x5e\x9b\x12\x4e\x17\x55\x9d\x4c\x2f\xc8\xea\x79\xfd\x75\xee\x74\x46\xaa\x5a\x97\xf5\x26\x0f\xc0\x40\xaf\x3f\x13\x38\x7b\x09\x0f\xa4\xc9\x26\x84\xdb\x3f\xe9\x8c\xd0\x6d\x5e\xed\x30\x32\x61\x51\xb6\xaf\x95\xc4\x3e\xda\x6f\xe5\xb0\x47\x49\x33\x5b\xc3\x4f\x12\xc8\x0c\xe1\x0e\x74\xdf\x81\x1c\x49\x1d\x88\x8d\x7d\x79\x1c\x3a\x82\x3b\x50\x16\xf6\x5c\x4c\xb2\x99\x03\xba\x4c\x34\x49\xf5\xc4\xa4\x43\x67\xf3\xb0\xef\x8c\x06\x8b\xca\xc0\x79\x9a\xe4\xcf\xef\x74\xb5\xff\xdf\xf5\x5b\x43\x7f\xb4\x5a\x92\x4d\xea\xbe\x1e\xf5\xae\xad\x45\xba\xae\x23\xd7\x0d\x84\x45\x4a\x18\x6f\x7f\xd2\x19\xd1\x8b\xba\xb0\xb5\x6d\x86\x96\xee\x6b\xa4\xcd\x26\x24\x8b\x08\xdd\x65\x99\x26\xa3\x03\x7a\xe6\xba\x21\xed\x07\x9a\xf9\x39\xe1\x5b\xb2\x39\xa3\x6f\xbf\xfa\xe6\xe5\x1f\xfe\x61\x2b\x1c\xf4\xd3\xe4\xf5\x50\xa5\xce\xa3\x1b\xc0\xbd\xfc\xdd\xaf\x5f\x7c\xf1\xf5\xcb\xdf\x7e\xd6\xbe\x0d\x1e\x00\x6d\xbf\xee\xec\x20\xeb\x49\xb1\xa8\x6f\x00\xfd\xdd\x67\x7f\xff\xf6\xeb\x5f\x6d\x40\xdb\x2f\x3b\xd7\x0a\x2f\xd2\x6d\x89\xa7\x45\x99\x5d\x6f\xed\x57\x05\x9e\x10\xb1\xd9\x44\x9d\xda\x62\x57\xc6\x24\x9f\x2f\xd6\x1f\x1d\x2a\xa3\xcb\x30\xde\x54\x68\xb1\xdb\xa5\x28\x8b\x14\xb6\x8d\xb6\xd7\x1c\x98\xa7\x3a\x34\x71\x91\x46\xa6\x1c\x3a\x2f\x7e\xf3\xc5\xbf\xbf\xfc\x23\x22\xee\xee\xa4\xf7\x3a\xc8\x6d\x02\x16\x69\xd3\x7b\xfd\x28\x69\x56\x4d\xba\x1e\x76\x2f\xbd\xa6\x1c\xfd\x37\x00\x00\xff\xff\x61\xd2\x4d\x22\xb7\x15\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6e\xdb\x30\x0c\xc7\xcf\xf6\x53\x10\x3a\x16\x50\x9c\xa2\x1b\x30\x6c\x89\x81\xdd\xba\xcb\x50\xa0\xdb\x03\xd0\x36\x6d\x6b\x95\xa5\x40\xa2\x93\x16\xae\x81\x9d\xb7\xa7\xd8\x43\x0c\xe8\x03\xf5\xb2\xb7\x18\xe4\x8f\xc6\xc9\xb6\xc3\x72\x88\x69\x93\xfa\x91\xfa\x8b\x62\xd7\x31\x35\x3b\x8d\x4c\x20\x32\xf4\x94\xd4\x84\x05\x39\x01\xab\xbe\x8f\xe3\x78\x53\xa8\x3d\xe4\x1a\xbd\xdf\x8a\xdc\x1a\x46\x65\xc8\x89\x34\xee\xba\xe4\x02\x3c\xa3\x63\xb8\x48\x42\xe4\x32\xd0\xd9\x03\x54\xf2\xb5\x48\x63\x80\x53\x80\x96\x4d\x21\xdf\x88\x14\x00\x62\x08\xbf\x68\xe9\x2f\x64\xa9\xe9\x1e\xc2\x9f\xcc\xad\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\xf3\x7a\xf4\xfb\xda\x29\x73\x27\xd7\x90\x55\xf2\x50\x2b\x26\x01\x9e\x1f\x34\x6d\xc5\x41\x15\x5c\xbf\x05\x6c\xd9\xbe\x13\x69\x1c\x47\x21\xcf\x32\x8d\x56\x9e\x65\xe5\x6c\xbb\x83\xa3\x29\x4b\xdd\xfa\x1a\x32\xeb\x0a\x72\x32\xb3\xcc\xb6\x01\x9f\x3b\xab\x35\x3a\x42\x91\x8e\x9c\xa8\xeb\x1c\x9a\x8a\x60\xf5\xde\xb1\xca\x35\xf9\xbe\x1f\x3d\x00\x1b\x84\xda\x51\xb9\x15\x49\xd7\xad\x6e\x6d\xeb\x72\xea\xfb\x60\x7f\xf6\xe4\x46\xeb\x43\xd1\xf7\xab\x9a\x1b\x2d\xfe\x2c\x66\xd8\x25\x9c\xbd\x4b\xcc\x59\x59\x03\xbb\x07\x79\x05\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\xf3\xd6\x39\x32\xbc\x15\xec\x5a\x9a\x0b\x3c\xdf\xec\xa4\xe9\x41\x5e\xae\xd7\x27\x6a\xe6\x64\x98\x1c\x7c\x69\x3d\xab\xf2\x41\x86\xc3\x25\xc3\x32\x23\x3e\x10\x99\x25\x0e\x60\xe3\xd9\x59\x53\xcd\xcc\x26\x93\x97\x22\xed\xba\xd5\x27\xc5\x9a\xe0\x11\x6e\xb1\xa4\xbe\xdf\x24\x63\xd8\xb2\x92\xa4\x50\xfb\x7f\x54\x16\xba\xe1\x72\x0d\x01\x06\xbe\x41\xad\x07\xe4\x35\x37\x1a\x1e\xe1\x9a\xb0\x18\xe8\x01\xbb\x64\x6c\x12\x7c\xb1\xbb\x8e\x4c\x31\xeb\x7f\x0c\x8b\xa3\x28\x9a\xdf\xa2\x93\x06\x6b\x32\x79\x25\xd2\xc9\x37\x38\x0d\xee\x47\x31\x35\x66\xa4\xb7\xe2\x06\x2b\x02\x83\x7b\x55\xe1\xa0\x3b\xdd\x63\xb3\xd3\x83\xba\x51\x14\xda\xb5\xd5\x33\x6c\x87\x95\x32\x63\xd4\xb9\x88\xa3\xb6\xf3\xa2\xb0\x4c\xab\xc5\x32\x1a\x8e\x40\xa4\x1b\x3c\xf9\xa8\x95\xb9\x13\xe9\xf3\xd3\xb7\xe7\xa7\xaf\xbf\x7e\xfc\x0c\x3b\xdd\x24\x5a\x8d\x95\x4e\xcd\xa7\x4a\x58\x7d\xa4\x7b\xbe\xb1\x43\xe3\xfd\x37\x7e\xee\xd0\x9d\xf5\xa1\x1f\x5f\x50\x21\xef\xf7\xf3\xbc\xc7\xb4\x93\xce\xa3\x04\x49\xab\x47\x65\x13\x83\xfb\xe1\x8e\x4f\x82\xfe\xf5\xb6\xbf\x1a\xc6\x40\x38\xac\xe3\xa0\xf1\xaa\xa0\x0c\x5d\x32\x3d\xc7\x61\xf3\xc2\x99\x71\xc3\x8c\x21\x53\x8c\x13\xe6\xf8\xf5\x6c\x60\x95\xd6\xf2\x34\xb0\x7e\x07\x00\x00\xff\xff\x55\xdb\x14\x8d\xcd\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
