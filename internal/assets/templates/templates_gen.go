// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
// ../../../templates/soso.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\x8f\x9b\x3a\x10\xc6\xef\xf9\x2b\xe6\xf9\x3d\x3d\x12\xad\x0c\xbb\x9b\x9c\xba\x40\xd5\x6e\x2f\xbd\x56\xed\xa1\x47\x03\x43\x70\x62\x6c\x6a\x0f\x10\x14\xe5\x7f\xaf\x0c\x81\x74\xb7\xea\xa1\xcb\x21\x72\x6c\x7f\xbf\x6f\xe6\x63\x58\xc5\x85\xec\x20\x57\xc2\xb9\x84\xe5\x46\x93\x90\x1a\x2d\x4b\x57\x00\x71\x69\x0c\xa1\x9d\x0f\x0b\x5e\x2a\x3c\x81\xff\xe1\xbd\x15\x0d\x1c\x5a\x47\xb2\x1c\xb8\x57\xa1\x26\x9e\x21\xf5\x88\x1a\x84\x92\x7b\xcd\x25\x61\xed\x78\x8e\xda\x23\x9a\x81\x6f\xa1\x1e\xf8\x0e\x32\x63\x0b\xb4\x9c\x4c\x33\x7a\x00\xbc\xf4\x57\xbc\x2e\xf8\x0e\xae\x5e\xbf\x93\xae\x22\x80\x58\x40\x65\xb1\x4c\x58\xc4\x66\x75\x9d\x79\x13\xe4\x8f\x50\x67\x1e\x73\x0f\x84\x27\xe2\x75\x4b\x58\x4c\xcb\x02\x73\x63\x05\x49\xa3\xb9\x36\x1a\x41\x55\xfc\x61\x21\x02\xc4\xae\xdb\xcf\xb0\x4c\x32\xe8\x65\x41\x55\xc2\xb6\xf7\x0c\x2a\x94\xfb\x8a\x12\xf6\xb8\x63\x69\xdc\x3a\x84\x93\x92\xfa\xf8\x6e\x2a\xe1\xdf\xcc\x18\x72\x64\x45\xc3\xa2\x34\x8e\x5c\xb7\x5f\xaa\x8c\xc4\xb2\x74\x8d\xd0\x33\xfd\x56\x18\x4b\xff\xcf\x4d\x33\x3c\xc1\xf9\xfc\x1d\x85\xbd\x5c\xe2\xc8\x5f\xbc\x66\x13\x15\xb2\x4b\x57\xd3\xba\x55\xb3\x5a\x8b\x0e\x96\xa8\x5e\xbf\x05\xd4\x05\x28\xe9\x88\xb7\xda\xd1\xa0\xb0\xb8\x86\x79\x4b\x4e\xc9\x25\x31\xc7\xb7\x2c\x8d\x65\xbd\x9f\x7b\x7d\xdc\xbd\xe8\x15\x9c\xcd\x13\x16\x95\xa2\x93\xb9\xd1\x61\xa3\xf7\x63\x87\x4a\xce\xf5\xb5\x6a\x9c\x94\x68\x1a\x95\x74\x35\x57\x1c\xbb\xdc\xca\x86\xae\x7a\x47\x82\x64\x1e\x1d\x5c\x74\xf8\xd1\xa2\x1d\xf8\x36\xdc\x86\x0f\x61\x2d\x75\x78\x70\xef\xbb\xe4\x7c\xfe\xd8\x4a\x55\x3c\x9b\xba\x96\x74\xb9\x30\x1f\xe2\xa8\x4f\xff\x08\x5a\x22\x7f\x3b\xa5\x92\xfb\x4a\xf9\x56\x6f\xab\xb7\xc3\x48\x64\x0a\x6f\x55\xf1\xf1\xff\x5f\xe1\x68\x68\x70\x9a\x8c\xe8\x20\x3a\x31\xed\xb2\x74\x55\xa9\x83\x0b\x97\x0a\x3f\x28\xb5\xde\x3c\xad\xfe\x5b\x07\xa3\x43\xb0\x09\x17\xcf\xaf\x7e\x63\x7d\xbe\x6c\x9e\x56\x37\xfa\x8c\x4f\xbd\x24\x3c\x71\x87\xc2\xe6\x55\xb0\x09\x5d\x9b\xd5\x92\xd6\x65\xab\x73\xff\x41\xac\x71\x73\x1e\xdf\x29\x86\x8d\xc5\x0e\x35\x7d\xc2\x52\xb4\x8a\xbc\x9b\xdf\xef\x84\x85\x63\x0f\x09\x4c\x9c\x63\x1f\x6c\xc2\x4e\xa8\xf9\x58\x96\xeb\x7f\x8e\xfd\x95\xe1\x9f\x5f\xae\x95\x26\x6f\xdd\x7c\xd1\x3f\x16\xa9\xb5\x1a\x4a\xa1\x1c\x4e\xbb\x97\xc5\xa3\xb5\x0a\x12\x08\x22\x67\xa2\x00\xee\x00\x75\x6e\x0a\xfc\xf6\xe5\xf3\xb3\xa9\x1b\xa3\x51\xd3\xfa\xd8\x6f\xe0\x0e\x82\xb0\xa2\x5a\x05\x93\xbc\x97\xba\x30\x7d\xa8\x4c\x3e\x7e\xdd\x90\x78\xcc\x74\xf4\xd2\xeb\x75\x38\x51\x66\x8a\xc1\x8f\xad\x87\xa5\x3f\x03\x00\x00\xff\xff\xc0\xb9\xe5\x7e\x0d\x05\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\x1b\xc7\xf1\xbf\xf3\x53\x94\xe7\x7f\x91\x00\x75\xb3\x5f\xf3\xd2\x92\xfb\x87\xb4\x52\x42\x27\x92\x9c\xc0\x7a\xd8\x30\x8c\xa0\x39\xd3\x9c\x19\xed\x3c\xe8\x99\xe6\xec\x2e\x57\x7b\x89\x61\xe4\x96\xe4\x64\x04\x81\x0f\x49\x10\x04\xb9\x25\x40\x9c\xc0\xb0\x0f\xf9\x32\xb6\x12\x7d\x8b\xa0\xa7\x49\xee\x90\xa2\xe4\xf5\x0b\x82\x96\x5d\x35\xd5\xbf\xaa\xfa\x55\x57\x4f\xf7\x8c\xde\xb8\xf3\xd6\xd1\xc3\x77\x7f\x76\x17\x52\x5d\xe4\x87\x83\xd1\xea\xe7\x0d\x84\xe0\xab\x3f\x7f\xfa\xe2\xc3\xbf\x02\x42\x46\xad\x64\x7c\x38\x18\x15\x4a\x4b\x48\xb5\x9e\x23\xf5\xc1\x22\x6b\xc7\xce\x51\x55\x6a\x55\x6a\xf4\xf0\x6c\xae\x1c\x88\xac\x34\x76\xb4\x3a\xd5\x43\x03\x75\x00\x51\x2a\xeb\x46\xe9\xf1\xa3\x87\x3f\x42\x81\x03\xc3\x7d\x28\xef\xa0\x47\xb7\xd0\x51\x55\xcc\xa5\xce\xa6\x79\x1f\xe8\xcd\xbb\x63\x15\x27\xca\x79\x9d\xef\x7b\xb2\x4c\x16\x32\xe9\x4f\x8b\xca\xcd\x8c\x52\x16\x6a\xec\xb4\x99\x3a\x99\x57\xb5\xee\xd9\x9c\x64\xb1\x4e\xc7\xb1\x6a\xb3\x48\xa1\x4e\xb8\x01\x59\x99\xe9\x4c\xe6\xa8\x89\x64\xae\xc6\x14\x93\x1b\x50\xc8\xd3\xac\x58\x14\x7d\xd5\xa2\x51\x75\x27\xcb\x69\xae\xc6\x65\x65\xb3\xca\xb3\xf2\x18\x6a\x95\x8f\x9d\x26\xad\x6a\x1d\x2d\x34\x64\x51\x55\x3a\x90\xd6\x6a\x36\x76\x86\x33\xd9\x1a\x19\xcf\xcb\xc4\x39\x1c\x58\x8a\x9f\x7f\xfc\x77\xb8\x5d\x55\xba\xd1\xb5\x9c\xc3\xf3\x3f\x7c\xf6\xd5\xbf\x3f\x84\xa3\xb7\xdf\x86\xe7\x1f\xff\xea\xcb\x2f\xfe\x65\xb9\xef\x01\xeb\xb3\x5c\x35\xa9\x52\x7a\x83\xda\x68\xa9\xb3\x68\x18\x35\xcd\x70\xba\x06\xc2\x45\x56\xe2\xa8\x69\xfe\xbf\x1d\x9f\x9f\xdf\x5e\x64\x79\x7c\x54\x15\x45\xa6\x2f\x2e\x9c\x6f\x03\x87\x6a\x65\xc6\xdf\x1d\x55\x1b\xbe\x7a\xb8\x9d\xfc\xdd\x61\xd3\x2c\x49\xf3\x2c\x49\xf5\xd0\xda\x0c\x63\x35\x93\x8b\xfc\x7b\x08\xb8\x51\xf9\xac\xfb\xf3\x4a\x98\x55\x1d\x47\x4d\x54\x67\x73\x0d\x4d\x1d\x5d\xce\x7e\xda\x0c\x9f\x7e\xb0\x50\xf5\x19\xa2\x98\x52\x4c\xba\x78\x9e\xee\xc5\x19\x0d\x2d\xc0\x61\x57\xf1\xc1\x60\x8d\x17\x4b\x2d\x91\x8c\x51\x94\x67\x76\x5d\x4b\x34\x5f\x4c\x91\xef\x73\xcf\x0b\x5d\xdf\x63\x2e\x0d\x09\xe7\x0e\xc8\xe6\xac\x8c\xac\x7b\xd3\x22\xcd\xcd\xe1\x70\x2e\x13\x25\x63\x86\x93\xaa\x4a\x72\xd5\x9c\x95\x71\x16\x49\x9d\x55\x25\x8e\xaa\x62\xf5\xd4\xc4\x28\xe3\x66\x7a\x66\x8d\xf0\xd3\xa6\x17\xcb\x56\x03\x59\x03\xd4\x64\x5a\xa1\x56\xd5\xd9\x6c\x05\xd6\x6b\xa8\xf8\x76\xf8\x93\xea\x41\xf4\xe0\xce\xcf\xdf\x7a\xf2\xee\xa3\xfa\xc9\xe2\x4e\x70\x37\xa6\xfc\x5e\xf4\xe3\x3b\xc7\xfc\xc9\x9b\x2d\x99\x13\x37\xba\xff\xe8\x9d\x9a\x47\xbd\x7d\xc0\xc2\x4f\x65\x16\x2f\x5e\x8b\x1e\x55\xb1\x42\x4f\x4e\xbc\xe3\x9c\x7d\x30\x99\xdb\x9e\xdb\x22\xff\x70\xd0\xca\x1a\x7e\x91\x16\x1a\xc6\xf6\xe7\xd9\x33\x78\xef\xfd\x83\xc1\xb5\xd9\xa2\x8c\x0c\xda\xb5\xeb\x70\x3e\x00\x30\x66\x69\x01\x63\x88\xab\x68\x51\xa8\x52\xe3\xa8\x56\x52\xab\xbb\xb9\x32\xd2\x35\xc7\xe2\x39\xd7\x0f\x06\x00\x69\x81\x9b\x3a\x82\x31\x6c\x78\x4d\x0b\xdc\x45\xdb\xd1\x98\x16\xa6\xa2\x91\xe7\xf9\xc4\x53\x64\x16\xd1\xa9\xc7\x42\x2e\x3d\x36\x0b\xd4\x54\xba\x41\xc0\x43\xa2\x22\xe7\x60\xe5\xb6\xe9\x7b\x4d\x94\x5e\xb9\x6c\x6e\x9f\x3d\x94\xc9\x03\x59\xa8\x4b\xe7\xef\x91\xf7\x0f\x60\x00\xd0\xe0\xb9\xac\x55\xa9\x1f\x54\xb1\xc2\x59\xd9\xa8\x5a\xdf\x56\xb3\xaa\x56\xd7\xd2\xe2\x06\x34\xd7\x0f\x06\x17\xd7\xaf\x5d\x3f\x18\x5c\x96\xcd\xae\xa1\xf3\xf3\x6c\x06\xf8\x56\xad\xb3\x28\x57\x17\x17\x83\x91\xce\x74\xae\x0e\xcf\xcf\xd7\x3a\xfc\xd0\x28\x9e\x4d\x94\x8c\xbb\xd1\xc5\x05\x20\x78\xfe\xcb\xbf\xfc\xf7\x6f\x5f\x8c\x86\xd6\x78\xab\x44\xc7\xea\xec\xa4\xaa\xe3\xa6\x57\x93\x5d\x30\x78\x06\x3d\xb8\x1b\x16\x6c\x67\x27\x8e\x95\x8d\x73\xbb\xba\x3d\xa4\x89\x2e\xf2\x57\x01\x9d\x9f\xab\xbc\xe9\x65\xf3\xcd\xc2\xfd\x06\xf1\xf4\x3d\x96\xf1\xc5\x85\xe9\xc9\x97\x5e\x40\xa7\x28\x2e\x1b\x34\xaf\xd5\x4c\xe9\x28\x45\x66\x72\x5d\xe5\x3d\x94\xaa\xdc\xde\x69\xfa\xe6\x9b\xbd\x66\x98\x15\x32\x51\x38\x92\x51\xaa\xa2\x54\x9a\x65\x75\x95\x59\x05\x5f\x04\xbb\x93\x06\x5f\x3f\xed\xb5\xbb\xc2\x55\xfc\xea\x79\xf4\xed\x27\xdb\x89\x32\x6e\x70\x82\xe3\x6a\x31\xcd\x55\x94\x67\xd1\x31\x2e\x95\xbe\xca\xf4\x93\x93\x93\x95\xef\xab\x3a\x9c\x2d\xca\x38\x2b\x93\x28\xad\xb2\x48\x35\x85\x6a\x1a\x99\xa8\x66\x1b\x64\x30\x18\x0d\xed\xf9\x66\x30\x9a\x56\xf1\x99\xf9\x6d\xda\x04\x4e\x8b\xbc\x6c\xec\x7e\x7a\xd3\xfa\x3e\xe1\xb8\xaa\x93\x21\x23\x84\x0c\x9b\x36\x71\xa0\x7b\x75\x8c\x9d\x38\x6b\xe6\xb9\x3c\xbb\x09\x65\x55\xaa\x03\xe7\x70\x00\x30\x6a\xce\x8a\x69\x95\x43\x16\x8f\x9d\xcd\x1b\xcf\x01\x73\x0e\xb9\x5d\x9d\x8e\x1d\x02\x04\x28\x0d\x20\x14\x9d\x39\xc0\x6a\x45\x6f\x4e\x03\x9b\x45\xdd\x3d\x9c\x4b\x9d\xc2\x2c\xcb\x73\x54\x2f\x8c\x47\xd5\xaa\xb2\x8a\x63\x07\xa2\x3c\x9b\xef\xea\xe2\xb1\x73\x9f\x09\xec\x92\x10\x48\x84\x3c\xec\x73\x0e\x04\x51\x8a\x7d\xea\x82\x8b\x83\x90\x1b\x41\x84\x0c\x28\xc3\x2c\x10\x98\x51\x01\x1e\xa6\x02\x61\xe2\x09\xa0\x02\x93\x90\x21\x86\x89\xe7\x01\x23\xd8\xf5\xfd\xa3\x00\x87\x82\x03\x0f\x31\xf7\x0c\x84\x2b\x7c\x10\x1c\x8b\xc0\x05\x02\x42\x60\x42\x45\xeb\xe2\xd0\x67\x51\xf7\x0c\xbb\x2c\x04\x3b\x45\x60\x4f\x84\x40\x09\x0e\x5d\x0a\x94\x62\xea\x72\x60\x98\x10\x06\x5e\x37\xdd\x04\x60\x3c\x0a\xee\xc3\x96\x47\xca\xb0\x1f\x0a\x08\x02\x4c\x89\x07\xd4\xc7\xbe\xef\x41\x28\xc0\x24\x46\x21\x14\x93\x90\x63\x37\x5a\x25\x07\x5d\x72\x02\x75\xc9\x41\x97\x1c\x45\x36\x39\x64\xb2\x43\x26\x3b\x93\x1c\xb2\xc9\x59\x57\xc8\xba\xea\xe2\x09\x91\x87\x5d\x22\xc0\xc5\x3c\xf4\x10\x25\xd8\x63\xa2\x0b\x5b\x74\x64\x51\x97\xb7\xc8\x66\x88\xba\x14\x91\xc9\x11\x05\x38\xe4\x02\x75\x39\xa2\x2d\x63\xd4\xe5\x88\x4c\x8e\x02\x99\x38\x90\xcd\x11\xf5\x1d\x1f\x51\xe2\x76\xdc\x9b\xb0\x8d\x37\x82\x59\x97\x8d\x49\x0d\xc8\xa4\xab\x61\xb0\xbc\x1f\x10\x70\x7d\x1c\x78\xfc\x28\x20\xe0\x79\xd8\xf3\x38\xf8\x1c\x0b\xee\x81\xcf\xc0\x63\xd8\x15\x1c\x7c\x36\x11\x42\x32\x60\x40\x80\x50\xc4\x10\x7b\xcc\x2e\x65\x86\x58\x4a\x03\x13\x41\x14\x62\x12\x74\x94\xb9\x98\x08\x01\x02\x9b\x75\x60\xc7\x94\x61\xe1\x0b\x20\x86\x05\xc2\x90\xa9\xab\xe1\x80\x88\x10\x85\x98\xd2\xae\x8e\x41\xd0\x62\xe6\xfb\x47\xbe\x8b\x39\xf5\x41\x78\x98\x9b\x32\x11\x70\x29\x66\x14\x36\xb1\x2e\xef\x7b\x04\xbb\x8c\x02\x0b\x30\x17\x13\x11\xe2\x50\x04\x2d\x15\x86\xb1\x34\xc0\x21\x31\xc5\x0b\x02\xe3\xcd\xb0\x1d\x20\x86\x7d\x9f\xad\xc6\x3e\xf6\x99\x0f\xa4\x63\x96\x23\x8e\x99\x27\x90\x8f\x19\xf1\x51\x88\x4d\x32\xdd\x78\x79\xdf\x82\x82\x08\x31\x6b\xa9\x87\x85\x1b\x4c\x3c\x82\x43\x1a\xf9\x98\x7a\xbe\x45\x0e\x3d\x53\x80\xc0\xf7\xd6\x42\x80\x59\x40\x81\x20\x17\x0b\xe2\x21\x8e\x43\xc2\x51\x80\xa9\x1f\x74\x4d\xc1\x5c\x2b\xac\x02\x5e\x9a\xf3\x90\x69\xbe\xae\xa7\x87\xb6\xa9\x77\xfb\x3b\xad\x0a\xb5\xdb\xda\x1e\x50\xcf\xe9\x37\xaf\x69\xca\x00\x73\x57\x00\xc5\x54\x78\x12\xbb\xa6\xc6\xe6\x1f\xc2\x3e\x09\x80\xe4\xc8\x03\xef\xd6\xa5\x1a\x28\x76\xc1\xc7\x6e\xeb\xf7\x6c\xc1\x0c\x53\x81\xdd\x6d\x1d\xc2\x6e\x8b\x44\xca\x5a\xb1\x6b\x3b\xa1\x62\x8f\xa9\xbf\xe5\x9e\x0a\x0f\x99\xc8\xee\x51\x0e\x2e\xf6\x43\xfe\x98\x6d\x39\x40\xdd\xac\x14\xd1\x6d\x1d\x76\x5b\x8a\x59\xc8\xef\xf5\xd2\x5a\xde\x67\xd8\x05\x2a\x1e\xfb\xd8\x27\x7e\xee\x62\xd7\xb4\x0b\xac\xfe\x3f\xa6\x62\x42\x49\x8b\xc4\x1e\x70\xfe\x12\xb8\x98\x30\xec\x2e\x9d\xe1\xeb\xa8\xef\xae\x10\x57\xe2\x9e\x00\x5b\x77\x03\x50\xe8\xfa\x61\x4b\x01\xac\xed\x2b\x10\x03\x36\xd9\x92\x4d\x43\x2d\x0b\xea\x02\x4b\x91\x68\x79\x2a\x1e\x8b\x65\x41\x40\xac\xa5\xa0\x27\x71\x49\x81\xae\xcb\x88\x68\x8b\xd8\xb2\x40\x2e\xf0\x16\xf1\x89\x67\xac\x3b\x91\x18\x91\xb6\xac\x6f\x0c\x34\xe5\xcb\x02\x09\x24\x0c\xe4\x84\xb6\x7c\x59\x90\x4e\x10\x56\x70\x11\xb7\xce\x27\xde\xb2\x10\x20\x2c\xde\xe3\xe0\x6b\x88\x9a\xab\x6a\x9e\x2b\x14\x65\x75\x74\x45\xc2\x28\x05\x4f\x72\xe0\x36\x2a\xe4\x01\x01\x2b\x19\xd9\x03\xb2\x72\xf8\xba\x97\x93\xe5\x3d\x90\x01\x04\x16\xc5\xb8\x22\xb7\xac\x48\xba\xa4\x83\x65\x11\x20\x5f\xfa\xe0\xaf\x4a\xef\x62\xe1\x05\x66\x0b\xe7\xfe\x11\xc7\x4c\x30\x33\x66\xcc\x03\x81\x03\xe2\x02\x25\x10\x00\x25\x8d\xc0\xbe\xeb\x83\x79\x62\x56\x96\x99\xc2\x30\xf7\x6f\x6d\x70\x8c\xd5\xd7\x50\x92\xd4\x59\x7c\x35\x26\x80\x61\xf7\x96\x69\x47\xba\x5a\xa1\x9d\xc6\x94\x6a\x47\x6b\xde\x25\x6e\xbb\xab\x35\xeb\xda\x4f\xd1\xae\xba\x7b\xd0\x22\x6e\x7b\x86\xbd\xb4\xfe\xf9\x4b\x7d\xcf\xf7\xb4\x32\xdf\xd7\x4b\xcb\xc2\x33\xda\x5d\x87\x64\x6f\xd0\x66\x49\xef\x89\x9a\xf2\xfd\x61\x87\xeb\xb0\x0b\xda\xb9\xfb\x5e\xe3\xbe\x6f\xa3\xdc\x43\x76\xb8\x87\x6c\x63\xba\x97\x6d\xea\xee\xa3\xdb\x64\xf4\x43\x05\xfe\x6a\xc2\x43\xb3\x1b\x6c\xab\xad\xd4\xee\xe8\xd1\x4a\xda\x47\xf9\x0f\x19\xfa\x6e\x97\x8c\xcc\xd9\xd6\x1c\x82\xcd\xa1\x58\xd5\x10\xe5\xb2\x69\xc6\xce\x1c\x71\x98\x26\x28\x96\xf5\x31\x68\x75\xaa\xd1\x49\x9a\x69\x05\xc5\x14\xf1\x75\xc7\xc4\x59\xbb\xb6\x36\x77\x20\x99\x95\xaa\x5e\x3d\xdb\x7e\x1a\xa3\x59\xae\x4e\xc1\xfc\x41\x27\xb5\x9c\x83\xcc\xb3\xa4\x44\x99\x56\x45\x83\x22\x55\x6a\x55\xc3\xd3\x45\xa3\xb3\xd9\x19\x5a\xdd\xa6\x5e\xa5\xce\x13\xd4\x68\x59\xeb\x8d\x1f\x80\x91\x5c\x9f\xff\x9d\x1d\x87\x7b\xdc\x14\x53\xc4\xcc\x9f\x3c\x41\xa4\x9f\x57\x37\x8c\x55\x54\xd5\xdd\x0d\x07\x99\xa3\x7d\xcf\x87\xd9\x4a\xda\x64\x0d\x3f\xcd\xa0\x50\x88\x39\x60\x3f\x2a\x3a\x82\x38\x90\xaa\x2c\x49\xf5\xd8\xe1\xcc\x81\xba\x32\xfb\x62\x56\x24\x0e\xc8\x3a\x93\x28\x97\x53\x73\x67\xd9\x1c\xf6\x9d\xc3\xd1\xa2\x51\x70\x6a\xae\x33\x37\x6d\xec\xff\x77\x79\x6b\x18\x1e\xae\x4a\xb2\x71\x3d\x94\x87\x83\x4b\x69\x91\xaf\xe3\x28\x65\x0b\x51\x95\x23\xca\xba\x9f\x3c\x41\x72\xa1\x2b\x13\xdb\x66\x68\xd2\x7d\x05\xb5\xc5\x14\x15\x31\x22\xdb\x59\xe6\xd9\xe1\x1e\x3e\x4b\xd9\xa2\xee\xee\x35\x3f\x45\xac\x47\x9b\x73\xf8\xe5\x67\x5f\xbc\xf8\xe3\x3f\x4d\x84\xa3\x61\x9e\xbd\x1a\xaa\x96\x65\x7c\x05\xb8\x17\xbf\xff\xcd\xf3\x4f\x3e\x7f\xf1\xbb\x8f\xba\x7b\xfe\x1e\xd0\xee\x0b\xd0\x16\xb2\x9c\x56\x0b\x7d\x05\xe8\xaf\x3e\xfa\xc7\x97\x9f\xff\x7a\x03\xda\x7d\x36\xb9\x64\x78\x91\xf7\x29\x9e\x55\x75\xb1\x46\x3c\x45\x8d\x92\x75\x94\xee\x65\x7a\x8a\xf8\x66\x35\x59\xda\xf9\x36\x9f\x59\x39\x5f\x68\xd0\x67\x73\x35\x76\x2c\x8e\x73\x09\x7c\x7c\x02\xc6\xd3\xfa\x53\xc2\x96\xd0\x75\x9e\x03\xf3\x5c\x46\x2a\xad\xf2\x58\xd5\x63\xe7\xf9\x6f\x3f\xf9\xcf\xa7\x7f\xc2\x18\x3b\xd0\xca\x7c\xa1\xba\x0f\x29\x3f\xb5\x5f\x3e\x2e\x2e\xb6\x17\xdb\xdb\xd6\x59\x3f\x47\x03\xbf\x69\xcf\x61\x9c\xb5\xab\x3e\x5e\x0f\xed\xbd\x58\xd5\x87\xff\x0b\x00\x00\xff\xff\xc6\x86\x49\x17\x27\x18\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xb6\x61\x90\x26\x94\xc8\x5e\x9e\xbf\xbc\x3c\x7f\xfe\xf1\xed\x7b\x70\x26\x4d\xb4\xca\x8e\xf8\xc9\x9f\xd9\x46\x90\xf1\x9e\xf6\xfc\xaf\x3a\x0c\xed\x39\xe8\x38\xb2\x82\x90\xaf\x7f\x13\x72\xf0\x30\x69\xf5\xd8\x9a\xc4\xe0\x76\x08\x89\x43\x47\x7e\x1b\x17\xff\x0d\x39\x12\xba\x7d\x4a\x2a\xaf\x4a\xca\xd1\x25\x87\xe7\x98\x56\x47\xce\x84\x1b\x42\x8a\x4c\x39\x46\xd4\x69\xf7\x22\xf1\xd6\xd6\xf2\x21\xf1\x7e\x06\x00\x00\xff\xff\xbe\x6b\xf5\xd6\x0e\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xd1\x6e\xdb\x36\x14\x7d\xd7\x57\x70\x44\x81\xda\x45\x29\x79\xb1\x9b\xc4\x89\xa5\x7d\xc4\xf6\x36\x0c\x05\x2d\xd2\x36\x53\x89\x14\x44\x2a\x9e\xe0\x1a\x70\x8d\x06\x5d\x60\xa7\x31\x10\x0c\x46\xb1\x6c\xe8\x43\x96\xae\xc0\x06\x17\x7b\x18\xe4\xd5\xd8\xcf\xd4\x72\xec\xa7\xfc\xc2\x20\x4b\x4e\xed\xa6\xd8\xcb\x50\xa0\x7c\x11\x75\xef\xb9\x47\xe7\x9e\x7b\xa5\xb5\x5a\xc6\x3d\x60\x3b\x58\x4a\x13\x7a\x42\x32\xc5\x04\x47\x52\x31\xfb\x51\x08\xc1\x3d\xa3\xdd\xd6\x2a\x84\x1d\x02\xa9\x42\x87\x9a\x50\x09\x6f\x0f\x6c\xf9\xd4\xdd\x87\x96\xa6\x01\x00\xc0\x32\xbb\xaa\x47\x25\xe0\x56\x51\x11\x54\xeb\xc8\x61\xf5\x86\x02\xbe\x08\x38\xa1\x04\x5a\x4b\x2c\x00\x95\x46\x69\x05\xae\x49\x85\x98\xc2\x0e\xb3\xa1\x35\xeb\x5e\xce\x47\x6f\x2b\x46\xa3\x74\x03\xf4\x56\x38\xb7\x8a\x0a\xd0\x5a\x3c\x39\x8b\x4f\x47\x8b\x27\x67\xd7\x93\xfe\xe2\xe7\x5f\xe2\x28\x5a\xde\x7f\x8a\x07\x27\xf1\xe9\x28\x1e\x9c\xdc\xc4\xe3\xc1\xc9\xbb\x4e\x57\x9b\x0d\x5f\xa6\xd1\xf8\xe2\x75\x7c\xfe\x66\x3a\xee\xc5\xaf\x7a\xd7\x93\xfe\xec\xfc\x38\x8d\x4f\xa3\x67\x57\xc7\xaf\xa7\xe3\xde\x6c\x94\x16\xfc\x78\x14\x47\xd1\x6c\xf8\x72\xf6\xfb\x9f\x49\xfa\xed\xaf\xf3\x57\xdd\xf8\xe8\xaf\xf8\xf2\x45\xc2\x12\x45\xb3\xf3\xe3\x0f\x53\xff\x4c\x96\x95\x7f\x5c\x4c\xa3\x8b\x79\xe7\x28\xc1\x0d\xfa\xf1\xb3\xbf\xe7\x9d\x7e\x3c\xe9\x66\xdf\x1f\xf4\xe7\x6f\xce\xa6\xe3\xde\xd5\xf3\xa7\xd7\x93\xfe\xd5\xf3\xa7\x89\x96\xd3\x1f\xd2\xd7\xe9\x64\x18\x5f\xbe\x98\x8e\x7b\x8b\xe1\x6f\xef\x3a\xdd\x8a\xe1\xa5\x0e\x54\x0c\xc2\x0e\x33\x8b\xd3\x80\xb4\x7d\xe6\x29\x80\x65\xc8\x6d\x20\x7d\xdb\x84\x0d\xa5\x3c\xb9\x67\x18\x1e\xae\x53\x4c\xb6\xf4\xba\x10\x75\x87\xca\x90\x13\x66\xe3\x64\x8e\xba\x2d\xdc\x2c\x6b\x1c\x48\x03\x13\x59\x0d\x53\x90\x7e\x20\xbf\xb2\x1d\x46\xb9\x32\x6d\x8c\xbc\xa0\x8a\x76\x76\x8a\xdb\xdb\xe5\x07\x3b\xdb\x5b\x0f\xbe\x2c\x17\x8a\x45\x98\x0e\xc2\xf6\x85\x94\xc2\x67\x75\xc6\x4d\x88\xb9\xe0\xa1\x2b\x02\x09\xad\x8a\x91\xea\xb1\xd6\x14\x7e\x81\x10\x90\x8c\xd0\x87\x0e\xad\x29\x80\x50\xd6\x09\xe3\x72\x35\xcb\x35\x05\x19\x7f\x72\xb2\xdd\x22\x4c\x7a\x0e\x0e\xf7\xaa\x8e\xb0\x1f\xad\xa5\x09\x56\x18\x61\x82\x32\xbd\xf0\xbf\x05\xaf\x57\x48\x47\x28\x13\xee\x96\xca\xbb\x3b\xa5\xdd\x72\xb9\xf4\x11\x48\x4d\xf8\x2e\x56\x26\xc4\x81\x12\x1f\xa6\x6b\x81\xe3\xa0\x26\x23\xaa\x81\x7c\x2a\x3d\xc1\x25\x3b\x4c\xfe\x01\x3f\xa0\x89\x01\x8c\x4b\xeb\xd6\x7c\xac\xf7\x1c\xb9\xb5\x6e\x81\x09\x9a\x8c\x13\xd1\xd4\xd7\x83\x8f\x1f\x83\x6f\xbf\xcb\xeb\x5e\x20\x1b\xb9\x56\x3b\xbf\x9f\x4d\x7e\xc3\xd9\x4d\x6b\xab\xd8\x07\x52\x61\xff\xbd\xbd\xad\x96\xa2\xae\xe7\x60\x45\x01\xcc\x10\x46\xf6\x7c\xc8\x69\x13\x02\xbd\xdd\xbe\xcd\x41\x39\x59\x31\x68\x37\xcb\xb6\xda\xb9\x04\xa9\x7d\xd6\xfb\xf6\x09\xcc\x4e\xdc\xd8\xec\x5c\x85\x5e\x32\x6d\xfa\xbd\x32\x0e\xf0\x21\x4e\xa3\xd0\xd2\xee\xe4\x88\xb0\x03\x97\x72\x95\xd7\x7d\x8a\x49\x98\xab\x05\xdc\x4e\xfa\xcf\xe5\x5b\x4b\x56\x49\xd5\x37\xcc\xa5\x22\x50\xb7\x52\xc9\xb9\xa3\xd7\xa9\xfa\x7a\x49\x97\xbb\xfb\x49\x4d\xbd\x7b\x1f\x7c\x4c\xc0\xff\x30\x2c\x39\xab\x7b\xfb\x7e\xb1\x50\x28\xe4\xf7\xb5\x24\xb0\xe1\xe4\xbf\x01\x00\x00\xff\xff\xd0\x47\x6b\xa9\x56\x06\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sosoHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcd\x8a\xdb\x48\x10\x3e\x4b\x4f\x51\xf4\x71\xa0\x2d\x0f\xb3\x0b\xcb\xae\x2c\xd8\xdb\x2c\x0b\x61\x60\x92\x07\x28\x49\x65\xa9\x33\xad\x6e\xd3\x5d\xf2\x0f\x1a\x41\xce\xc9\x53\xe4\x21\x02\xf3\x40\x73\xc9\x5b\x84\x96\x2c\x5b\x76\x12\x72\x89\x0f\x56\xab\xaa\xf8\xfa\xd3\x57\x1f\x5f\xd7\x31\x35\x1b\x8d\x4c\x20\x72\xf4\x94\xd4\x84\x25\x39\x01\x8b\xbe\x8f\xe3\x38\x2d\xd5\x16\x0a\x8d\xde\xaf\x44\x61\x0d\xa3\x32\xe4\x44\x16\x77\x5d\x72\x03\x9e\xd1\x31\xdc\x24\x61\x72\x3e\xe8\xec\x0e\x2a\xf9\xa7\xc8\x62\x80\x4b\x00\x2d\x9b\x52\xfe\x25\x32\x00\x88\x21\xfc\xa2\x79\xbf\x94\x6b\x4d\x7b\x08\x7f\xb2\xb0\xba\x6d\x0c\xa0\x56\x95\x91\x8a\xa9\xf1\xd2\xb3\x23\x2e\xea\xb1\xef\x6b\xa7\xcc\x93\x5c\x42\x5e\xc9\x5d\xad\x98\x04\x78\x3e\x68\x5a\x89\x9d\x2a\xb9\xfe\x1b\xb0\x65\xfb\x8f\xc8\xe2\x38\x0a\xf7\xcc\xaf\xd1\xca\xb3\xac\x9c\x6d\x37\x70\x3e\xca\xb5\x6e\x7d\x0d\xb9\x75\x25\x39\x99\x5b\x66\xdb\x80\x2f\x9c\xd5\x1a\x1d\xa1\xc8\x46\x9c\xa8\xeb\x1c\x9a\x8a\x60\xf1\xaf\x63\x55\x68\xf2\x7d\x3f\x76\x00\x52\x84\xda\xd1\x7a\x25\x92\xae\x5b\x3c\xda\xd6\x15\xd4\xf7\xe1\xfc\xce\x93\x1b\x4f\xff\x95\x7d\xbf\xa8\xb9\xd1\xe2\x7b\x32\xc3\x57\xc2\xd5\xbb\xc4\x82\x95\x35\xb0\x39\xc8\x3b\xd0\xb5\x64\x55\xd5\x2c\x00\x9d\x42\x59\xb4\xce\x91\xe1\x95\x60\xd7\xd2\x44\xf0\xfa\x63\x8f\x9a\xee\xe4\xed\x72\x79\xa1\x66\x41\x86\xc9\xc1\xfb\xd6\xb3\x5a\x1f\x64\x58\x2e\x19\x96\x39\xf1\x8e\xc8\xcc\xe1\x00\x52\xcf\xce\x9a\x6a\xc2\x6c\x72\x79\x2b\xb2\xae\x5b\xbc\x55\xac\x09\x9e\xe1\x11\xd7\xd4\xf7\x69\x32\x8e\xcd\x99\x24\xa5\xda\xfe\x84\x59\x70\xc3\xed\x12\x02\x18\xf8\x06\xb5\x1e\x20\xef\xb9\xd1\xf0\x0c\xf7\x84\xe5\x80\x1e\x60\xe7\x18\x69\x82\xa7\x73\xd7\x91\x29\x27\xfd\xcf\x63\x71\x14\x45\xd3\x5b\x74\x61\xb0\x26\x97\x77\x22\x3b\xf6\x86\xa6\xc1\xed\x28\xa6\xc6\x9c\xf4\x4a\x3c\x60\x45\x60\x70\xab\x2a\x1c\x74\xa7\x3d\x36\x1b\x3d\xa8\x1b\x45\xc1\xae\xad\x9e\xc0\x36\x58\x29\x33\x4e\x5d\x8b\x38\x6a\x2b\xc6\x3b\x00\xa2\xa8\xeb\xd4\x1a\x16\x0f\x8e\x1e\xec\x60\x98\x68\x34\x53\xaa\xd5\x0c\x8d\x86\xcd\x88\x2c\xc5\x8b\xa2\x56\xe6\x49\x4c\xce\xf2\x36\xd8\xe8\x7f\x3a\xec\xac\x2b\xfb\x3e\xd9\x38\xda\x86\xca\x04\x3d\x9a\x2b\x7b\x7d\xf9\xf8\xfa\xf2\xe1\xeb\xe7\x2f\x41\xae\x34\xd1\x2a\x3b\xdd\x39\x89\x36\x2b\x04\x6e\x6f\x68\xcf\xbf\x9b\x9c\xa1\x3d\x87\xca\x09\xfb\xc4\xee\xd3\xaf\xd8\x1d\xd5\x4e\x5a\x3d\x2e\x31\x31\xb8\x1d\xe2\xe4\xb8\xbb\x1f\x06\xcb\x1f\x43\xe2\x04\x5f\x9c\x33\xcd\xab\x92\x72\x74\xc9\xf1\x39\xe6\xda\x09\x67\x82\x1b\xe2\x8c\x4c\x39\x86\xd9\xb9\x7a\x95\x8d\x6b\x6b\xf9\x98\x8d\xdf\x02\x00\x00\xff\xff\x90\xd3\x63\x4b\x38\x05\x00\x00"

func sosoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_sosoHtml,
		"soso.html",
	)
}

func sosoHtml() (*asset, error) {
	bytes, err := sosoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "soso.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
	"soso.html":                sosoHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
	"soso.html": &bintree{sosoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
