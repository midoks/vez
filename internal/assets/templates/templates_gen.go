// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\xaf\x9b\x3c\x10\x85\xf7\xfc\x8a\x91\x5f\xe9\x55\xbb\x70\x7c\x9b\x64\xd5\x0b\x54\x6a\x37\x5d\x54\xea\xba\x4b\x83\x27\x30\xa9\x3f\x90\x3d\x90\xa0\x28\xff\xbd\x22\x7c\x44\xb7\xed\xa6\x1b\x34\x02\xce\x33\xe7\x1c\x3b\xcb\xb2\x2c\x37\x34\x40\x6d\x75\x4a\x85\xa8\x83\x67\x4d\x1e\xa3\x28\x33\x80\xfc\x14\x02\x63\x5c\x3f\x1a\x79\xb2\x78\x85\xe9\x21\x2f\x51\x77\x70\xee\x13\xd3\x69\x94\x93\x0a\x3d\xcb\x0a\xf9\x82\xe8\x41\x5b\x6a\xbc\x24\x46\x97\x64\x8d\x7e\x42\x74\xa3\x3c\x80\x1b\xe5\x11\xaa\x10\x0d\x46\xc9\xa1\x7b\xec\x00\x78\xbb\xdf\x4a\x67\xe4\x11\x96\x5d\x7f\x92\x16\x11\x40\xae\xa1\x8d\x78\x2a\x84\x12\xab\xda\x55\xd3\x12\x94\x7b\x70\xd5\x84\x79\x01\xc6\x2b\x4b\xd7\x33\x9a\x79\x34\x58\x87\xa8\x99\x82\x97\x3e\x78\x04\xdb\xca\x0f\x1b\x11\x20\x4f\x43\xb3\xc2\x2a\x12\x70\x21\xc3\x6d\x21\x0e\x2f\x02\x5a\xa4\xa6\xe5\x42\xec\x8f\xa2\xcc\xfb\x84\x70\xb5\xe4\x7f\x7e\x9c\x2d\xfc\x57\x85\xc0\x89\xa3\xee\x84\x2a\x73\x95\x86\x66\x73\xa9\xf4\x36\xa6\x4e\xfb\x95\xfe\x34\x26\xca\xff\xeb\xd0\x8d\xaf\x70\xbb\xfd\x40\x1d\xef\xf7\x5c\x4d\x3f\x2e\xdd\x28\x43\x43\x99\xcd\x73\x6f\x57\xb5\xd7\x03\x6c\x55\xfd\x7e\x0a\xe8\x0d\x58\x4a\x2c\x7b\x9f\x78\xb4\x68\x96\x32\x9f\xcd\x59\xda\x1a\x4b\xf2\x20\xca\x9c\x5c\xb3\x66\xdd\x1f\xdf\x64\x85\x14\xeb\x42\xa8\x93\x1e\xa8\x0e\x7e\xd7\xf9\xe6\x91\xd0\xd2\xea\xaf\xb7\x8f\x9b\xa2\xe6\xab\x52\x66\xab\xe3\x3c\xd5\x91\x3a\x5e\xf4\x89\x35\x53\xad\xce\x49\x6d\x4d\xed\x1c\xf9\xdd\x39\x7d\x1a\x8a\xdb\xed\x73\x4f\xd6\x7c\x09\xce\x11\xdf\xef\x62\x6a\xf0\x21\x2e\xff\x4e\x69\xa9\x69\xed\xe4\xf0\x39\xfd\x13\x8c\xc7\x0e\xe7\x13\x50\x67\x3d\xe8\xf9\xad\x28\xb3\xd6\x9e\xd3\x8e\x3c\xf1\xd7\x15\x4b\xbe\xf9\xee\xbf\x05\x6d\xde\xbd\x7f\xcd\x9e\xa0\x2c\x57\x55\x30\xe3\x14\xb6\x65\x67\xcb\x5f\x01\x00\x00\xff\xff\x40\x4f\x5d\x5e\x46\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x8f\xdc\xc6\xb1\x7e\x9f\x5f\x51\xe6\x79\x91\x00\x77\x4d\xdf\x78\xd3\xce\xec\x81\xb4\xd2\x39\xeb\x03\x49\x3e\x81\x75\xb1\x61\x18\x41\x0f\xd9\x43\x52\xe2\x65\x4c\xf6\x70\x77\x67\xbd\x2f\x31\x8c\xbc\x25\x79\x32\x82\xc0\x0f\x49\x10\x04\x79\x4b\x80\x38\x81\x61\x3f\xe4\xcf\xd8\x4a\xf4\x2f\x82\x26\x67\x66\x39\xab\x91\xbc\x48\x62\x2c\x76\x86\x55\xac\xfa\xaa\xea\xab\xae\x26\x7b\x26\x6f\xdd\x7d\xf7\xe8\xd1\x07\xff\x7f\x0f\x52\x53\xe4\x87\xa3\xc9\xfa\xeb\x2d\x42\xe0\xbb\xdf\x7d\xf9\xf2\xd3\x3f\x00\x21\x56\xad\x55\x7c\x38\x9a\x14\xda\x28\x48\x8d\x59\x10\xfd\xf1\x32\x6b\xa7\xce\x51\x55\x1a\x5d\x1a\xf2\xe8\x6c\xa1\x1d\x88\x7a\x69\xea\x18\x7d\x6a\xc6\x16\xea\x00\xa2\x54\xd5\x8d\x36\xd3\xc7\x8f\xfe\x87\x04\x0e\x8c\xf7\xa1\xbc\x4f\x1e\xdf\x26\x47\x55\xb1\x50\x26\x9b\xe5\x43\xa0\x77\xee\x4d\x75\x9c\x68\xe7\x4d\xb1\xef\xab\x32\x59\xaa\x64\xe8\x16\x95\x5b\x8f\x52\x15\x7a\xea\xb4\x99\x3e\x59\x54\xb5\x19\xd8\x9c\x64\xb1\x49\xa7\xb1\x6e\xb3\x48\x93\x4e\x78\x1b\xb2\x32\x33\x99\xca\x49\x13\xa9\x5c\x4f\x19\xd2\xb7\xa1\x50\xa7\x59\xb1\x2c\x86\xaa\x65\xa3\xeb\x4e\x56\xb3\x5c\x4f\xcb\xaa\xaf\x2a\xcf\xca\xe7\x50\xeb\x7c\xea\x34\x69\x55\x9b\x68\x69\x20\x8b\xaa\xd2\x81\xb4\xd6\xf3\xa9\x33\x9e\xab\xd6\xca\xb8\x28\x13\xe7\x70\xd4\x53\xfc\xe2\xf3\x3f\xc1\x9d\xaa\x32\x8d\xa9\xd5\x02\x5e\xfc\xfa\xab\xef\xfe\xf6\x29\x1c\xbd\xf7\x1e\xbc\xf8\xfc\xa7\xdf\x7e\xf3\xd7\x9e\xfb\x01\xb0\x39\xcb\x75\x93\x6a\x6d\xb6\xa8\x8d\x51\x26\x8b\xc6\x51\xd3\x8c\x67\x1b\x20\x2c\xb2\x12\xa3\xa6\xf9\xef\x76\x7a\x7e\x7e\x67\x99\xe5\xf1\x51\x55\x14\x99\xb9\xb8\x70\xae\x09\x97\x66\x49\x9a\x67\x49\x6a\xc6\xbd\xcd\x38\xd6\x73\xb5\xcc\xcd\xbf\x8f\xdc\xe8\x7c\xde\x7d\xbc\x16\x66\x4d\xcd\xa4\x89\xea\x6c\x61\xa0\xa9\xa3\x4b\xef\x67\xcd\xf8\xd9\xc7\x4b\x5d\x9f\x11\x86\x8c\x21\xed\xf2\x79\xb6\x17\x67\x32\xee\x01\x0e\x3b\x12\x47\xa3\x0d\x5e\xac\x8c\x22\x2a\x26\x51\x9e\xf5\x4b\x45\x91\xc5\x72\x46\x7c\x5f\x78\x5e\xe8\xfa\x1e\x77\x59\x48\x85\x70\x40\x35\x67\x65\xd4\x87\xb7\xab\xae\xb9\x35\x1e\x2f\x54\xa2\x55\xcc\x31\xa9\xaa\x24\xd7\xcd\x59\x19\x67\x91\x32\x59\x55\x62\x54\x15\xeb\xbb\x36\x47\x15\x37\xb3\xb3\xde\x08\x9f\x35\x83\x5c\x76\xd6\x64\x6f\x40\x9a\xcc\x68\xd2\xea\x3a\x9b\xaf\xc1\x06\x6b\x34\xbe\x13\xfe\x5f\xf5\x30\x7a\x78\xf7\x47\xef\x3e\xfd\xe0\x71\xfd\x74\x79\x37\xb8\x17\x33\x71\x3f\xfa\xdf\xbb\xcf\xc5\xd3\x77\x5a\xba\xa0\x6e\xf4\xe0\xf1\xfb\xb5\x88\x06\xa3\xd5\xc3\xcf\x54\x16\x2f\xdf\x88\x1e\x55\xb1\x26\x4f\x4f\xbc\xe7\x39\xff\xf8\x78\xd1\x2f\xe3\x4b\xa6\x0e\x47\xad\xaa\xe1\xc7\x69\x61\x60\xda\x7f\x7d\xf2\x09\x7c\xf8\xd1\xc1\xe8\xc6\x7c\x59\x46\x16\xea\xc6\x4d\x38\x1f\x01\x58\xb3\xb4\x80\x29\xc4\x55\xb4\x2c\x74\x69\x30\xaa\xb5\x32\xfa\x5e\xae\xad\x74\xc3\xe9\xf1\x9c\x9b\x07\x23\x80\xb4\xc0\xa6\x8e\x60\x0a\x5b\x52\xd3\x02\xbb\x54\x3b\x0e\xd3\xc2\xb6\x33\xf2\x3c\x9f\x7a\x9a\xce\x23\x36\xf3\x78\x28\x94\xc7\xe7\x81\x9e\x29\x37\x08\x44\x48\x75\xe4\x1c\xac\xc3\x36\xc3\xa8\x89\x36\xeb\x90\xcd\x9d\xb3\x47\x2a\x79\xa8\x0a\x7d\x19\xfc\x43\xfa\xd1\x01\x8c\x00\x1a\x5c\xa8\x5a\x97\xe6\x61\x15\x6b\xcc\xca\x46\xd7\xe6\x8e\x9e\x57\xb5\xbe\x91\x16\x6f\x43\x73\xf3\x60\x74\x71\xf3\xc6\xcd\x83\xd1\x65\xcf\x46\xa3\xf3\xf3\x6c\x0e\x78\xbb\x36\x59\x94\xeb\x8b\x8b\xd1\xc4\x64\x26\xd7\x87\xe7\xe7\x1b\x1d\x3e\xb2\x8a\x8b\x0b\x20\xf0\xe2\x27\xbf\xff\xc7\x1f\xbf\x99\x8c\x7b\x93\xd1\xf9\xb9\xce\x9b\x81\xcf\xab\xb7\xcb\xf8\xe2\xc2\xb2\x3e\x68\xdd\x73\x7d\x76\x52\xd5\x71\x33\xe8\x55\xef\x77\x65\x57\x8b\x75\x9f\xe3\x6e\x5b\xb7\xa6\x7b\xf6\xcc\x53\x12\x97\x0d\x59\xd4\x7a\xae\x4d\x94\x12\xeb\x53\x57\xf9\xc0\xb9\x2a\x77\x27\x79\x68\xbe\x9d\xe5\x71\x56\xa8\x44\x63\xa4\xa2\x54\x47\xa9\xb2\x9d\xbb\x8e\x57\x21\x96\xc1\x55\xa7\xd1\xf7\xbb\xbd\x71\xea\xae\x13\xd7\x2c\xa2\x7f\xdd\xb9\x77\x54\x71\x83\x09\xc6\xd5\x72\x96\xeb\x28\xcf\xa2\xe7\x58\x6a\x73\x1d\xf7\x93\x93\x93\x75\xec\xeb\x06\x9c\x2f\xcb\x38\x2b\x93\x28\xad\xb2\x48\x37\x85\x6e\x1a\x95\xe8\x66\x17\x64\x34\x9a\x8c\xfb\x47\xf2\x68\x32\xab\xe2\x33\xfb\xdd\xb4\x09\x9c\x16\x79\xd9\xf4\xfb\xd5\xad\x3e\xf6\x89\xc0\xaa\x4e\xc6\x9c\x52\x3a\x6e\xda\xc4\x81\x6e\x6b\x9e\x3a\x71\xd6\x2c\x72\x75\x76\x0b\xca\xaa\xd4\x07\xce\xe1\x08\x60\xd2\x9c\x15\xb3\x2a\x87\x2c\x9e\x3a\xdb\x67\x89\x03\xf6\xd1\x79\xa7\x3a\x9d\x3a\x14\x28\x30\x16\x40\x28\x3b\x73\x80\xf5\x92\xde\x3e\xc0\xb6\xab\xba\xbb\xb9\x50\x26\x85\x79\x96\xe7\xa4\x5e\xda\x88\xba\xd5\x65\x15\xc7\x0e\x44\x79\xb6\xb8\xaa\x8b\xa7\xce\x03\x2e\xd1\xa5\x21\xd0\x88\x78\xe8\x0b\x01\x94\x30\x86\x3e\x73\xc1\xc5\x20\x14\x56\x90\x21\x07\xc6\x91\x07\x12\x39\x93\xe0\x21\x93\x04\xa9\x27\x81\x49\xa4\x21\x27\x1c\xa9\xe7\x01\xa7\xe8\xfa\xfe\x51\x80\xa1\x14\x20\x42\x14\x9e\x85\x70\xa5\x0f\x52\xa0\x0c\x5c\xa0\x20\x25\x52\x26\x5b\x17\x43\x9f\x47\xdd\x3d\x74\x79\x08\xbd\x8b\x44\x4f\x86\xc0\x28\x86\x2e\x03\xc6\x90\xb9\x02\x38\x52\xca\xc1\xeb\xdc\x6d\x02\x36\xa2\x14\x3e\xec\x44\x64\x1c\xfd\x50\x42\x10\x20\xa3\x1e\x30\x1f\x7d\xdf\x83\x50\x82\x2d\x8c\x41\x28\x8f\x43\x81\x6e\xb4\x2e\x0e\xba\xe2\x24\xe9\x8a\x83\xae\x38\x46\xfa\xe2\x88\xad\x8e\xd8\xea\x6c\x71\xa4\x2f\xae\x0f\x45\xfa\x50\x5d\x3e\x21\xf1\xd0\xa5\x12\x5c\x14\xa1\x47\x18\x45\x8f\xcb\x2e\x6d\xd9\x91\xc5\x5c\xd1\x92\xbe\x42\xd2\x95\x48\x6c\x8d\x24\xc0\x50\x48\xd2\xd5\x48\x76\x8c\x49\x57\x23\xb1\x35\x4a\x62\xf3\x20\x7d\x8d\x64\x18\xf8\x88\x51\xb7\xe3\xde\xa6\x6d\xa3\x51\xe4\x5d\x35\xb6\x34\xa0\xc7\x5d\x0f\x83\xd5\x83\x80\x82\xeb\x63\xe0\x89\xa3\x80\x82\xe7\xa1\xe7\x09\xf0\x05\x4a\xe1\x81\xcf\xc1\xe3\xe8\x4a\x01\x3e\x3f\x96\x52\x71\xe0\x40\x81\x32\xc2\x09\x7f\xc2\x2f\x65\x4e\x78\xca\x02\x9b\x41\x14\x22\x0d\x3a\xca\x5c\xa4\x52\x82\x44\xbb\x0e\xfa\x6b\xc6\x51\xfa\x12\xa8\x65\x81\x72\x62\xfb\x6a\x39\xa0\x32\x24\x21\x32\xd6\xf5\x31\x08\x5a\xe4\xbe\x7f\xe4\xbb\x28\x98\x0f\xd2\x43\x61\xdb\x44\xc1\x65\xc8\x19\x6c\x73\x5d\x3d\xf0\x28\xba\x9c\x01\x0f\x50\xc8\x63\x19\x62\x28\x83\x96\x49\xcb\x58\x1a\x60\x48\x6d\xf3\x82\xc0\x46\xb3\x6c\x07\x84\xa3\xef\xf3\xf5\xb5\x8f\x3e\xf7\x81\x76\xcc\x0a\x22\x90\x7b\x92\xf8\xc8\xa9\x4f\x42\xb4\xc5\x74\xd7\xab\x07\x3d\x28\xc8\x10\x79\xcb\x3c\x94\x6e\x70\xec\x51\x0c\x59\xe4\x23\xf3\xfc\x1e\x39\xf4\x6c\x03\x02\xdf\xdb\x08\x01\xf2\x80\x01\x25\x2e\x4a\xea\x11\x81\x21\x15\x24\x40\xe6\x07\xdd\x50\x70\xb7\x17\xd6\x09\xaf\xec\xfb\x86\x1d\xbe\x6e\xa6\xc7\xfd\x50\x5f\x9d\xef\xb4\x2a\xf4\xd5\xd1\xf6\x80\x79\xce\x70\x78\xed\x50\x06\x28\x5c\x09\x0c\x99\xf4\x14\xba\xb6\xc7\xf6\x8f\xa0\x4f\x03\xa0\x39\xf1\xc0\xbb\x7d\xa9\x06\x86\x2e\xf8\xe8\xb6\xfe\xc0\x16\xec\x65\x2a\xd1\xdd\xd5\x11\x74\x5b\x22\x53\xde\xca\xab\xb6\xc7\x4c\xee\x31\xf5\x77\xc2\x33\xe9\x11\x9b\xd9\x7d\x26\xc0\x45\x3f\x14\x4f\xf8\x4e\x00\xd2\x79\xa5\x84\xed\xea\xd0\x6d\x19\xf2\x50\xdc\x1f\x94\xb5\x7a\xc0\xd1\x05\x26\x9f\xf8\xe8\x53\x3f\x77\xd1\xb5\xe3\x02\xeb\xff\x27\x4c\x1e\x33\xda\x12\xb9\x07\x5c\xbc\x02\x2e\x8f\x39\xba\x2b\x67\xfc\x26\xea\x8d\xea\x8e\x38\xd7\xe0\x9e\x02\xdf\x4c\x03\x30\xe8\xe6\x61\x47\x01\xbc\x1d\x2a\x08\x07\x7e\xbc\x23\xdb\x81\x5a\x15\xcc\x05\x9e\x12\xd9\x8a\x54\x3e\x91\xab\x82\x82\xdc\x48\xc1\x40\x12\x8a\x01\xdb\xb4\x91\xb0\x96\xf0\x55\x41\x5c\x10\x2d\x11\xc7\x9e\xb5\xee\x44\x6a\x45\xd6\xf2\xa1\x31\xb0\x54\xac\x0a\x22\x89\xb4\x90\xc7\xac\x15\xab\x82\x76\x82\xec\x05\x97\x88\x3e\xf8\xb1\xb7\x2a\x24\xc8\x1e\xef\x49\xf0\x3d\x44\x2d\x74\xb5\xc8\x35\x89\xb2\x3a\xba\x26\x61\x8c\x81\xa7\x04\x88\x3e\x2b\xe2\x01\x85\x5e\xb2\xb2\x07\x74\x1d\xf0\x4d\x0f\xa7\x9e\xf7\x40\x05\x10\xf4\x28\x36\x14\xbd\xdd\x8b\xb4\x2b\x3a\x58\x15\x01\xf1\x95\x0f\xfe\xba\xf5\x2e\x4a\x2f\xb0\x5b\xb8\xf0\x8f\x04\x72\xc9\xed\x35\xe7\x1e\x48\x0c\xa8\x0b\x8c\x42\x00\x8c\x36\x12\x7d\xd7\x07\x7b\xc7\xae\x2c\xeb\xc2\x51\xf8\xb7\xb7\x38\xd6\xea\x7b\x28\x49\xea\x2c\xbe\x1e\x13\xc0\xd1\xbd\x6d\xc7\x91\xad\x57\x68\xa7\xb1\xad\xba\xa2\xb5\xcf\x12\xb7\xbd\xaa\xb5\xeb\xda\x4f\xc9\x55\x75\x77\xa3\x25\xa2\x9f\x19\xfe\xca\xfa\x17\xaf\xcc\xbd\xd8\x33\xca\x62\xdf\x2c\xad\x0a\xcf\x6a\xaf\x06\xa4\x7b\x93\xb6\x4b\x7a\x4f\xd6\x4c\xec\x4f\x3b\xdc\xa4\x5d\xb0\x2e\xdc\x7f\x34\xef\x07\x7d\x96\x7b\xc8\x0e\xf7\x90\x6d\x4d\xf7\xb2\xcd\xdc\x7d\x74\xdb\x8a\x7e\xa8\xc4\x5f\x4f\x78\x68\x77\x83\x5d\x75\x2f\xb5\x57\xf4\x64\x2d\xed\xa3\xfc\x87\x4c\xfd\xea\x94\x4c\xec\xbb\xad\x7d\x09\xb6\x2f\xc5\xba\x86\x28\x57\x4d\x33\x75\x16\x44\xc0\x2c\x21\xb1\xaa\x9f\x83\xd1\xa7\x86\x9c\xa4\x99\xd1\x50\xcc\x88\xd8\x4c\x4c\x9c\xb5\x1b\x6b\x7b\x06\x52\x59\xa9\xeb\xf5\xbd\xdd\xbb\x31\x99\xe7\xfa\x14\xec\x07\x39\xa9\xd5\x02\x54\x9e\x25\x25\xc9\x8c\x2e\x1a\x12\xe9\xd2\xe8\x1a\x9e\x2d\x1b\x93\xcd\xcf\xc8\xfa\x34\xf5\x3a\x75\x9e\x90\xc6\xa8\xda\x6c\xe3\x00\x4c\xd4\xe6\xfd\xdf\xb9\x12\x70\x4f\x98\x62\x46\xb8\xfd\xc8\x13\x42\x87\x75\x75\x97\xb1\x8e\xaa\xba\x3b\xe1\x10\xfb\x6a\x3f\x88\x61\xb7\x92\x36\xd9\xc0\xcf\x32\x28\x34\xe1\x0e\xf4\xbf\x83\x39\x92\x3a\x90\xea\x2c\x49\xcd\xd4\x11\xdc\x81\xba\xb2\xfb\x62\x56\x24\x0e\xa8\x3a\x53\x24\x57\x33\x7b\x66\xd9\xbe\xec\x3b\x87\x93\x65\xa3\xe1\xd4\x1e\x67\x6e\xf5\xb9\xff\xd7\xe5\xa9\x61\x7c\xb8\x6e\xc9\x36\xf4\x58\x1d\x8e\x2e\xa5\x65\xbe\xc9\xa3\x54\x2d\x44\x55\x4e\x18\xef\xbe\xf2\x84\xa8\xa5\xa9\x6c\x6e\xdb\x4b\x5b\xee\x6b\xa8\x2d\x66\xa4\x88\x09\xdd\xad\x32\xcf\x0e\xf7\xf0\x59\xaa\x96\x74\x67\xaf\xc5\x29\xe1\x03\xda\x9c\xc3\x6f\xbf\xfa\xe6\xe5\x6f\xfe\x62\x33\x9c\x8c\xf3\xec\xf5\x50\xb5\x2a\xe3\x6b\xc0\xbd\xfc\xd5\xcf\x5f\x7c\xf1\xf5\xcb\x5f\x7e\xd6\x1d\xf4\xf7\x80\x76\x3f\x6f\xed\x20\xab\x59\xb5\x34\xd7\x80\xfe\xee\xb3\x3f\x7f\xfb\xf5\xcf\xb6\xa0\xdd\x4f\x5b\x97\x0c\x2f\xf3\x21\xc5\xf3\xaa\x2e\x2e\x97\xf6\xab\x04\xcf\x88\xd8\x2e\xa2\x9e\x6d\xb1\x4b\x63\x56\x2e\x96\x06\xcc\xd9\x42\x4f\x9d\x46\xab\xda\x1e\x52\xd7\x78\x16\x7b\xf3\xe3\x01\x0c\x85\x6e\xd6\x1c\x58\xe4\x2a\xd2\x69\x95\xc7\xba\x9e\x3a\x2f\x7e\xf1\xc5\xdf\xbf\xfc\x2d\x22\xee\xae\xa4\xf7\x7a\xc8\x61\x01\x16\x69\x3b\x7b\xe3\x38\x6b\xd7\x43\xba\xb9\xec\x0f\xbd\xba\x3e\xfc\x67\x00\x00\x00\xff\xff\xa9\x59\xf7\x5f\xb7\x16\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
