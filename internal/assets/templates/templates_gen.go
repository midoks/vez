// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x8f\xdb\xc6\xd5\xbe\xd7\xaf\x38\xe1\x7b\x63\x03\x99\xa3\xf9\xe2\x90\xf4\x4a\xfb\xc2\x5e\xbb\x55\x0a\xaf\xd3\x22\xfe\x48\x10\x04\xc5\x88\x1c\x89\xb4\xf9\xa1\x90\x14\x77\xa5\xcd\xde\x34\x08\x7a\xd7\xf6\x2a\x28\x8a\x5c\xb4\x45\x51\xf4\xae\x05\x9a\x16\x41\x72\xd1\x3f\x93\xb8\xf5\xbf\x28\x86\x94\xb4\xd4\x5a\x76\x7c\xd1\x60\xb1\x12\xcf\xe1\xcc\x73\xce\xf3\x9c\x39\xa3\x21\x47\x6f\xdd\x7d\xf7\xe4\xe1\x07\x3f\xbd\x07\x71\x9d\xa5\xc7\x83\xd1\xe6\xeb\x2d\x42\xe0\xbb\x3f\x7d\xf9\xe2\xd3\xbf\x00\x21\xd6\x6d\x74\x74\x3c\x18\x65\xa6\xd6\x10\xd7\xf5\x82\x98\x8f\x97\x49\x33\x76\x4e\x8a\xbc\x36\x79\x4d\x1e\xae\x16\xc6\x81\xb0\xb3\xc6\x4e\x6d\xce\xeb\xa1\x85\x3a\x82\x30\xd6\x65\x65\xea\xf1\xa3\x87\x3f\x22\xbe\x03\xc3\x43\x28\xef\x93\x47\xb7\xc9\x49\x91\x2d\x74\x9d\x4c\xd3\x3e\xd0\x3b\xf7\xc6\x26\x9a\x1b\xe7\x75\xb1\xef\xeb\x7c\xbe\xd4\xf3\xfe\xb4\x30\xdf\xcd\xc8\x75\x66\xc6\x4e\x93\x98\xb3\x45\x51\xd6\xbd\x31\x67\x49\x54\xc7\xe3\xc8\x34\x49\x68\x48\x6b\xbc\x0d\x49\x9e\xd4\x89\x4e\x49\x15\xea\xd4\x8c\x19\xd2\xb7\x21\xd3\xe7\x49\xb6\xcc\xfa\xae\x65\x65\xca\xd6\xd6\xd3\xd4\x8c\xf3\xa2\x63\x95\x26\xf9\x33\x28\x4d\x3a\x76\xaa\xb8\x28\xeb\x70\x59\x43\x12\x16\xb9\x03\x71\x69\x66\x63\x67\x38\xd3\x8d\xb5\x71\x91\xcf\x9d\xe3\x41\x27\xf1\xf3\xcf\xff\x06\x77\x8a\xa2\xae\xea\x52\x2f\xe0\xf9\xef\xbf\xfa\xee\x5f\x9f\xc2\xc9\x7b\xef\xc1\xf3\xcf\x7f\xf9\xed\x37\xff\xec\xb4\xef\x01\xd7\xab\xd4\x54\xb1\x31\xf5\x0e\xb5\xaa\x75\x9d\x84\xc3\xb0\xaa\x86\xd3\x2d\x10\x66\x49\x8e\x61\x55\xfd\x7f\x33\xbe\xb8\xb8\xb3\x4c\xd2\xe8\xa4\xc8\xb2\xa4\xbe\xbc\x74\xde\x10\xae\x32\xe9\xac\xfd\x78\x25\xcc\x86\xc0\xa8\x0a\xcb\x64\x51\x43\x55\x86\x57\xb3\x9f\x56\xc3\xa7\x1f\x2f\x4d\xb9\x22\x0c\x19\x43\xda\xe6\xf3\xf4\x20\xce\x68\xd8\x01\x1c\x77\x54\x5f\x81\xb6\xcf\xec\x7b\x90\x06\x3b\x98\x48\xd7\x9a\xe8\x88\x84\x69\xd2\xad\x0a\x4d\x16\xcb\x29\xf1\x3c\xa1\x54\xe0\x7a\x8a\xbb\x2c\xa0\x42\x38\xa0\xab\x55\x1e\x76\x51\xed\x02\xab\x6e\x0d\x87\x0b\x3d\x37\x3a\xe2\x38\x2f\x8a\x79\x6a\xaa\x55\x1e\x25\xa1\xae\x93\x22\xc7\xb0\xc8\x36\x77\x6d\x6a\x3a\xaa\xa6\xab\x6e\x10\x3e\xad\xfa\x69\xf4\x97\x5f\x37\x80\x54\x49\x6d\x48\x63\xca\x64\xb6\x01\xeb\x2d\xc7\xe8\x4e\xf0\x93\xe2\x41\xf8\xe0\xee\xcf\xde\x7d\xf2\xc1\xa3\xf2\xc9\xf2\xae\x7f\x2f\x62\xe2\x7e\xf8\xe3\xbb\xcf\xc4\x93\x77\x1a\xba\xa0\x6e\x78\xfa\xe8\xfd\x52\x84\xbd\x2e\xea\xe0\xa7\x3a\x89\x96\xaf\x45\x0f\x8b\xc8\x90\x27\x67\xea\x59\xca\x3f\x9e\x2c\xba\x15\xbb\xd5\xe9\x78\xd0\xe8\x12\x7e\x1e\x67\x35\x8c\xbb\xaf\x4f\x3e\x81\x0f\x3f\x3a\x1a\xdc\x98\x2d\xf3\xd0\x02\xdd\xb8\x09\x17\x03\x00\x3b\x2c\xce\x60\x0c\x51\x11\x2e\x33\x93\xd7\x18\x96\x46\xd7\xe6\x5e\x6a\xac\x75\xc3\xe9\xf0\x9c\x9b\x47\x03\x80\x38\xc3\xaa\x0c\x61\x0c\x3b\x49\xe3\x0c\xdb\x44\x5b\x05\xe3\xcc\xd6\x31\x54\xca\xa3\xca\xd0\x59\xc8\xa6\x8a\x07\x42\x2b\x3e\xf3\xcd\x54\xbb\xbe\x2f\x02\x6a\x42\xe7\x68\x13\xb6\xea\x47\x9d\x9b\x7a\x13\xb2\xba\xb3\x7a\xa8\xe7\x0f\x74\x66\xae\x82\x7f\x48\x3f\x3a\x82\x01\x40\x85\x0b\x5d\x9a\xbc\x7e\x50\x44\x06\x93\xbc\x32\x65\x7d\xc7\xcc\x8a\xd2\xdc\x88\xb3\xb7\xa1\xba\x79\x34\xb8\xbc\x79\xe3\xe6\xd1\xa0\xb7\x70\x06\x17\x17\xc9\x0c\xf0\x76\x59\x27\x61\x6a\x2e\x2f\x07\xa3\x3a\xa9\x53\x73\x7c\x71\xb1\xf5\xe1\x43\xeb\xb8\xbc\x04\x02\xcf\x7f\xf1\xe7\xff\xfc\xf5\x9b\xd1\xb0\x1b\x32\xb8\xb8\x30\x69\xd5\x9b\xf3\xf2\xed\x3c\xba\xbc\xb4\x7d\xd3\x2b\xdc\x33\xb3\x3a\x2b\xca\xa8\xea\x55\xaa\x9b\x77\x6d\xfb\x8a\x4c\x97\xe3\x7e\x51\x77\x43\x07\xa3\x61\xb7\x41\x0f\x46\xd3\x22\x5a\xb5\xa5\x6d\xe6\x70\x9e\xa5\x79\xd5\x2d\xe9\x5b\xc3\xe1\xd9\xd9\x19\x9e\x09\x2c\xca\xf9\x90\x53\x4a\x87\x55\x33\x77\xa0\xdd\x02\xc6\x4e\x94\x54\x8b\x54\xaf\x6e\x41\x5e\xe4\xe6\xc8\x39\x1e\x00\x8c\xaa\x55\x36\x2d\x52\x48\xa2\xb1\xb3\xeb\x3f\x07\xec\x46\x7a\xa7\x38\x1f\x3b\x14\x28\x30\xe6\x43\x20\xdb\xe1\x00\x1b\xde\xbb\xed\x6c\x47\xbd\xbd\xb9\xd0\x75\x0c\xb3\x24\x4d\x49\xb9\xb4\x11\x4d\x63\xf2\x22\x8a\x1c\x08\xd3\x64\x71\xdd\x17\x8d\x9d\x53\x2e\xd1\xa5\x01\xd0\x90\x28\xf4\x84\x00\x4a\x18\x43\x8f\xb9\xe0\xa2\x1f\x08\x6b\xc8\x80\x03\xe3\xc8\x7d\x89\x9c\x49\x50\xc8\x24\x41\xaa\x24\x30\x89\x34\xe0\x84\x23\x55\x0a\x38\x45\xd7\xf3\x4e\x7c\x0c\xa4\x00\x11\xa0\x50\x16\xc2\x95\x1e\x48\x81\xd2\x77\x81\x82\x94\x48\x99\x6c\x5c\x0c\x3c\x1e\xb6\xf7\xd0\xe5\x01\x74\x53\x24\x2a\x19\x00\xa3\x18\xb8\x0c\x18\x43\xe6\x0a\xe0\x48\x29\x07\xd5\x4e\xb7\x09\xd8\x88\x52\x78\xb0\x17\x91\x71\xf4\x02\x09\xbe\x8f\x8c\x2a\x60\x1e\x7a\x9e\x82\x40\x82\x25\xc6\x20\x90\x93\x40\xa0\x1b\x6e\xc8\x41\x4b\x4e\x92\x96\x1c\xb4\xe4\x18\xe9\xc8\x11\xcb\x8e\x58\x76\x96\x1c\xe9\xc8\x75\xa1\x48\x17\xaa\xcd\x27\x20\x0a\x5d\x2a\xc1\x45\x11\x28\xc2\x28\x2a\x2e\xdb\xb4\x65\x2b\x16\x73\x45\x43\x3a\x86\xa4\xa5\x48\x2c\x47\xe2\x63\x20\x24\x69\x39\x92\xbd\xc1\xa4\xe5\x48\x2c\x47\x49\x6c\x1e\xa4\xe3\x48\xfa\x81\x4f\x18\x75\x5b\xed\x6d\xda\x36\x1a\x45\xde\xb2\xb1\xd4\x80\x4e\xda\x1a\xfa\xeb\x53\x9f\x82\xeb\xa1\xaf\xc4\x89\x4f\x41\x29\x54\x4a\x80\x27\x50\x0a\x05\x1e\x07\xc5\xd1\x95\x02\x3c\x3e\x91\x52\x73\xe0\x40\x81\x32\xc2\x09\x7f\xcc\xaf\x6c\x4e\x78\xcc\x7c\x9b\x41\x18\x20\xf5\x5b\xc9\x5c\xa4\x52\x82\x44\xbb\x0e\xba\x6b\xc6\x51\x7a\x12\xa8\x55\x81\x72\x62\xeb\x6a\x35\xa0\x32\x20\x01\x32\xd6\xd6\xd1\xf7\x1b\xe4\x9e\x77\xe2\xb9\x28\x98\x07\x52\xa1\xb0\x65\xa2\xe0\x32\xe4\x0c\x76\xb9\xae\x4f\x15\x45\x97\x33\xe0\x3e\x0a\x39\x91\x01\x06\xd2\x6f\x98\xb4\x8a\xc5\x3e\x06\xd4\x16\xcf\xf7\x6d\x34\xab\xb6\x4f\x38\x7a\x1e\xdf\x5c\x7b\xe8\x71\x0f\x68\xab\xac\x20\x02\xb9\x92\xc4\x43\x4e\x3d\x12\xa0\x25\xd3\x5e\xaf\x4f\x3b\x50\x90\x01\xf2\x86\x29\x94\xae\x3f\x51\x14\x03\x16\x7a\xc8\x94\xd7\x21\x07\xca\x16\xc0\xf7\xd4\xd6\xf0\x91\xfb\x0c\x28\x71\x51\x52\x45\x04\x06\x54\x10\x1f\x99\xe7\xb7\x4d\xc1\xdd\xce\xd8\x24\xbc\xb6\x3f\x49\xb6\xf9\xda\x9e\x1e\x76\x4d\x7d\xbd\xbf\xe3\x22\x33\xd7\x5b\x5b\x01\x53\x4e\xbf\x79\x6d\x53\xfa\x28\x5c\x09\x0c\x99\x54\x1a\x5d\x5b\x63\xfb\x47\xd0\xa3\x3e\xd0\x94\x28\x50\xb7\xaf\xdc\xc0\xd0\x05\x0f\xdd\xc6\xeb\x8d\x05\x7b\x19\x4b\x74\xf7\x7d\x04\xdd\x86\xc8\x98\x37\xf2\xfa\xd8\x09\x93\x07\x86\x7a\x7b\xe1\x99\x54\xc4\x66\x76\x9f\x09\x70\xd1\x0b\xc4\x63\xbe\x17\x80\xb4\xb3\x62\xc2\xf6\x7d\xe8\x36\x0c\x79\x20\xee\xf7\x68\xad\x4f\x39\xba\xc0\xe4\x63\x0f\x3d\xea\xa5\x2e\xba\xb6\x5d\x60\xf3\xff\x98\xc9\x09\xa3\x0d\x91\x07\xc0\xc5\x4b\xe0\x72\xc2\xd1\x5d\x3b\xc3\xd7\x49\x5f\xeb\xf6\xc0\xfb\x06\xda\x53\xe0\xdb\x6e\x00\x06\x6d\x3f\xec\x39\x80\x37\x7d\x07\xe1\xc0\x27\x7b\xb6\x6d\xa8\x75\xc6\x5c\xe0\x31\x91\x8d\x88\xe5\x63\xb9\xce\x28\xc8\xad\xe5\xf7\x2c\xa1\x19\xb0\x6d\x19\x09\x6b\x08\x5f\x67\xc4\x05\xd1\x10\x31\x51\x76\x74\x6b\x52\x6b\xb2\x86\xf7\x07\x03\x8b\xc5\x3a\x23\x92\x48\x0b\x39\x61\x8d\x58\x67\xb4\x35\x64\x67\xb8\x44\x74\xc1\x27\x6a\x9d\x49\x90\x1d\xde\x63\xff\x7b\x84\x5a\x98\x62\x91\x1a\x12\x26\x65\xf8\x86\x82\x31\x06\x4a\x0b\x10\x5d\x56\x44\x01\x85\xce\xb2\xb6\x02\xba\x09\xf8\xba\x1f\xa7\x4e\x77\x5f\xfb\xe0\x77\x28\x36\x14\xbd\xdd\x99\xb4\x25\xed\xaf\x33\x9f\x78\xda\x03\x6f\x53\x7a\x17\xa5\xf2\xed\x16\x2e\xbc\x13\x81\x5c\x72\x7b\xcd\xb9\x02\x89\x3e\x75\x81\x51\xf0\x81\xd1\x4a\xa2\xe7\x7a\x60\xef\xd8\x95\x65\xa7\x70\x14\xde\xed\x1d\x8e\x1d\xf5\x3d\x92\xcc\xcb\x24\x7a\x33\x25\x80\xa3\x7b\xdb\xb6\x23\xdb\xac\xd0\xd6\x63\x4b\x75\xcd\x6b\x7f\x4b\xdc\xe6\xba\xd7\xae\x6b\x2f\x26\xd7\xdd\xed\x8d\x86\x88\xae\x67\xf8\x4b\xeb\x5f\xbc\xd4\xf7\xe2\x40\x2b\x8b\x43\xbd\xb4\xce\x94\xf5\x5e\x0f\x48\x0f\x26\x6d\x97\xf4\x81\xac\x99\x38\x9c\x76\xb0\x4d\x3b\x63\x6d\xb8\xff\x69\xde\xa7\x5d\x96\x07\xc4\x0e\x0e\x88\x6d\x87\x1e\x54\x9b\xb9\x87\xe4\xb6\x8c\x7e\xa8\xc4\x5f\x2d\x78\x60\x77\x83\x7d\x77\x67\x35\xd7\xfc\x64\x63\x1d\x92\xfc\x87\x4c\xfd\x7a\x97\x8c\xec\xd9\xd6\x1e\x82\xed\xa1\xd8\x94\x10\xa6\xba\xaa\xc6\xce\x82\x08\x98\xce\x49\xa4\xcb\x67\x50\x9b\xf3\x9a\x9c\xc5\x49\x6d\x20\x9b\x12\xb1\xed\x98\x28\x69\xb6\xa3\xed\x29\x5b\x27\xb9\x29\x37\xf7\xf6\xef\x46\x64\x96\x9a\x73\xb0\x1f\xe4\xcc\x3e\xbb\xeb\x34\x99\xe7\x24\xa9\x4d\x56\x91\xd0\xe4\xb5\x29\xe1\xe9\xb2\xaa\x93\xd9\x8a\x6c\xce\xeb\xaf\x72\xa7\x73\x52\xd5\xba\xac\x77\x71\x00\x46\x7a\xfb\x3c\xee\x5c\x0b\x78\x20\x4c\x36\x25\xdc\x7e\xa4\x73\x42\xfb\xbc\xda\xcb\xc8\x84\x45\xd9\x3e\x0c\x12\x7b\xb4\xef\xc5\xb0\x5b\x49\x33\xdf\xc2\x4f\x13\xc8\x0c\xe1\x0e\x74\x6f\x45\x1c\x49\x1d\x88\x4d\x32\x8f\xeb\xb1\x23\xb8\x03\x65\x61\xf7\xc5\x24\x9b\x3b\xa0\xcb\x44\x93\x54\x4f\x4d\x3a\x76\x76\x87\x7d\xe7\x78\xb4\xac\x0c\x9c\xa7\x49\xfe\xec\x56\x97\xfb\xff\x5d\x3d\x35\x0c\x8f\x37\x25\xd9\x85\x1e\xea\xe3\xc1\x95\xb5\x4c\xb7\x79\xe4\xba\x81\xb0\x48\x09\xe3\xed\x57\x3a\x27\x7a\x59\x17\x36\xb7\xdd\xa5\xa5\xfb\x0a\x69\xb3\x29\xc9\x22\x42\xf7\x59\xa6\xc9\xf1\x01\x3d\x73\xdd\x90\xf6\x4d\xc8\xe2\x9c\xf0\x9e\x6c\xce\xf1\xb7\x5f\x7d\xf3\xe2\x0f\xff\xb0\x19\x8e\x86\x69\xf2\x6a\xa8\x52\xe7\xd1\x1b\xc0\xbd\xf8\xdd\xaf\x9f\x7f\xf1\xf5\x8b\xdf\x7e\xd6\x3e\x0d\x1e\x00\x6d\x5f\xa3\xec\x21\xeb\x69\xb1\xac\xdf\x00\xfa\xbb\xcf\xfe\xfe\xed\xd7\xbf\xda\x81\xb6\xaf\x50\xae\x14\x5e\xa6\x7d\x89\x67\x45\x99\x5d\x2d\xed\x97\x05\x9e\x12\xb1\x5b\x44\x9d\xda\x62\x5f\xc6\x24\x5f\x2c\x6b\xa8\x57\x0b\x33\x76\x2a\xa3\xcb\x30\xde\x65\x68\xb1\xdb\x52\x94\x45\x0a\x7d\xa3\xed\x35\x07\x16\xa9\x0e\x4d\x5c\xa4\x91\x29\xc7\xce\xf3\xdf\x7c\xf1\xef\x2f\xff\x88\x88\xfb\x2b\xe9\xbd\x0e\xb2\x4f\xc0\x22\xed\x7a\x6f\x18\x25\xcd\xa6\x49\xb7\x97\xdd\x43\xaf\x29\x8f\xff\x1b\x00\x00\xff\xff\xd6\xdf\x51\xa8\xc5\x14\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6e\xdb\x30\x0c\xc7\xcf\xf6\x53\x10\x3a\x16\x50\x9c\xa2\x1b\x30\x6c\x89\x81\xdd\xba\xcb\x50\xa0\xdb\x03\xd0\x36\x6d\x6b\x95\xa5\x40\xa2\x93\x16\xae\x81\x9d\xb7\xa7\xd8\x43\x0c\xe8\x03\xf5\xb2\xb7\x18\xe4\x8f\xc6\xc9\xb6\xc3\x72\x88\x69\x93\xfa\x91\xfa\x8b\x62\xd7\x31\x35\x3b\x8d\x4c\x20\x32\xf4\x94\xd4\x84\x05\x39\x01\xab\xbe\x8f\xe3\x78\x53\xa8\x3d\xe4\x1a\xbd\xdf\x8a\xdc\x1a\x46\x65\xc8\x89\x34\xee\xba\xe4\x02\x3c\xa3\x63\xb8\x48\x42\xe4\x32\xd0\xd9\x03\x54\xf2\xb5\x48\x63\x80\x53\x80\x96\x4d\x21\xdf\x88\x14\x00\x62\x08\xbf\x68\xe9\x2f\x64\xa9\xe9\x1e\xc2\x9f\xcc\xad\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\xf3\x7a\xf4\xfb\xda\x29\x73\x27\xd7\x90\x55\xf2\x50\x2b\x26\x01\x9e\x1f\x34\x6d\xc5\x41\x15\x5c\xbf\x05\x6c\xd9\xbe\x13\x69\x1c\x47\x21\xcf\x32\x8d\x56\x9e\x65\xe5\x6c\xbb\x83\xa3\x29\x4b\xdd\xfa\x1a\x32\xeb\x0a\x72\x32\xb3\xcc\xb6\x01\x9f\x3b\xab\x35\x3a\x42\x91\x8e\x9c\xa8\xeb\x1c\x9a\x8a\x60\xf5\xde\xb1\xca\x35\xf9\xbe\x1f\x3d\x00\x1b\x84\xda\x51\xb9\x15\x49\xd7\xad\x6e\x6d\xeb\x72\xea\xfb\x60\x7f\xf6\xe4\x46\xeb\x43\xd1\xf7\xab\x9a\x1b\x2d\xfe\x2c\x66\xd8\x25\x9c\xbd\x4b\xcc\x59\x59\x03\xbb\x07\x79\x05\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\xf3\xd6\x39\x32\xbc\x15\xec\x5a\x9a\x0b\x3c\xdf\xec\xa4\xe9\x41\x5e\xae\xd7\x27\x6a\xe6\x64\x98\x1c\x7c\x69\x3d\xab\xf2\x41\x86\xc3\x25\xc3\x32\x23\x3e\x10\x99\x25\x0e\x60\xe3\xd9\x59\x53\xcd\xcc\x26\x93\x97\x22\xed\xba\xd5\x27\xc5\x9a\xe0\x11\x6e\xb1\xa4\xbe\xdf\x24\x63\xd8\xb2\x92\xa4\x50\xfb\x7f\x54\x16\xba\xe1\x72\x0d\x01\x06\xbe\x41\xad\x07\xe4\x35\x37\x1a\x1e\xe1\x9a\xb0\x18\xe8\x01\xbb\x64\x6c\x12\x7c\xb1\xbb\x8e\x4c\x31\xeb\x7f\x0c\x8b\xa3\x28\x9a\xdf\xa2\x93\x06\x6b\x32\x79\x25\xd2\xc9\x37\x38\x0d\xee\x47\x31\x35\x66\xa4\xb7\xe2\x06\x2b\x02\x83\x7b\x55\xe1\xa0\x3b\xdd\x63\xb3\xd3\x83\xba\x51\x14\xda\xb5\xd5\x33\x6c\x87\x95\x32\x63\xd4\xb9\x88\xa3\xb6\xf3\xa2\xb0\x4c\xab\xc5\x32\x1a\x8e\x40\xa4\x1b\x3c\xf9\xa8\x95\xb9\x13\xe9\xf3\xd3\xb7\xe7\xa7\xaf\xbf\x7e\xfc\x0c\x3b\xdd\x24\x5a\x8d\x95\x4e\xcd\xa7\x4a\x58\x7d\xa4\x7b\xbe\xb1\x43\xe3\xfd\x37\x7e\xee\xd0\x9d\xf5\xa1\x1f\x5f\x50\x21\xef\xf7\xf3\xbc\xc7\xb4\x93\xce\xa3\x04\x49\xab\x47\x65\x13\x83\xfb\xe1\x8e\x4f\x82\xfe\xf5\xb6\xbf\x1a\xc6\x40\x38\xac\xe3\xa0\xf1\xaa\xa0\x0c\x5d\x32\x3d\xc7\x61\xf3\xc2\x99\x71\xc3\x8c\x21\x53\x8c\x13\xe6\xf8\xf5\x6c\x60\x95\xd6\xf2\x34\xb0\x7e\x07\x00\x00\xff\xff\x55\xdb\x14\x8d\xcd\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xdb\x40\x14\x45\xf7\xfa\x8a\xd7\x59\x06\xa6\x2a\xad\x57\xad\xe3\x5f\x29\xb2\x35\x8d\x87\xca\xb6\xd0\x4c\x53\x82\x10\x28\x22\x26\x35\x92\x63\x81\x29\x22\xd4\x2d\x59\xb8\x4e\x03\x2d\x0a\x5d\x94\x51\x23\xfa\x33\xd1\xc8\xd2\xca\xbf\x50\x64\x49\x5e\xb4\xab\xa7\x77\xef\xb9\xf7\x89\x51\x6c\x5b\x3d\x82\x81\xa1\x31\x76\x8c\xcc\x09\xa3\x9c\x4e\xc6\x98\x71\x3a\x78\x7b\x86\xe0\x48\x75\x1c\xa5\xab\xd3\x53\x60\xfc\xcc\x20\xc7\x88\x4f\xcc\x97\xf0\xdc\x22\xa3\x57\xa8\xa7\x00\x00\xec\xcd\x36\x8e\x3b\x30\xea\xe3\x17\xd0\x3f\xc1\x06\x3d\x19\x72\xb0\x26\xef\xc6\x3a\xd1\x1b\x16\xa0\x3b\xec\xb4\xf0\x1b\xc6\x31\xe5\x9a\x41\x07\xa8\x97\x7b\x9b\x22\x7e\xe8\xaa\xc3\xce\x01\x34\x5b\x6e\xd4\xc7\xcf\x50\xaf\x3c\x5f\xca\x45\x5c\x9e\x2f\x77\x69\x50\x7e\xfe\x22\x85\xd8\x7f\x7f\x92\xe1\x5c\x2e\x62\x19\xce\x0f\xba\x0c\xe7\x8f\xae\xa7\xe4\xd1\x4d\xad\xca\xf5\x9d\x5c\xdd\x67\x89\x2f\x6f\xfd\x5d\x1a\xe4\xab\x59\xad\x67\xe2\x72\x3b\xbb\xcb\x12\x3f\x8f\xeb\xc0\xc7\xa9\x14\x22\x8f\x6e\xf2\xef\x3f\x2b\xfb\xe1\x6b\x71\xeb\xc9\xe9\x2f\xb9\xb9\xae\x5a\x84\xc8\x57\xb3\x7f\xad\x3f\xe9\x3e\xf9\x63\x9d\x89\x75\xe1\x4e\x2b\x2e\x0c\xe4\xe5\xef\xc2\x0d\x64\xea\x35\xf7\xc3\xa0\xb8\x5f\x66\x89\xbf\xbd\xba\xd8\xa5\xc1\xf6\xea\xa2\xfa\x97\xc5\x87\x7a\xcd\xd2\x48\x6e\xae\xb3\xc4\x2f\xa3\x6f\x8f\xae\xd7\x55\xcd\xe6\x59\x55\x9d\x9e\xf6\x14\xa5\x5e\x9e\x60\x0c\x8c\xea\xa4\xaf\x59\xc0\xb8\x66\x71\xc0\xb8\xe6\x6c\x9b\x93\x91\x69\x68\x9c\x00\x6a\x08\xb5\x99\xaf\xc7\xe4\x3d\x82\xa7\x8e\xf3\x7f\x07\x19\xeb\x6d\x83\x72\xb8\x55\x8f\xbf\x01\x00\x00\xff\xff\x2d\x73\x41\x72\x10\x02\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
