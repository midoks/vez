// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x8f\xdb\xd6\xd5\xde\xeb\x57\x9c\xf0\xdd\xd8\x40\xee\xd1\xfd\x22\x2f\xe9\x91\xf4\xc2\x1e\xbb\x9d\x14\x1e\xa7\x45\x6c\x27\x41\x10\x14\x57\xe4\x95\x48\x9b\x1f\x0a\x49\x71\x46\x9a\xcc\xa6\x41\xd0\x5d\xdb\x55\x50\x14\x59\xb4\x45\x51\x74\xd7\x02\x4d\x8b\x20\x59\xf4\xcf\x24\x6e\xfd\x2f\x8a\x4b\x4a\x1a\x6a\x2c\x27\xb3\x68\x30\x18\x89\xe7\xf0\xde\xe7\x9c\xe7\x39\xe7\x50\x24\x47\x6f\xdc\x7f\xfb\xf8\xf1\xfb\x3f\x7d\x00\x71\x9d\xa5\x93\xc1\x68\xf3\xf5\x06\x21\xf0\xed\x9f\xbe\x78\xf9\xc9\x5f\x80\x10\xeb\x36\x3a\x9a\x0c\x46\x99\xa9\x35\xc4\x75\xbd\x20\xe6\xa3\x65\xd2\x8c\x9d\xe3\x22\xaf\x4d\x5e\x93\xc7\xab\x85\x71\x20\xec\xac\xb1\x53\x9b\xf3\x7a\x68\xa1\x8e\x20\x8c\x75\x59\x99\x7a\xfc\xe4\xf1\x8f\x88\xef\xc0\xf0\x10\xca\x7b\xe4\xc9\x5d\x72\x5c\x64\x0b\x5d\x27\xd3\xb4\x0f\xf4\xd6\x83\xb1\x89\xe6\xc6\xf9\xae\xd8\x0f\x75\x3e\x5f\xea\x79\x7f\x5b\x98\xef\x76\xe4\x3a\x33\x63\xa7\x49\xcc\xd9\xa2\x28\xeb\xde\x9a\xb3\x24\xaa\xe3\x71\x64\x9a\x24\x34\xa4\x35\xde\x84\x24\x4f\xea\x44\xa7\xa4\x0a\x75\x6a\xc6\x0c\xe9\x9b\x90\xe9\xf3\x24\x5b\x66\x7d\xd7\xb2\x32\x65\x6b\xeb\x69\x6a\xc6\x79\xd1\xb1\x4a\x93\xfc\x39\x94\x26\x1d\x3b\x55\x5c\x94\x75\xb8\xac\x21\x09\x8b\xdc\x81\xb8\x34\xb3\xb1\x33\x9c\xe9\xc6\xda\xb8\xc8\xe7\xce\x64\xd0\x49\xfc\xe2\xb3\xbf\xc1\xbd\xa2\xa8\xab\xba\xd4\x0b\x78\xf1\xfb\x2f\xbf\xfd\xd7\x27\x70\xfc\xce\x3b\xf0\xe2\xb3\x5f\x7e\xf3\xf5\x3f\x3b\xed\x7b\xc0\xf5\x2a\x35\x55\x6c\x4c\xbd\x43\xad\x6a\x5d\x27\xe1\x30\xac\xaa\xe1\x74\x0b\x84\x59\x92\x63\x58\x55\xff\xdf\x8c\x2f\x2e\xee\x2d\x93\x34\x3a\x2e\xb2\x2c\xa9\x2f\x2f\x9d\x1b\xc2\x55\x26\x9d\xb5\x1f\xaf\x85\xd9\x10\x18\x55\x61\x99\x2c\x6a\xa8\xca\xf0\x6a\xf7\xb3\x6a\xf8\xec\xa3\xa5\x29\x57\x84\x21\x63\x48\xdb\x7c\x9e\x1d\xc4\x19\x0d\x3b\x80\x49\x47\xf5\x35\x68\xfb\xcc\xbe\x07\x69\xb0\x83\x89\x74\xad\x89\x8e\x48\x98\x26\x5d\x57\x68\xb2\x58\x4e\x89\x52\xc2\xf3\x02\x57\x79\xdc\x65\x01\x15\xc2\x01\x5d\xad\xf2\xb0\x8b\x6a\x1b\xac\xba\x33\x1c\x2e\xf4\xdc\xe8\x88\xe3\xbc\x28\xe6\xa9\xa9\x56\x79\x94\x84\xba\x4e\x8a\x1c\xc3\x22\xdb\x9c\xb5\xa9\xe9\xa8\x9a\xae\xba\x45\xf8\xac\xea\xa7\xd1\x6f\xbf\x6e\x01\xa9\x92\xda\x90\xc6\x94\xc9\x6c\x03\xd6\x6b\xc7\xe8\x5e\xf0\x93\xe2\x51\xf8\xe8\xfe\xcf\xde\x7e\xf7\xfd\x27\xe5\xbb\xcb\xfb\xfe\x83\x88\x89\x87\xe1\x8f\xef\x3f\x17\xef\xbe\xd5\xd0\x05\x75\xc3\xd3\x27\xef\x95\x22\x6c\xfb\x6d\xcb\x72\x32\x68\x74\x09\x3f\x8f\xb3\x1a\xc6\xdd\xd7\xc7\x1f\xc3\x07\x1f\x1e\x0d\x6e\xcd\x96\x79\x68\x83\xdc\xba\x0d\x17\x03\x00\xbb\x2c\xce\x60\x0c\x51\x11\x2e\x33\x93\xd7\x18\x96\x46\xd7\xe6\x41\x6a\xac\x75\xcb\xe9\xf0\x9c\xdb\x47\x03\x80\x38\xc3\xaa\x0c\x61\x0c\x3b\x41\xe2\x0c\xa7\x3a\x89\x96\x2d\xff\x38\xb3\x55\x08\x3d\x4f\x51\xcf\xd0\x59\xc8\xa6\x1e\x0f\x84\xf6\xf8\xcc\x37\x53\xed\xfa\xbe\x08\xa8\x09\x9d\xa3\x4d\xd8\xaa\x1f\x75\x6e\xea\x4d\xc8\xea\xde\xea\xb1\x9e\x3f\xd2\x99\xb9\x0a\xfe\x01\xfd\xf0\x08\x06\x00\x15\x2e\x74\x69\xf2\xfa\x51\x11\x19\x4c\xf2\xca\x94\xf5\x3d\x33\x2b\x4a\x73\x2b\xce\xde\x84\xea\xf6\xd1\xe0\xf2\xf6\xad\xdb\x47\x83\x5e\xd9\x07\x17\x17\xc9\x0c\xf0\x6e\x59\x27\x61\x6a\x2e\x2f\x07\xa3\x3a\xa9\x53\x33\xb9\xb8\xd8\xfa\xf0\xb1\x75\x5c\x5e\x02\x81\x17\xbf\xf8\xf3\x7f\xfe\xfa\xf5\x68\xd8\x2d\x19\x5c\x5c\x98\xb4\xea\xed\x79\xf5\x74\x1e\x5d\x5e\xda\xae\xef\x55\xf5\xb9\x59\x9d\x15\x65\x54\xf5\xaa\xd8\xed\xbb\x76\xf1\x89\x4c\x97\xe3\x7e\xc1\x77\x4b\x07\xa3\x61\x77\x79\x1d\x8c\xa6\x45\xb4\x6a\x4b\xdb\xcc\xe1\x3c\x4b\xf3\xaa\x6b\xc8\x3b\xc3\xe1\xd9\xd9\x19\x9e\x09\x2c\xca\xf9\x90\x53\x4a\x87\x55\x33\x77\xa0\x1d\xe0\xb1\x13\x25\xd5\x22\xd5\xab\x3b\x90\x17\xb9\x39\x72\x26\x03\x80\x51\xb5\xca\xa6\x45\x0a\x49\x34\x76\x76\xd3\xe3\x80\xbd\x0c\xde\x2b\xce\xc7\x0e\x05\x0a\x8c\xf9\x10\xc8\x76\x39\xc0\x86\xf7\xee\x62\xb4\xa3\xde\x9e\x5c\xe8\x3a\x86\x59\x92\xa6\xa4\x5c\xda\x88\xa6\x31\x79\x11\x45\x0e\x84\x69\xb2\xb8\xee\x8b\xc6\xce\x29\x97\xe8\xd2\x00\x68\x48\x3c\x54\x42\x00\x25\x8c\xa1\x62\x2e\xb8\xe8\x07\xc2\x1a\x32\xe0\xc0\x38\x72\x5f\x22\x67\x12\x3c\x64\x92\x20\xf5\x24\x30\x89\x34\xe0\x84\x23\xf5\x3c\xe0\x14\x5d\xa5\x8e\x7d\x0c\xa4\x00\x11\xa0\xf0\x2c\x84\x2b\x15\x48\x81\xd2\x77\x81\x82\x94\x48\x99\x6c\x5c\x0c\x14\x0f\xdb\x73\xe8\xf2\x00\xba\x2d\x12\x3d\x19\x00\xa3\x18\xb8\x0c\x18\x43\xe6\x0a\xe0\x48\x29\x07\xaf\xdd\x6e\x13\xb0\x11\xa5\x50\xb0\x17\x91\x71\x54\x81\x04\xdf\x47\x46\x3d\x60\x0a\x95\xf2\x20\x90\x60\x89\x31\x08\xe4\x49\x20\xd0\x0d\x37\xe4\xa0\x25\x27\x49\x4b\x0e\x5a\x72\x8c\x74\xe4\x88\x65\x47\x2c\x3b\x4b\x8e\x74\xe4\xba\x50\xa4\x0b\xd5\xe6\x13\x10\x0f\x5d\x2a\xc1\x45\x11\x78\x84\x51\xf4\xb8\x6c\xd3\x96\xad\x58\xcc\x15\x0d\xe9\x18\x92\x96\x22\xb1\x1c\x89\x8f\x81\x90\xa4\xe5\x48\xf6\x16\x93\x96\x23\xb1\x1c\x25\xb1\x79\x90\x8e\x23\xe9\x07\x3e\x66\xd4\x6d\xb5\xb7\x69\xdb\x68\x14\x79\xcb\xc6\x52\x03\x7a\xd2\xd6\xd0\x5f\x9f\xfa\x14\x5c\x85\xbe\x27\x8e\x7d\x0a\x9e\x87\x9e\x27\x40\x09\x94\xc2\x03\xc5\xc1\xe3\xe8\x4a\x01\x8a\x9f\x48\xa9\x39\x70\xa0\x40\x19\xe1\x84\x3f\xe5\x57\x36\x27\x3c\x66\xbe\xcd\x20\x0c\x90\xfa\xad\x64\x2e\x52\x29\x41\xa2\xed\x83\xee\x98\x71\x94\x4a\x02\xb5\x2a\x50\x4e\x6c\x5d\xad\x06\x54\x06\x24\x40\xc6\xda\x3a\xfa\x7e\x83\x5c\xa9\x63\xe5\xa2\x60\x0a\xa4\x87\xc2\x96\x89\x82\xcb\x90\x33\xd8\xe5\xba\x3e\xf5\x28\xba\x9c\x01\xf7\x51\xc8\x13\x19\x60\x20\xfd\x86\x49\xab\x58\xec\x63\x40\x6d\xf1\x7c\xdf\x46\xb3\x6a\xfb\x84\xa3\x52\x7c\x73\xac\x50\x71\x05\xb4\x55\x56\x10\x81\xdc\x93\x44\x21\xa7\x8a\x04\x68\xc9\xb4\xc7\xeb\xd3\x0e\x14\x64\x80\xbc\x61\x1e\x4a\xd7\x3f\xf1\x28\x06\x2c\x54\xc8\x3c\xd5\x21\x07\x9e\x2d\x80\xaf\xbc\xad\xe1\x23\xf7\x19\x50\xe2\xa2\xa4\x1e\x11\x18\x50\x41\x7c\x64\xca\x6f\x87\x82\xbb\x9d\xb1\x49\x78\x6d\x7f\x50\xec\xf0\xb5\x33\x3d\xec\x86\xfa\xfa\x7c\xc7\x45\x66\xae\x8f\xb6\x07\xcc\x73\xfa\xc3\x6b\x87\xd2\x47\xe1\x4a\x60\xc8\xa4\xa7\xd1\xb5\x35\xb6\x7f\x04\x15\xf5\x81\xa6\xc4\x03\xef\xee\x95\x1b\x18\xba\xa0\xd0\x6d\x54\x6f\x2d\xd8\xc3\x58\xa2\xbb\xef\x23\xe8\x36\x44\xc6\xbc\x91\xd7\xd7\x9e\x30\x79\x60\xa9\xda\x0b\xcf\xa4\x47\x6c\x66\x0f\x99\x00\x17\x55\x20\x9e\xf2\xbd\x00\xa4\xdd\x15\x13\xb6\xef\x43\xb7\x61\xc8\x03\xf1\xb0\x47\x6b\x7d\xca\xd1\x05\x26\x9f\x2a\x54\x54\xa5\x2e\xba\x76\x5c\x60\xf3\xff\x94\xc9\x13\x46\x1b\x22\x0f\x80\x8b\x57\xc0\xe5\x09\x47\x77\xed\x0c\xbf\x4b\xfa\x5a\xb7\xb7\xab\x37\xd0\x9e\x02\xdf\x4e\x03\x30\x68\xe7\x61\xcf\x01\xbc\xe9\x3b\x08\x07\x7e\xb2\x67\xdb\x81\x5a\x67\xcc\x05\x1e\x13\xd9\x88\x58\x3e\x95\xeb\x8c\x82\xdc\x5a\x7e\xcf\x12\x9a\x01\xdb\x96\x91\xb0\x86\xf0\x75\x46\x5c\x10\x0d\x11\x27\x9e\x5d\xdd\x9a\xd4\x9a\xac\xe1\xfd\xc5\xc0\x62\xb1\xce\x88\x24\xd2\x42\x9e\xb0\x46\xac\x33\xda\x1a\xb2\x33\x5c\x22\xba\xe0\x27\xde\x3a\x93\x20\x3b\xbc\xa7\xfe\xf7\x08\xb5\x30\xc5\x22\x35\x24\x4c\xca\xf0\x86\x82\x31\x06\x9e\x16\x20\xba\xac\x88\x07\x14\x3a\xcb\xda\x1e\xd0\x4d\xc0\xef\xfa\x71\xea\x74\xf7\xb5\x0f\x7e\x87\x62\x43\xd1\xbb\x9d\x49\x5b\xd2\xfe\x3a\xf3\x89\xd2\x0a\xd4\xa6\xf4\x2e\x4a\xcf\xb7\x97\x70\xa1\x8e\x05\x72\xc9\xed\x31\xe7\x1e\x48\xf4\xa9\x0b\x8c\x82\x0f\x8c\x56\x12\x95\xab\xc0\x9e\xb1\x9d\x65\xb7\x70\x14\xea\xee\x0e\xc7\xae\xfa\x1e\x49\xe6\x65\x12\xdd\x4c\x09\xe0\xe8\xde\xb5\xe3\xc8\x36\x1d\xda\x7a\x6c\xa9\xae\x79\xed\x6f\x89\xdb\x5c\xf7\xda\xbe\x56\x31\xb9\xee\x6e\x4f\x34\x44\x74\x33\xc3\x5f\xe9\x7f\xf1\xca\xdc\x8b\x03\xa3\x2c\x0e\xcd\xd2\x3a\xf3\xac\xf7\x7a\x40\x7a\x30\x69\xdb\xd2\x07\xb2\x66\xe2\x70\xda\xc1\x36\xed\x8c\xb5\xe1\xfe\xa7\x79\x9f\x76\x59\x1e\x10\x3b\x38\x20\xb6\x5d\x7a\x50\x6d\xe6\x1e\x92\xdb\x32\xfa\xa1\x12\x7f\xbd\xe0\x81\xbd\x1a\xec\xbb\x3b\xab\xb9\xe6\x27\x1b\xeb\x90\xe4\x3f\x64\xea\xd7\xa7\x64\x64\xef\x6d\xed\x4d\xb0\xbd\x29\x36\x25\x84\xa9\xae\xaa\xb1\xb3\x20\x02\xa6\x73\x12\xe9\xf2\x39\xd4\xe6\xbc\x26\x67\x71\x52\x1b\xc8\xa6\x44\x6c\x27\x26\x4a\x9a\xed\x6a\x7b\x97\xad\x93\xdc\x94\x9b\x73\xfb\x67\x23\x32\x4b\xcd\x39\xd8\x0f\x72\x66\x9f\xbc\x75\x9a\xcc\x73\x92\xd4\x26\xab\x48\x68\xf2\xda\x94\xf0\x6c\x59\xd5\xc9\x6c\x45\x36\xf7\xeb\xaf\x73\xa7\x73\x52\xd5\xba\xac\x77\x71\x00\x46\x7a\xfb\x34\xed\x5c\x0b\x78\x20\x4c\x36\x25\xdc\x7e\xa4\x73\x42\xfb\xbc\xda\xc3\xc8\x84\x45\xd9\x3e\x28\x12\x7b\x6b\xdf\x8b\x61\x2f\x25\xcd\x7c\x0b\x3f\x4d\x20\x33\x84\x3b\xd0\xbd\xd3\x70\x24\x75\x20\x36\xc9\x3c\xae\xc7\x8e\xe0\x0e\x94\x85\xbd\x2e\x26\xd9\xdc\x01\x5d\x26\x9a\xa4\x7a\x6a\x9f\xff\x77\x37\xfb\xce\x64\xb4\xac\x0c\x9c\xa7\x49\xfe\xfc\x4e\x97\xfb\xff\x5d\x3d\x35\x0c\x27\x9b\x92\xec\x42\x0f\xf5\x64\x70\x65\x2d\xd3\x6d\x1e\xb9\x6e\x20\x2c\x52\xc2\x78\xfb\x95\xce\x89\x5e\xd6\x85\xcd\x6d\x77\x68\xe9\xbe\x46\xda\x6c\x4a\xb2\x88\xd0\x7d\x96\x69\x32\x39\xa0\x67\xae\x1b\xd2\xbe\xc7\x58\x9c\x13\xde\x93\xcd\x99\x7c\xf3\xe5\xd7\x2f\xff\xf0\x0f\x9b\xe1\x68\x98\x26\xaf\x87\x2a\x75\x1e\xdd\x00\xee\xe5\xef\x7e\xfd\xe2\xf3\xaf\x5e\xfe\xf6\xd3\xf6\x69\xf0\x00\x68\xfb\x12\x64\x0f\x59\x4f\x8b\x65\x7d\x03\xe8\x6f\x3f\xfd\xfb\x37\x5f\xfd\x6a\x07\xda\xbe\x00\xb9\x52\x78\x99\xf6\x25\x9e\x15\x65\x76\xd5\xda\xaf\x0a\x3c\x25\x62\xd7\x44\x9d\xda\x62\x5f\xc6\x24\x5f\x2c\x6b\xa8\x57\x0b\x33\x76\x2a\xa3\xcb\x30\xde\x65\x68\xb1\xdb\x52\x94\x45\x0a\x7d\xa3\x9d\x35\x07\x16\xa9\x0e\x4d\x5c\xa4\x91\x29\xc7\xce\x8b\xdf\x7c\xfe\xef\x2f\xfe\x88\x88\xfb\x9d\xf4\x4e\x07\xd9\x27\x60\x91\x76\xb3\x37\x8c\x92\x66\x33\xa4\xdb\xc3\xee\xa1\xd7\x94\x93\xff\x06\x00\x00\xff\xff\x86\x38\x60\xfc\x83\x14\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xc1\x6e\xd4\x30\x10\x86\xcf\xc9\x53\x8c\xcc\xad\x92\x37\x5b\x15\x24\x04\xd9\x48\xdc\xca\x0d\xa9\xf0\x00\x93\x78\x36\x31\x75\xec\x95\x3d\xd9\x6d\x95\x46\xe2\x0c\x4f\xc1\x43\x20\xf5\x81\x7a\xe1\x2d\x90\x93\xdd\x6e\x76\x29\xe4\x90\x8c\x33\xe3\xcf\xe3\xdf\xe3\xe9\x7b\xa6\x76\x63\x90\x09\x44\x89\x81\xb2\x86\x50\x91\x17\xb0\x18\x86\x34\x4d\x73\xa5\xb7\x50\x19\x0c\x61\x25\x2a\x67\x19\xb5\x25\x2f\x8a\xb4\xef\xb3\x0b\x08\x8c\x9e\xe1\x22\x8b\x91\xf3\x40\xef\x76\x50\xcb\x37\xa2\x48\x01\x4e\x01\x46\xb6\x4a\xbe\x15\x05\x00\xa4\x10\x9f\x64\xee\x57\x72\x6d\xe8\x0e\xe2\x4b\x56\xce\x74\xad\x05\x34\xba\xb6\x52\x33\xb5\x41\x06\xf6\xc4\x55\x33\xf9\x43\xe3\xb5\xbd\x95\x4b\x28\x6b\xb9\x6b\x34\x93\x80\xc0\xf7\x86\x56\x62\xa7\x15\x37\xef\x00\x3b\x76\xef\x45\x91\xa6\x49\x5c\x67\xbe\x8c\xd1\x81\x65\xed\x5d\xb7\x81\xa3\x29\xd7\xa6\x0b\x0d\x94\xce\x2b\xf2\xb2\x74\xcc\xae\x85\x50\x79\x67\x0c\x7a\x42\x51\x4c\x9c\xa4\xef\x3d\xda\x9a\x60\xf1\xc1\xb3\xae\x0c\x85\x61\x98\x3c\x00\x39\x42\xe3\x69\xbd\x12\x59\xdf\x2f\x6e\x5c\xe7\x2b\x1a\x86\x68\x7f\x09\xe4\x27\xeb\xa3\x1a\x86\x45\xc3\xad\x11\x7f\x27\x33\xee\x12\xce\xc6\x12\x2b\xd6\xce\xc2\xe6\x5e\x5e\x81\x69\x24\xeb\xba\x61\x01\xe8\x35\xca\xaa\xf3\x9e\x2c\xaf\x04\xfb\x8e\x0e\x09\x9e\x6f\x76\xaf\xe9\x4e\x5e\x2e\x97\x27\x6a\x56\x64\x99\x3c\x7c\xed\x02\xeb\xf5\xbd\x8c\x87\x4b\x96\x65\x49\xbc\x23\xb2\x73\x1c\x40\x1e\xd8\x3b\x5b\x1f\x98\x6d\x29\x2f\x45\xd1\xf7\x8b\xcf\x9a\x0d\xc1\x03\xdc\xe0\x9a\x86\x21\xcf\xa6\xb0\x79\x26\x99\xd2\xdb\x7f\x64\x16\xab\xe1\x72\x09\x11\x06\xa1\x45\x63\x46\xe4\x35\xb7\x06\x1e\xe0\x9a\x50\x8d\xf4\x88\x9d\x33\xf2\x0c\x9f\xed\xbe\x27\xab\x0e\xfa\x1f\xc3\xd2\x24\x49\x0e\xa3\xe4\xa4\xc0\xda\x52\x5e\x89\x62\xef\x1b\x9d\x16\xb7\x93\x98\x06\x4b\x32\x2b\xf1\x09\x6b\x02\x8b\x5b\x5d\xe3\xa8\x3b\xdd\x61\xbb\x31\xa3\xba\x49\x12\xcb\xb5\x33\x07\xd8\x06\x6b\x6d\xa7\xa8\x73\x11\x27\x6d\x0f\x93\xe2\x34\xa3\x67\xd3\x68\x3a\x6a\xa5\x03\x96\x86\x94\x28\x72\x3c\xf1\x1a\x6d\x6f\x45\xf1\xf4\xf8\xfd\xe9\xf1\xdb\xef\x9f\xbf\xe2\x96\xf3\xcc\xe8\xff\xe3\x5e\xa6\xec\x2b\xf2\x55\xc4\xfd\x78\x11\x97\xe4\x59\x67\x26\xa5\x32\x8b\xdb\xf1\xce\xee\x05\x7a\xf1\xf6\xbe\x1e\xaf\x75\x14\xff\xd8\x38\x82\x56\x54\xa2\xcf\xf6\xdf\xa9\x79\x3c\x73\x0e\xb8\xb1\x67\x90\x55\x53\xc7\x38\xfe\x3d\x6b\x40\x6b\xe7\x78\xdf\x80\xfe\x04\x00\x00\xff\xff\x7c\x30\x27\xc1\x9d\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xe9\xde\xb7\x2e\xad\x4f\xad\xa3\x57\x29\x92\xb5\x8d\x97\xea\x1f\xda\x6d\x4a\x08\x01\x45\xc4\xa4\x46\x72\x2c\x30\x45\x84\xba\x25\x07\xd7\x69\xa0\x45\xa1\x87\xb2\x6a\x44\x5f\x26\x5a\x59\x3a\xf9\x15\x8a\x2c\xd9\xd0\xe6\x34\x3b\xdf\xfc\xbe\x6f\x96\x19\x18\xf4\x08\x86\xa6\xc6\xd8\x01\x72\x1d\x46\x39\x75\x6c\xcc\x38\x1d\xbe\x3d\x46\xc0\xf8\xb1\x49\x0e\x10\x77\xdc\x97\xf0\xdc\x23\xd6\x2b\xa4\x2a\x00\x00\xff\x98\x70\x1f\x2c\x1d\xbf\x00\xfd\x10\x9b\xf4\x70\xc4\xc1\x73\xde\xd9\x06\x31\x3a\x16\x60\x30\xea\xef\xe0\x37\x8c\x63\xca\x35\x93\x0e\x91\x5a\x06\xab\x2a\xbd\x1f\xf4\x46\xfd\x3d\xe8\xee\x38\x4b\xc7\xcf\x90\x5a\x9f\xcd\xe5\x2c\xad\xcf\xe6\x9b\x3c\xaa\x3f\x7f\x91\x42\x6c\xdf\x9f\x64\x3c\x95\xb3\x54\xc6\xd3\xbd\x2e\xe3\xe9\x83\x1f\x28\x65\x72\xdd\xaa\x72\x79\x2b\x17\x77\x45\x16\xca\x9b\x70\x93\x47\xe5\x62\xd2\xea\x85\xb8\x58\x4f\x6e\x8b\x2c\x2c\xd3\xd6\xf0\x71\x2c\x85\x28\x93\xeb\xf2\xfb\xcf\x66\x7c\xff\xb5\xba\x09\xe4\xf8\x97\x5c\x5d\x35\x29\x42\x94\x8b\xc9\xff\xa3\x3f\xf9\xd6\xf9\x63\x59\x88\x65\xe5\x8f\x1b\x2e\x8e\xe4\xc5\xef\xca\x8f\x64\x1e\x74\xfb\xe3\xa8\xba\x9b\x17\x59\xb8\xbe\x3c\xdf\xe4\xd1\xfa\xf2\xbc\xf9\xcb\xec\x43\xdb\x16\x79\x22\x57\x57\x45\x16\xd6\xc9\xb7\x07\x3f\x18\xf4\xdc\xee\xac\x3d\x83\x1e\xa9\x8a\xd2\x36\x4f\x30\x06\x46\x0d\xa2\x6b\x1e\x30\xae\x79\x1c\x30\x6e\xb9\x93\x13\x4e\x2c\xd7\xd4\x38\x01\xd4\x11\xbd\xae\xbe\xb6\xc9\x7b\x04\x4f\x4f\x4f\x1f\x67\x10\xdb\xd8\x25\x28\xfb\x5d\x6d\xf9\x1b\x00\x00\xff\xff\x28\x1e\xb6\x18\x05\x02\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
