// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4f\x8f\x2b\x47\x11\xbf\xef\xa7\xa8\x0c\xd7\x54\xb9\xff\xcd\xf4\xcc\x8b\x6d\xf4\xb2\x04\x19\x29\x4f\x20\xe5\x65\x05\xc7\xf6\x4c\xaf\x3d\x2f\xf3\xc7\x99\x19\xcf\xae\xbd\xda\x0b\x51\xc4\x0d\x38\x45\x08\xe5\x00\x08\x21\x6e\x20\x11\x50\x94\x1c\xf8\x32\xc9\xc2\xfb\x16\xa8\x67\x6c\xaf\xed\xf5\xe6\xed\x81\x68\xb5\xf6\x54\x75\xf7\xaf\xea\xf7\xeb\xaa\x71\xf7\xf0\xad\x1f\xfd\xf4\xfc\xe5\x2f\x7e\xf6\x1e\xcc\x9b\x3c\x1b\x9f\x0d\x37\x5f\x6f\x21\xc2\xb7\x7f\xfe\xe2\xf5\x27\x7f\x05\x44\xe7\xb6\x26\x19\x9f\x0d\x73\xdb\x18\x98\x37\xcd\x02\xed\xc7\xcb\xb4\x1d\x79\xe7\x65\xd1\xd8\xa2\xc1\x97\xab\x85\xf5\x20\xee\xad\x91\xd7\xd8\xeb\x66\xe0\xa0\xde\x81\x78\x6e\xaa\xda\x36\xa3\x0f\x5f\xfe\x18\x43\x0f\x06\xa7\x50\x7e\x8e\x1f\x3e\xc7\xf3\x32\x5f\x98\x26\x9d\x66\xfb\x40\x3f\x79\x6f\x64\x93\x99\xf5\xbe\x2b\xf6\xfb\xa6\x98\x2d\xcd\x6c\x7f\x59\x5c\xec\x56\x14\x26\xb7\x23\xaf\x4d\xed\xd5\xa2\xac\x9a\xbd\x39\x57\x69\xd2\xcc\x47\x89\x6d\xd3\xd8\x62\x67\xbc\x0d\x69\x91\x36\xa9\xc9\xb0\x8e\x4d\x66\x47\x9c\xd8\xdb\x90\x9b\xeb\x34\x5f\xe6\xfb\xae\x65\x6d\xab\xce\x36\xd3\xcc\x8e\x8a\xb2\x67\x95\xa5\xc5\x47\x50\xd9\x6c\xe4\xd5\xf3\xb2\x6a\xe2\x65\x03\x69\x5c\x16\x1e\xcc\x2b\x7b\x39\xf2\x06\x97\xa6\x75\x36\x2d\x8a\x99\x37\x3e\xeb\x25\xbe\xfb\xec\xef\xf0\x6e\x59\x36\x75\x53\x99\x05\xdc\xfd\xe1\xcb\x6f\xff\xfd\x09\x9c\x7f\xf0\x01\xdc\x7d\xf6\xab\x6f\xbe\xfe\x57\xaf\xfd\x1e\x70\xb3\xca\x6c\x3d\xb7\xb6\xd9\xa1\xd6\x8d\x69\xd2\x78\x10\xd7\xf5\x60\xba\x05\xa2\x3c\x2d\x28\xae\xeb\x1f\xb6\xa3\x9b\x9b\x77\x97\x69\x96\x9c\x97\x79\x9e\x36\xb7\xb7\xde\x13\xe1\x6a\x9b\x5d\x76\x1f\x8f\xc2\x6c\x08\x0c\xeb\xb8\x4a\x17\x0d\xd4\x55\x7c\xbf\xfa\x55\x3d\x78\xf5\xf1\xd2\x56\x2b\xe4\xc4\x39\xb1\x2e\x9f\x57\x27\x71\x86\x83\x1e\x60\xdc\x53\x7d\x04\xed\x90\xd9\x1b\x90\xce\x76\x30\x89\x69\x0c\x9a\x04\xe3\x2c\xed\xab\xc2\xe0\x62\x39\x45\xad\x65\x10\x44\xbe\x0e\x84\xcf\x23\x26\xa5\x07\xa6\x5e\x15\x71\x1f\xd5\x15\x58\xfd\x6c\x30\x58\x98\x99\x35\x89\xa0\x59\x59\xce\x32\x5b\xaf\x8a\x24\x8d\x4d\x93\x96\x05\xc5\x65\xbe\x19\x75\xa9\x99\xa4\x9e\xae\xfa\x49\xf4\xaa\x3e\x48\xe3\xe6\x26\xbd\x04\x7a\x5e\x35\x69\x9c\xd9\xdb\xdb\xb3\x61\x93\x36\x99\x1d\xdf\xdc\x6c\x7d\xf4\xd2\x39\x6e\x6f\x01\xe1\xee\x97\x7f\xf9\xef\xdf\xbe\x1e\x0e\xfa\x29\x67\x37\x37\x36\xab\xf7\xd6\x3c\x1c\x2e\x92\xdb\x5b\xb7\x09\x7b\x35\xfe\x91\x5d\x5d\x95\x55\x52\xef\xd5\x78\xbf\xee\xa8\x17\x12\xdb\xa7\x98\xba\xe2\x7c\x38\xf5\x6c\x38\xe8\xbb\xfd\x6c\x38\x2d\x93\x55\xa7\x67\x3b\x83\xeb\x3c\x2b\xea\x5e\x9f\x67\x83\xc1\xd5\xd5\x15\x5d\x49\x2a\xab\xd9\x40\x30\xc6\x06\x75\x3b\xf3\xa0\xab\xa7\x91\x97\xa4\xf5\x22\x33\xab\x67\x50\x94\x85\x7d\xc7\x1b\x9f\x01\x0c\xeb\x55\x3e\x2d\x33\x48\x93\x91\xb7\xdb\x4c\x0f\x5c\x57\xbe\x5b\x5e\x8f\x3c\x06\x0c\x38\x0f\x21\x52\xdd\x74\x80\x0d\xef\x5d\x6f\xec\xa8\x77\x83\x0b\xd3\xcc\xe1\x32\xcd\x32\xac\x96\x2e\xa2\x6d\x6d\x51\x26\x89\x07\x71\x96\x2e\x8e\x7d\xc9\xc8\x7b\x21\x14\xf9\x2c\x02\x16\x63\x40\x5a\x4a\x60\xc8\x39\x69\xee\x83\x4f\x61\x24\x9d\xa1\x22\x01\x5c\x90\x08\x15\x09\xae\x20\x20\xae\x90\x58\xa0\x80\x2b\x62\x91\x40\x41\x2c\x08\x40\x30\xf2\xb5\x3e\x0f\x29\x52\x12\x64\x44\x32\x70\x10\xbe\xd2\xa0\x24\xa9\xd0\x07\x06\x4a\x11\xe3\xaa\xf5\x29\xd2\x22\xee\xc6\xc8\x17\x11\xf4\x4b\x14\x05\x2a\x02\xce\x28\xf2\x39\x70\x4e\xdc\x97\x20\x88\x31\x01\x41\xb7\xdc\x25\xe0\x22\x2a\xa9\xe1\x20\x22\x17\xa4\x23\x05\x61\x48\x9c\x05\xc0\x35\x69\x1d\x40\xa4\xc0\x11\xe3\x10\xa9\x49\x24\xc9\x8f\x37\xe4\xa0\x23\xa7\xb0\x23\x07\x1d\x39\x8e\x3d\x39\x74\xec\xd0\xb1\x73\xe4\xb0\x27\xd7\x87\xc2\x3e\x54\x97\x4f\x84\x01\xf9\x4c\x81\x4f\x32\x0a\x90\x33\x0a\x84\xea\xd2\x56\x9d\x58\xdc\x97\x2d\xf6\x0c\xb1\xa3\x88\x8e\x23\x86\x14\x49\x85\x1d\x47\x3c\x98\x8c\x1d\x47\x74\x1c\x15\xba\x3c\xb0\xe7\x88\xfb\x81\xcf\x39\xf3\x3b\xed\x5d\xda\x2e\x1a\x23\xd1\xb1\x71\xd4\x80\x4d\xba\x3d\x0c\xd7\x2f\x42\x06\xbe\xa6\x30\x90\xe7\x21\x83\x20\xa0\x20\x90\xa0\x25\x29\x19\x80\x16\x10\x08\xf2\x95\x04\x2d\x26\x4a\x19\x01\x02\x18\x30\x8e\x02\xc5\x85\xb8\xb7\x05\x8a\x39\x0f\x5d\x06\x71\x44\x2c\xec\x24\xf3\x89\x29\x05\x8a\x5c\x1d\xf4\xcf\x5c\x90\xd2\x0a\x98\x53\x81\x09\x74\xfb\xea\x34\x60\x2a\xc2\x88\x38\xef\xf6\x31\x0c\x5b\x12\x5a\x9f\x6b\x9f\x24\xd7\xa0\x02\x92\x6e\x9b\x18\xf8\x9c\x04\x87\x5d\xae\xeb\x17\x01\x23\x5f\x70\x10\x21\x49\x35\x51\x11\x45\x2a\x6c\xb9\x72\x8a\xcd\x43\x8a\x98\xdb\xbc\x30\x74\xd1\x9c\xda\x21\x0a\xd2\x5a\x6c\x9e\x35\x69\xa1\x81\x75\xca\x4a\x94\x24\x02\x85\x9a\x04\xd3\x18\x91\x23\xd3\x3d\xaf\x5f\xf4\xa0\xa0\x22\x12\x2d\x0f\x48\xf9\xe1\x24\x60\x14\xf1\x58\x13\x0f\x74\x8f\x1c\x05\x6e\x03\x42\x1d\x6c\x8d\x90\x44\xc8\x81\xa1\x4f\x8a\x05\x28\x29\x62\x12\x43\xe2\x3a\xec\x9a\x42\xf8\xbd\xb1\x49\x78\xed\xde\x6f\xae\xf9\xba\x9e\x1e\xf4\x4d\x7d\xdc\xdf\xf3\x32\xb7\xc7\xad\x1d\x00\x0f\xbc\xfd\xe6\x75\x4d\x19\x92\xf4\x15\x70\xe2\x2a\x30\xe4\xbb\x3d\x76\x7f\x48\x9a\x85\xc0\x32\x0c\x20\x78\x7e\xef\x06\x4e\x3e\x68\xf2\x5b\xbd\x37\x17\xdc\xe3\x5c\x91\x7f\xe8\x43\xf2\x5b\x54\x73\xd1\xaa\xe3\xb9\x13\xae\x4e\x4c\xd5\x07\xe1\xb9\x0a\xd0\x65\xf6\x3e\x97\xe0\x93\x8e\xe4\x85\x38\x08\x80\xdd\xaa\x39\xf2\x43\x1f\xf9\x2d\x27\x11\xc9\xf7\xf7\x68\xad\x5f\x08\xf2\x81\xab\x0b\x4d\x9a\xe9\xcc\x27\xdf\xb5\x0b\x6c\xfe\x2f\xb8\x9a\x70\xd6\xa2\x3a\x01\x2e\x1f\x80\xab\x89\x20\x7f\xed\x0d\xbe\x4b\xfa\xc6\x74\xa7\xa7\x27\x68\xcf\x40\x6c\xbb\x01\x38\x74\xfd\x70\xe0\x00\xd1\xee\x3b\x50\x80\x98\x1c\xd8\xae\xa1\xd6\x39\xf7\x41\xcc\x51\xb5\x72\xae\x2e\xd4\x3a\x67\xa0\xb6\x56\xb8\x67\x49\xc3\x81\x6f\xb7\x11\x79\x8b\x62\x9d\xa3\x0f\xb2\x45\x39\x09\xdc\xec\xce\x64\xce\xe4\xad\xd8\x9f\x0c\x7c\x2e\xd7\x39\x2a\x54\x0e\x72\xc2\x5b\xb9\xce\x59\x67\xa8\xde\xf0\x51\xf6\xc1\x27\xc1\x3a\x57\xa0\x7a\xbc\x8b\xf0\x0d\x42\x2d\x6c\xb9\xc8\x2c\xc6\x69\x15\x3f\x51\x30\xce\x21\x30\x12\x64\x9f\x15\x06\xc0\xa0\xb7\x9c\x1d\x00\xdb\x04\xfc\xae\x1f\xa7\x5e\xf7\xd0\x84\x10\xf6\x28\x2e\x14\x7b\xde\x9b\xac\x23\x1d\xae\xf3\x10\xb5\xd1\xa0\x37\x5b\xef\x93\x0a\x42\xf7\x0a\x97\xfa\x5c\x92\x50\xc2\x3d\x0b\x11\x80\xa2\x90\xf9\xc0\x19\x84\xc0\x59\xad\x48\xfb\x1a\xdc\x88\xab\x2c\xb7\x44\x90\xd4\xcf\x77\x38\x6e\xd6\x1b\x24\x99\x55\x69\xf2\x34\x25\x40\x90\xff\xdc\xb5\x23\xdf\x54\x68\xe7\x71\x5b\x75\xe4\x75\xbf\x25\x7e\x7b\xec\x75\x75\xad\xe7\x78\xec\xee\x06\x5a\x94\x7d\xcf\x88\x07\xf5\x2f\x1f\xf4\xbd\x3c\xd1\xca\xf2\x54\x2f\xad\xf3\xc0\x79\x8f\x03\xb2\x93\x49\xbb\x92\x3e\x91\x35\x97\xa7\xd3\x8e\xb6\x69\xe7\xbc\x0b\xf7\x7f\xcd\xfb\x45\x9f\xe5\x09\xb1\xa3\x13\x62\xbb\xa9\x27\xd5\xe6\xfe\x29\xb9\x1d\xa3\xef\x2b\xf1\xc7\x05\x8f\xdc\xdb\xe0\xd0\xdd\x5b\xed\x91\x1f\x37\xd6\x29\xc9\xbf\xcf\xd4\x8f\xbb\x64\xe8\xce\xb6\xee\x10\xec\x0e\xc5\xb6\x82\x38\x33\x75\x3d\xf2\x16\x28\x61\x3a\xc3\xc4\x54\x1f\x81\xbb\xed\xe2\xd5\x3c\x6d\x2c\xe4\x53\x94\xdb\x8e\x49\xd2\x76\x3b\xdb\x9d\xb2\x4d\x5a\xd8\x6a\x33\x76\x38\x9a\xe0\x65\x66\xaf\xc1\x7d\xe0\x95\xbb\x08\x9a\x2c\x9d\x15\x98\x36\x36\xaf\x31\xb6\x45\x63\x2b\x78\xb5\xac\x9b\xf4\x72\x85\x9b\xf3\xfa\x63\xee\x6c\x86\x75\x63\xaa\x66\x17\x07\x60\x68\xb6\x97\x3b\xef\x28\xe0\x89\x30\xf9\x14\x85\xfb\xc8\x66\xc8\xf6\x79\x75\x8f\x89\x8d\xcb\xaa\xbb\x04\xa1\x3b\xda\xef\xc5\x70\xaf\x92\x76\xb6\x85\x9f\xa6\x90\x5b\x14\x1e\xf4\x57\x6c\x4f\x31\x0f\xe6\x36\x9d\xcd\x9b\x91\x27\x85\x07\x55\xe9\xde\x8b\x69\x3e\xf3\xc0\x54\xa9\xc1\xcc\x4c\xdd\x75\x74\x77\xd8\xf7\xc6\xc3\x65\x6d\xe1\xda\xdd\x54\x9f\xf5\xb9\xff\xe0\xfe\xd6\x30\x18\x6f\xb6\x64\x17\x7a\x60\xc6\x67\xf7\xd6\x32\xdb\xe6\x51\x98\x16\xe2\x32\x43\x2e\xba\xaf\x6c\x86\x66\xd9\x94\x2e\xb7\xdd\xa3\xa3\xfb\x88\xb4\xf9\x14\xf3\x04\xd9\x21\xcb\x2c\x1d\x9f\xd0\xb3\x30\x2d\x76\xd7\xea\xc5\x35\x8a\x3d\xd9\xbc\xf1\x37\x5f\x7e\xfd\xfa\x8f\xff\x74\x19\x0e\x07\x59\xfa\x38\x54\x65\x8a\xe4\x09\x70\xaf\x7f\xff\x9b\xbb\xcf\xbf\x7a\xfd\xbb\x4f\xbb\xdb\xe0\x09\xd0\xee\x4e\x7e\x80\x6c\xa6\xe5\xb2\x79\x02\xf4\xb7\x9f\xfe\xe3\x9b\xaf\x7e\xbd\x03\xed\xee\xe3\xf7\x0a\x2f\xb3\x7d\x89\x2f\xcb\x2a\xbf\x2f\xed\x87\x02\x4f\x51\xee\x8a\xa8\x57\x5b\x1e\xca\x98\x16\x8b\x65\x03\xcd\x6a\x61\x47\x5e\x6d\x4d\x15\xcf\x77\x19\x3a\xec\x6e\x2b\xaa\x32\x83\x7d\xa3\xeb\x35\x0f\x16\x99\x89\xed\xbc\xcc\x12\x5b\x8d\xbc\xbb\xdf\x7e\xfe\x9f\x2f\xfe\x44\x44\x87\x95\xf4\x41\x0f\xb9\x4f\xc0\x21\xed\x7a\x6f\x90\xa4\xed\xa6\x49\xb7\x8f\xfd\xa5\xd7\x56\xe3\xff\x05\x00\x00\xff\xff\x26\x82\xe5\xa7\x12\x13\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xc1\x6e\xd4\x30\x10\x86\xcf\xc9\x53\x8c\xcc\xad\x92\x37\x5b\x15\x24\x04\xd9\x48\xdc\xca\x0d\xa9\xf0\x00\x93\x78\x36\x31\x75\xec\x95\x3d\xd9\x6d\x95\x46\xe2\x0c\x4f\xc1\x43\x20\xf5\x81\x7a\xe1\x2d\x90\x93\xdd\x6e\x76\x29\xe4\x90\x8c\x33\xe3\xcf\xe3\xdf\xe3\xe9\x7b\xa6\x76\x63\x90\x09\x44\x89\x81\xb2\x86\x50\x91\x17\xb0\x18\x86\x34\x4d\x73\xa5\xb7\x50\x19\x0c\x61\x25\x2a\x67\x19\xb5\x25\x2f\x8a\xb4\xef\xb3\x0b\x08\x8c\x9e\xe1\x22\x8b\x91\xf3\x40\xef\x76\x50\xcb\x37\xa2\x48\x01\x4e\x01\x46\xb6\x4a\xbe\x15\x05\x00\xa4\x10\x9f\x64\xee\x57\x72\x6d\xe8\x0e\xe2\x4b\x56\xce\x74\xad\x05\x34\xba\xb6\x52\x33\xb5\x41\x06\xf6\xc4\x55\x33\xf9\x43\xe3\xb5\xbd\x95\x4b\x28\x6b\xb9\x6b\x34\x93\x80\xc0\xf7\x86\x56\x62\xa7\x15\x37\xef\x00\x3b\x76\xef\x45\x91\xa6\x49\x5c\x67\xbe\x8c\xd1\x81\x65\xed\x5d\xb7\x81\xa3\x29\xd7\xa6\x0b\x0d\x94\xce\x2b\xf2\xb2\x74\xcc\xae\x85\x50\x79\x67\x0c\x7a\x42\x51\x4c\x9c\xa4\xef\x3d\xda\x9a\x60\xf1\xc1\xb3\xae\x0c\x85\x61\x98\x3c\x00\x39\x42\xe3\x69\xbd\x12\x59\xdf\x2f\x6e\x5c\xe7\x2b\x1a\x86\x68\x7f\x09\xe4\x27\xeb\xa3\x1a\x86\x45\xc3\xad\x11\x7f\x27\x33\xee\x12\xce\xc6\x12\x2b\xd6\xce\xc2\xe6\x5e\x5e\x81\x69\x24\xeb\xba\x61\x01\xe8\x35\xca\xaa\xf3\x9e\x2c\xaf\x04\xfb\x8e\x0e\x09\x9e\x6f\x76\xaf\xe9\x4e\x5e\x2e\x97\x27\x6a\x56\x64\x99\x3c\x7c\xed\x02\xeb\xf5\xbd\x8c\x87\x4b\x96\x65\x49\xbc\x23\xb2\x73\x1c\x40\x1e\xd8\x3b\x5b\x1f\x98\x6d\x29\x2f\x45\xd1\xf7\x8b\xcf\x9a\x0d\xc1\x03\xdc\xe0\x9a\x86\x21\xcf\xa6\xb0\x79\x26\x99\xd2\xdb\x7f\x64\x16\xab\xe1\x72\x09\x11\x06\xa1\x45\x63\x46\xe4\x35\xb7\x06\x1e\xe0\x9a\x50\x8d\xf4\x88\x9d\x33\xf2\x0c\x9f\xed\xbe\x27\xab\x0e\xfa\x1f\xc3\xd2\x24\x49\x0e\xa3\xe4\xa4\xc0\xda\x52\x5e\x89\x62\xef\x1b\x9d\x16\xb7\x93\x98\x06\x4b\x32\x2b\xf1\x09\x6b\x02\x8b\x5b\x5d\xe3\xa8\x3b\xdd\x61\xbb\x31\xa3\xba\x49\x12\xcb\xb5\x33\x07\xd8\x06\x6b\x6d\xa7\xa8\x73\x11\x27\x6d\x0f\x93\xe2\x34\xa3\x67\xd3\x68\x3a\x6a\xa5\x03\x96\x86\x94\x28\x72\x3c\xf1\x1a\x6d\x6f\x45\xf1\xf4\xf8\xfd\xe9\xf1\xdb\xef\x9f\xbf\xe2\x96\xf3\xcc\xe8\xff\xe3\x5e\xa6\xec\x2b\xf2\x55\xc4\xfd\x78\x11\x97\xe4\x59\x67\x26\xa5\x32\x8b\xdb\xf1\xce\xee\x05\x7a\xf1\xf6\xbe\x1e\xaf\x75\x14\xff\xd8\x38\x82\x56\x54\xa2\xcf\xf6\xdf\xa9\x79\x3c\x73\x0e\xb8\xb1\x67\x90\x55\x53\xc7\x38\xfe\x3d\x6b\x40\x6b\xe7\x78\xdf\x80\xfe\x04\x00\x00\xff\xff\x7c\x30\x27\xc1\x9d\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\x8a\x63\x24\xcc\x21\xa9\xd4\x83\x6b\xa9\xb7\xde\xdb\x17\x00\xb3\x89\x91\xc0\x6b\xc1\x2a\x3d\x50\xbf\x7b\x55\x1b\x27\x69\xdd\x0b\x7f\x33\xfa\xd0\xce\x94\xc2\x18\xa7\x60\x18\x41\x5a\x93\x51\x0f\x68\x1c\x26\x09\xcd\x3c\x0b\x21\x44\xeb\xfc\x15\xfa\x60\x72\x7e\x91\x3d\x8d\x6c\xfc\x88\x49\x76\xa2\x14\x7d\x80\xcc\x26\x31\x1c\xf4\x3c\x0b\x80\x47\x67\xa2\x4f\xb8\xa8\x27\xd9\x09\x80\xdf\x4a\x4f\x41\x45\xa7\x9e\xab\x04\xd0\x0e\xc7\x4d\x9b\xac\x3a\x41\xfc\x59\x2c\x25\x87\x49\x59\x62\xa6\x78\xb3\x02\x94\xd2\xbc\x26\xf6\x7d\xc0\xe6\xc3\x73\x40\xf8\x82\x77\x73\xc6\xe5\xff\x05\xa6\x87\x63\x27\xb6\x8b\x59\xad\x1b\xde\x06\xba\xa8\x89\x32\xff\x0f\x7c\xe3\x18\xf6\xbc\xca\xa8\xd0\x56\x3b\x7f\xdd\xce\xfb\xa9\x4e\x37\xf2\x63\xac\xd9\x3b\xb4\x26\xe9\xba\xaf\xd1\xde\x59\x4b\x92\x38\xba\x35\xc7\xfb\xeb\x9f\x5e\xce\x44\x5c\x7b\xf9\x0e\x00\x00\xff\xff\x66\xf6\x1b\x4b\xb4\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xe9\xde\xb7\x2e\xad\x4f\xad\xa3\x57\x29\x92\xb5\x8d\x97\xea\x1f\xda\x6d\x4a\x08\x01\x45\xc4\xa4\x46\x72\x2c\x30\x45\x84\xba\x25\x07\xd7\x69\xa0\x45\xa1\x87\xb2\x6a\x44\x5f\x26\x5a\x59\x3a\xf9\x15\x8a\x2c\xd9\xd0\xe6\x34\x3b\xdf\xfc\xbe\x6f\x96\x19\x18\xf4\x08\x86\xa6\xc6\xd8\x01\x72\x1d\x46\x39\x75\x6c\xcc\x38\x1d\xbe\x3d\x46\xc0\xf8\xb1\x49\x0e\x10\x77\xdc\x97\xf0\xdc\x23\xd6\x2b\xa4\x2a\x00\x00\xff\x98\x70\x1f\x2c\x1d\xbf\x00\xfd\x10\x9b\xf4\x70\xc4\xc1\x73\xde\xd9\x06\x31\x3a\x16\x60\x30\xea\xef\xe0\x37\x8c\x63\xca\x35\x93\x0e\x91\x5a\x06\xab\x2a\xbd\x1f\xf4\x46\xfd\x3d\xe8\xee\x38\x4b\xc7\xcf\x90\x5a\x9f\xcd\xe5\x2c\xad\xcf\xe6\x9b\x3c\xaa\x3f\x7f\x91\x42\x6c\xdf\x9f\x64\x3c\x95\xb3\x54\xc6\xd3\xbd\x2e\xe3\xe9\x83\x1f\x28\x65\x72\xdd\xaa\x72\x79\x2b\x17\x77\x45\x16\xca\x9b\x70\x93\x47\xe5\x62\xd2\xea\x85\xb8\x58\x4f\x6e\x8b\x2c\x2c\xd3\xd6\xf0\x71\x2c\x85\x28\x93\xeb\xf2\xfb\xcf\x66\x7c\xff\xb5\xba\x09\xe4\xf8\x97\x5c\x5d\x35\x29\x42\x94\x8b\xc9\xff\xa3\x3f\xf9\xd6\xf9\x63\x59\x88\x65\xe5\x8f\x1b\x2e\x8e\xe4\xc5\xef\xca\x8f\x64\x1e\x74\xfb\xe3\xa8\xba\x9b\x17\x59\xb8\xbe\x3c\xdf\xe4\xd1\xfa\xf2\xbc\xf9\xcb\xec\x43\xdb\x16\x79\x22\x57\x57\x45\x16\xd6\xc9\xb7\x07\x3f\x18\xf4\xdc\xee\xac\x3d\x83\x1e\xa9\x8a\xd2\x36\x4f\x30\x06\x46\x0d\xa2\x6b\x1e\x30\xae\x79\x1c\x30\x6e\xb9\x93\x13\x4e\x2c\xd7\xd4\x38\x01\xd4\x11\xbd\xae\xbe\xb6\xc9\x7b\x04\x4f\x4f\x4f\x1f\x67\x10\xdb\xd8\x25\x28\xfb\x5d\x6d\xf9\x1b\x00\x00\xff\xff\x28\x1e\xb6\x18\x05\x02\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
