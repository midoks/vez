// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x6e\xe3\xc8\x11\xbe\xfb\x29\x6a\x99\xeb\x56\xa9\xff\xc8\x26\x67\x25\x05\x1e\x67\x03\x05\x18\x23\x01\x66\xd6\x48\x8e\x14\xd9\x16\x39\xc3\x1f\x2d\x49\xd1\xb6\x0c\x5f\xb2\x58\xe4\x96\xe4\xb4\x08\x82\x3d\x24\x41\x10\xe4\x96\x00\xd9\x04\x8b\x9d\x43\x5e\x66\xc6\xc9\xbc\x45\xd0\xa4\x24\x4b\xb2\x3c\xe3\x43\x16\x86\xa5\xae\x62\xf7\x57\xf5\x7d\x5d\x45\x75\x0f\x3f\xfa\xd1\x4f\x4f\x5e\xfc\xe2\x67\x9f\x42\xd2\xe4\xd9\xf8\x68\xb8\xfa\xfa\x08\x11\xde\xfe\xf9\x9b\x77\x5f\xfc\x15\x10\xad\xdb\x84\xf1\xf8\x68\x98\x9b\x26\x84\xa4\x69\xe6\x68\x3e\x5f\xa4\xed\xc8\x39\x29\x8b\xc6\x14\x0d\xbe\xb8\x9a\x1b\x07\xa2\xde\x1a\x39\x8d\xb9\x6c\x06\x16\xea\x13\x88\x92\xb0\xaa\x4d\x33\xfa\xec\xc5\x8f\xd1\x77\x60\x70\x08\xe5\xe7\xf8\xd9\x31\x9e\x94\xf9\x3c\x6c\xd2\x69\xb6\x0d\xf4\x93\x4f\x47\x26\x9e\x19\xe7\x7d\xb1\x9f\x85\xc5\x6c\x11\xce\xb6\x97\x45\xc5\x66\x45\x11\xe6\x66\xe4\xb4\xa9\xb9\x98\x97\x55\xb3\x35\xe7\x22\x8d\x9b\x64\x14\x9b\x36\x8d\x0c\x76\xc6\xc7\x90\x16\x69\x93\x86\x19\xd6\x51\x98\x99\x11\x27\xf6\x31\xe4\xe1\x65\x9a\x2f\xf2\x6d\xd7\xa2\x36\x55\x67\x87\xd3\xcc\x8c\x8a\xb2\x67\x95\xa5\xc5\x2b\xa8\x4c\x36\x72\xea\xa4\xac\x9a\x68\xd1\x40\x1a\x95\x85\x03\x49\x65\xce\x47\xce\xe0\x3c\x6c\xad\x4d\xf3\x62\xe6\x8c\x8f\x7a\x89\x6f\xbf\xfa\x3b\x3c\x2d\xcb\xa6\x6e\xaa\x70\x0e\xb7\x7f\xf8\xf6\xed\xbf\xbf\x80\x93\xe7\xcf\xe1\xf6\xab\x5f\xbd\x79\xfd\xaf\x5e\xfb\x2d\xe0\xe6\x2a\x33\x75\x62\x4c\xb3\x41\xad\x9b\xb0\x49\xa3\x41\x54\xd7\x83\xe9\x1a\x88\xf2\xb4\xa0\xa8\xae\x7f\xd8\x8e\xae\xaf\x9f\x2e\xd2\x2c\x3e\x29\xf3\x3c\x6d\x6e\x6e\x9c\x47\xc2\xd5\x26\x3b\xef\x3e\x1e\x84\x59\x11\x18\xd6\x51\x95\xce\x1b\xa8\xab\xe8\x6e\xf5\xcb\x7a\xf0\xf2\xf3\x85\xa9\xae\x90\x13\xe7\xc4\xba\x7c\x5e\x1e\xc4\x19\x0e\x7a\x80\x71\x4f\xf5\x01\xb4\x5d\x66\x1f\x40\x3a\x3a\xba\xbe\x4e\xcf\x81\x8e\xab\x26\x8d\x32\x73\x73\x73\x34\x6c\xd2\x26\x33\xe3\xeb\xeb\xb5\x8f\x5e\x58\xc7\xcd\x0d\x20\xdc\xfe\xf2\x2f\xff\xfd\xdb\xeb\xe1\xa0\x9f\x72\x74\x7d\x6d\xb2\x7a\x6b\xcd\xfd\xc7\x45\x7c\x73\x63\xd9\x6f\x15\xd7\x2b\x73\x75\x51\x56\x71\xbd\x55\x5c\xfd\xba\xbd\x22\x8c\x4d\x9f\x62\x6a\xab\xe2\xfe\xd4\xa3\xe1\xa0\x6f\xb3\xa3\xe1\xb4\x8c\xaf\xec\x77\xdd\xce\xe0\x32\xcf\x8a\x7a\xe4\xd8\xca\x7f\x32\x18\x5c\x5c\x5c\xd0\x85\xa4\xb2\x9a\x0d\x04\x63\x6c\x50\xb7\x33\x07\xba\x8d\x1c\x39\x71\x5a\xcf\xb3\xf0\xea\x09\x14\x65\x61\x3e\x71\xc6\x47\x00\xc3\xfa\x2a\x9f\x96\x19\xa4\xf1\xc8\xd9\xa8\xe8\x80\x6d\x87\xa7\xe5\xe5\xc8\x61\xc0\x80\x73\x1f\x02\xd5\x4d\x07\x58\xf1\xde\x14\xe5\x86\x7a\xf7\x70\x1e\x36\x09\x9c\xa7\x59\x86\xd5\xc2\x46\x34\xad\x29\xca\x38\x76\x20\xca\xd2\xf9\xbe\x2f\x1e\x39\xa7\x42\x91\xcb\x02\x60\x11\x7a\xa4\xa5\x04\x86\x9c\x93\xe6\x2e\xb8\xe4\x07\xd2\x1a\x2a\x10\xc0\x05\x09\x5f\x91\xe0\x0a\x3c\xe2\x0a\x89\x79\x0a\xb8\x22\x16\x08\x14\xc4\x3c\x0f\x04\x23\x57\xeb\x13\x9f\x02\x25\x41\x06\x24\x3d\x0b\xe1\x2a\x0d\x4a\x92\xf2\x5d\x60\xa0\x14\x31\xae\x5a\x97\x02\x2d\xa2\xee\x19\xb9\x22\x80\x7e\x89\x22\x4f\x05\xc0\x19\x05\x2e\x07\xce\x89\xbb\x12\x04\x31\x26\xc0\xeb\x96\xdb\x04\x6c\x44\x25\x35\xec\x44\xe4\x82\x74\xa0\xc0\xf7\x89\x33\x0f\xb8\x26\xad\x3d\x08\x14\x58\x62\x1c\x02\x35\x09\x24\xb9\xd1\x8a\x1c\x74\xe4\x14\x76\xe4\xa0\x23\xc7\xb1\x27\x87\x96\x1d\x5a\x76\x96\x1c\xf6\xe4\xfa\x50\xd8\x87\xea\xf2\x09\xd0\x23\x97\x29\x70\x49\x06\x1e\x72\x46\x9e\x50\x5d\xda\xaa\x13\x8b\xbb\xb2\xc5\x9e\x21\x76\x14\xd1\x72\x44\x9f\x02\xa9\xb0\xe3\x88\x3b\x93\xb1\xe3\x88\x96\xa3\x42\x9b\x07\xf6\x1c\x71\x3b\xf0\x09\x67\x6e\xa7\xbd\x4d\xdb\x46\x63\x24\x3a\x36\x96\x1a\xb0\x49\xb7\x87\xfe\xf2\xd4\x67\xe0\x6a\xf2\x3d\x79\xe2\x33\xf0\x3c\xf2\x3c\x09\x5a\x92\x92\x1e\x68\x01\x9e\x20\x57\x49\xd0\x62\xa2\x54\x28\x40\x00\x03\xc6\x51\xa0\x38\x13\x77\xb6\x40\x91\x70\xdf\x66\x10\x05\xc4\xfc\x4e\x32\x97\x98\x52\xa0\xc8\xd6\x41\x3f\xe6\x82\x94\x56\xc0\xac\x0a\x4c\xa0\xdd\x57\xab\x01\x53\x01\x06\xc4\x79\xb7\x8f\xbe\xdf\x92\xd0\xfa\x44\xbb\x24\xb9\x06\xe5\x91\xb4\xdb\xc4\xc0\xe5\x24\x38\x6c\x72\x5d\x9e\x7a\x8c\x5c\xc1\x41\xf8\x24\xd5\x44\x05\x14\x28\xbf\xe5\xca\x2a\x96\xf8\x14\x30\xbb\x79\xbe\x6f\xa3\x59\xb5\x7d\x14\xa4\xb5\x58\x8d\x35\x69\xa1\x81\x75\xca\x4a\x94\x24\x3c\x85\x9a\x04\xd3\x18\x90\x25\xd3\x8d\x97\xa7\x3d\x28\xa8\x80\x44\xcb\x3d\x52\xae\x3f\xf1\x18\x05\x3c\xd2\xc4\x3d\xdd\x23\x07\x9e\xdd\x00\x5f\x7b\x6b\xc3\x27\xe1\x73\x60\xe8\x92\x62\x1e\x4a\x0a\x98\x44\x9f\xb8\xf6\xbb\xa6\x10\x6e\x6f\xac\x12\x5e\xda\xf7\x9b\x6d\xbe\xae\xa7\x07\x7d\x53\xef\xf7\x77\x52\xe6\x66\xbf\xb5\x3d\xe0\x9e\xb3\xdd\xbc\xb6\x29\x7d\x92\xae\x02\x4e\x5c\x79\x21\xb9\x76\x8f\xed\x1f\x92\x66\x3e\xb0\x0c\x3d\xf0\x8e\xef\xdc\xc0\xc9\x05\x4d\x6e\xab\xb7\xe6\x82\x1d\x26\x8a\xdc\x5d\x1f\x92\xdb\xa2\x4a\x44\xab\xf6\xe7\x4e\xb8\x3a\x30\x55\xef\x84\xe7\xca\x43\x9b\xd9\x33\x2e\xc1\x25\x1d\xc8\x33\xb1\x13\x00\xbb\x55\x09\xf2\x5d\x1f\xb9\x2d\x27\x11\xc8\x67\x5b\xb4\x96\xa7\x82\x5c\xe0\xea\x4c\x93\x66\x3a\x73\xc9\xb5\xed\x02\xab\xff\x33\xae\x26\x9c\xb5\xa8\x0e\x80\xcb\x7b\xe0\x6a\x22\xc8\x5d\x3a\x83\xf7\x49\xdf\x84\xdd\xb1\xe5\x11\xda\x33\x10\xeb\x6e\x00\x0e\x5d\x3f\xec\x38\x40\xb4\xdb\x0e\x14\x20\x26\x3b\xb6\x6d\xa8\x65\xce\x5d\x10\x09\xaa\x56\x26\xea\x4c\x2d\x73\x06\x6a\x6d\xf9\x5b\x96\x0c\x39\xf0\xf5\x36\x22\x6f\x51\x2c\x73\x74\x41\xb6\x28\x27\x9e\x9d\xdd\x99\xcc\x9a\xbc\x15\xdb\x93\x81\x27\x72\x99\xa3\x42\x65\x21\x27\xbc\x95\xcb\x9c\x75\x86\xea\x0d\x17\x65\x1f\x7c\xe2\x2d\x73\x05\xaa\xc7\x3b\xf3\x3f\x20\xd4\xdc\x94\xf3\xcc\x60\x94\x56\xd1\x23\x05\xe3\x1c\xbc\x50\x82\xec\xb3\x42\x0f\x18\xf4\x96\xb5\x3d\x60\xab\x80\xef\xfb\x71\xea\x75\xf7\x43\x1f\xfc\x1e\xc5\x86\x62\xc7\xbd\xc9\x3a\xd2\xfe\x32\xf7\x51\x87\x1a\xf4\x6a\xeb\x5d\x52\x9e\x6f\x5f\xe1\x52\x9f\x48\x12\x4a\xd8\xb1\x10\x1e\x28\xf2\x99\x0b\x9c\x81\x0f\x9c\xd5\x8a\xb4\xab\xc1\x3e\xb1\x95\x65\x97\x08\x92\xfa\x78\x83\x63\x67\x7d\x40\x92\x59\x95\xc6\x8f\x53\x02\x04\xb9\xc7\xb6\x1d\xf9\xaa\x42\x3b\x8f\xdd\xaa\x3d\xaf\xfd\x2d\x71\xdb\x7d\xaf\xad\x6b\x9d\xe0\xbe\xbb\x7b\xd0\xa2\xec\x7b\x46\xdc\xab\x7f\x79\xaf\xef\xe5\x81\x56\x96\x87\x7a\x69\x99\x7b\xd6\xbb\x1f\x90\x1d\x4c\xda\x96\xf4\x81\xac\xb9\x3c\x9c\x76\xb0\x4e\x3b\xe7\x5d\xb8\xff\x6b\xde\xa7\x7d\x96\x07\xc4\x0e\x0e\x88\x6d\xa7\x1e\x54\x9b\xbb\x87\xe4\xb6\x8c\xbe\xaf\xc4\x1f\x16\x3c\xb0\x6f\x83\x5d\x77\x6f\xb5\x7b\x7e\x5c\x59\x87\x24\xff\x3e\x53\xdf\xef\x92\xa1\x3d\xdb\xda\x43\xb0\x3d\x14\x9b\x0a\xa2\x2c\xac\xeb\x91\x33\x47\x09\xd3\x19\xc6\x61\xf5\x0a\xec\x35\x13\x2f\x92\xb4\x31\x90\x4f\x51\xae\x3b\x26\x4e\xdb\xf5\x6c\x7b\xca\x0e\xd3\xc2\x54\xab\x67\xbb\x4f\x63\x3c\xcf\xcc\x25\xd8\x0f\xbc\xb0\x37\xb0\x30\x4b\x67\x05\xa6\x8d\xc9\x6b\x8c\x4c\xd1\x98\x0a\x5e\x2e\xea\x26\x3d\xbf\xc2\xd5\x79\xfd\x21\x77\x36\xc3\xba\x09\xab\x66\x13\x07\x60\x18\xae\x6f\x55\xce\x5e\xc0\x03\x61\xf2\x29\x0a\xfb\x91\xcd\x90\x6d\xf3\xea\x86\xb1\x89\xca\x2a\xb4\xf7\x06\xb4\x47\xfb\xad\x18\xf6\x55\xd2\xce\xd6\xf0\xd3\x14\x72\x83\xc2\x81\xfe\x6e\xeb\x28\xe6\x40\x62\xd2\x59\xd2\x8c\x1c\x29\x1c\xa8\x4a\xfb\x5e\x4c\xf3\x99\x03\x61\x95\x86\x98\x85\x53\x7b\x0f\xdc\x1c\xf6\x9d\xf1\x70\x51\x1b\xb8\xb4\x57\xc4\x27\x7d\xee\x3f\xb8\xbb\x35\x0c\xc6\xab\x2d\xd9\x84\x1e\x84\xe3\xa3\x3b\x6b\x91\xad\xf3\x28\xc2\x16\xa2\x32\x43\x2e\xba\xaf\x6c\x86\xe1\xa2\x29\x6d\x6e\x9b\xa1\xa5\xfb\x80\xb4\xf9\x14\xf3\x18\xd9\x2e\xcb\x2c\x1d\x1f\xd0\xb3\x08\x5b\xec\xee\xb3\xf3\x4b\x14\x5b\xb2\x39\xe3\x37\xdf\xbe\x7e\xf7\xc7\x7f\xda\x0c\x87\x83\x2c\x7d\x18\xaa\x0a\x8b\xf8\x11\x70\xef\x7e\xff\x9b\xdb\xaf\xbf\x7b\xf7\xbb\x2f\xbb\xdb\xe0\x87\x40\xc3\x69\xb9\x68\x1e\x81\xfa\xf6\xcb\x7f\xbc\xf9\xee\xd7\xf7\xf1\x86\x83\x45\xb6\xad\xec\x79\x59\xe5\x77\x15\x7d\x5f\xd7\x29\xca\x4d\xed\xf4\x22\xcb\x5d\xf5\xd2\x62\xbe\x68\xa0\xb9\x9a\x9b\x91\x53\x9b\xb0\x8a\x92\x4d\x76\x16\xbb\xdb\x81\xaa\xcc\x60\xdb\xe8\x5a\xcc\x81\x79\x16\x46\x26\x29\xb3\xd8\x54\x23\xe7\xf6\xb7\x5f\xff\xe7\x9b\x3f\x11\xd1\x6e\x01\x3d\xef\x21\xb7\x09\x58\xa4\x4d\xcb\x0d\xe2\xb4\x5d\xf5\xe6\x7a\xd8\xdf\x75\x4d\x35\xfe\x5f\x00\x00\x00\xff\xff\xa5\xd7\x7d\xfb\x82\x12\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\xc1\x6e\xd4\x30\x10\x86\xcf\xc9\x53\x8c\xcc\xad\x92\x37\x5b\x15\x24\x04\xd9\x48\xdc\xca\x0d\xa9\xf0\x00\x93\x78\x36\x31\x75\xec\x95\x3d\xd9\x6d\x95\x46\xe2\x0c\x4f\xc1\x43\x20\xf5\x81\x7a\xe1\x2d\x90\x93\xdd\x6e\x76\x29\xe4\x90\x8c\x33\xe3\xcf\xe3\xdf\xe3\xe9\x7b\xa6\x76\x63\x90\x09\x44\x89\x81\xb2\x86\x50\x91\x17\xb0\x18\x86\x34\x4d\x73\xa5\xb7\x50\x19\x0c\x61\x25\x2a\x67\x19\xb5\x25\x2f\x8a\xb4\xef\xb3\x0b\x08\x8c\x9e\xe1\x22\x8b\x91\xf3\x40\xef\x76\x50\xcb\x37\xa2\x48\x01\x4e\x01\x46\xb6\x4a\xbe\x15\x05\x00\xa4\x10\x9f\x64\xee\x57\x72\x6d\xe8\x0e\xe2\x4b\x56\xce\x74\xad\x05\x34\xba\xb6\x52\x33\xb5\x41\x06\xf6\xc4\x55\x33\xf9\x43\xe3\xb5\xbd\x95\x4b\x28\x6b\xb9\x6b\x34\x93\x80\xc0\xf7\x86\x56\x62\xa7\x15\x37\xef\x00\x3b\x76\xef\x45\x91\xa6\x49\x5c\x67\xbe\x8c\xd1\x81\x65\xed\x5d\xb7\x81\xa3\x29\xd7\xa6\x0b\x0d\x94\xce\x2b\xf2\xb2\x74\xcc\xae\x85\x50\x79\x67\x0c\x7a\x42\x51\x4c\x9c\xa4\xef\x3d\xda\x9a\x60\xf1\xc1\xb3\xae\x0c\x85\x61\x98\x3c\x00\x39\x42\xe3\x69\xbd\x12\x59\xdf\x2f\x6e\x5c\xe7\x2b\x1a\x86\x68\x7f\x09\xe4\x27\xeb\xa3\x1a\x86\x45\xc3\xad\x11\x7f\x27\x33\xee\x12\xce\xc6\x12\x2b\xd6\xce\xc2\xe6\x5e\x5e\x81\x69\x24\xeb\xba\x61\x01\xe8\x35\xca\xaa\xf3\x9e\x2c\xaf\x04\xfb\x8e\x0e\x09\x9e\x6f\x76\xaf\xe9\x4e\x5e\x2e\x97\x27\x6a\x56\x64\x99\x3c\x7c\xed\x02\xeb\xf5\xbd\x8c\x87\x4b\x96\x65\x49\xbc\x23\xb2\x73\x1c\x40\x1e\xd8\x3b\x5b\x1f\x98\x6d\x29\x2f\x45\xd1\xf7\x8b\xcf\x9a\x0d\xc1\x03\xdc\xe0\x9a\x86\x21\xcf\xa6\xb0\x79\x26\x99\xd2\xdb\x7f\x64\x16\xab\xe1\x72\x09\x11\x06\xa1\x45\x63\x46\xe4\x35\xb7\x06\x1e\xe0\x9a\x50\x8d\xf4\x88\x9d\x33\xf2\x0c\x9f\xed\xbe\x27\xab\x0e\xfa\x1f\xc3\xd2\x24\x49\x0e\xa3\xe4\xa4\xc0\xda\x52\x5e\x89\x62\xef\x1b\x9d\x16\xb7\x93\x98\x06\x4b\x32\x2b\xf1\x09\x6b\x02\x8b\x5b\x5d\xe3\xa8\x3b\xdd\x61\xbb\x31\xa3\xba\x49\x12\xcb\xb5\x33\x07\xd8\x06\x6b\x6d\xa7\xa8\x73\x11\x27\x6d\x0f\x93\xe2\x34\xa3\x67\xd3\x68\x3a\x6a\xa5\x03\x96\x86\x94\x28\x72\x3c\xf1\x1a\x6d\x6f\x45\xf1\xf4\xf8\xfd\xe9\xf1\xdb\xef\x9f\xbf\xe2\x96\xf3\xcc\xe8\xff\xe3\x5e\xa6\xec\x2b\xf2\x55\xc4\xfd\x78\x11\x97\xe4\x59\x67\x26\xa5\x32\x8b\xdb\xf1\xce\xee\x05\x7a\xf1\xf6\xbe\x1e\xaf\x75\x14\xff\xd8\x38\x82\x56\x54\xa2\xcf\xf6\xdf\xa9\x79\x3c\x73\x0e\xb8\xb1\x67\x90\x55\x53\xc7\x38\xfe\x3d\x6b\x40\x6b\xe7\x78\xdf\x80\xfe\x04\x00\x00\xff\xff\x7c\x30\x27\xc1\x9d\x04\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\x8a\x63\x24\xcc\x21\xa9\xd4\x83\x6b\xa9\xb7\xde\xdb\x17\x00\xb3\x89\x91\xc0\x6b\xc1\x2a\x3d\x50\xbf\x7b\x55\x1b\x27\x69\xdd\x0b\x7f\x33\xfa\xd0\xce\x94\xc2\x18\xa7\x60\x18\x41\x5a\x93\x51\x0f\x68\x1c\x26\x09\xcd\x3c\x0b\x21\x44\xeb\xfc\x15\xfa\x60\x72\x7e\x91\x3d\x8d\x6c\xfc\x88\x49\x76\xa2\x14\x7d\x80\xcc\x26\x31\x1c\xf4\x3c\x0b\x80\x47\x67\xa2\x4f\xb8\xa8\x27\xd9\x09\x80\xdf\x4a\x4f\x41\x45\xa7\x9e\xab\x04\xd0\x0e\xc7\x4d\x9b\xac\x3a\x41\xfc\x59\x2c\x25\x87\x49\x59\x62\xa6\x78\xb3\x02\x94\xd2\xbc\x26\xf6\x7d\xc0\xe6\xc3\x73\x40\xf8\x82\x77\x73\xc6\xe5\xff\x05\xa6\x87\x63\x27\xb6\x8b\x59\xad\x1b\xde\x06\xba\xa8\x89\x32\xff\x0f\x7c\xe3\x18\xf6\xbc\xca\xa8\xd0\x56\x3b\x7f\xdd\xce\xfb\xa9\x4e\x37\xf2\x63\xac\xd9\x3b\xb4\x26\xe9\xba\xaf\xd1\xde\x59\x4b\x92\x38\xba\x35\xc7\xfb\xeb\x9f\x5e\xce\x44\x5c\x7b\xf9\x0e\x00\x00\xff\xff\x66\xf6\x1b\x4b\xb4\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x6a\xdb\x40\x10\xc6\xef\x7a\x8a\xe9\xde\xb7\x2e\xad\x4f\xad\xa3\x57\x29\x92\xb5\x8d\x97\xea\x1f\xda\x6d\x4a\x08\x01\x45\xc4\xa4\x46\x72\x2c\x30\x45\x84\xba\x25\x07\xd7\x69\xa0\x45\xa1\x87\xb2\x6a\x44\x5f\x26\x5a\x59\x3a\xf9\x15\x8a\x2c\xd9\xd0\xe6\x34\x3b\xdf\xfc\xbe\x6f\x96\x19\x18\xf4\x08\x86\xa6\xc6\xd8\x01\x72\x1d\x46\x39\x75\x6c\xcc\x38\x1d\xbe\x3d\x46\xc0\xf8\xb1\x49\x0e\x10\x77\xdc\x97\xf0\xdc\x23\xd6\x2b\xa4\x2a\x00\x00\xff\x98\x70\x1f\x2c\x1d\xbf\x00\xfd\x10\x9b\xf4\x70\xc4\xc1\x73\xde\xd9\x06\x31\x3a\x16\x60\x30\xea\xef\xe0\x37\x8c\x63\xca\x35\x93\x0e\x91\x5a\x06\xab\x2a\xbd\x1f\xf4\x46\xfd\x3d\xe8\xee\x38\x4b\xc7\xcf\x90\x5a\x9f\xcd\xe5\x2c\xad\xcf\xe6\x9b\x3c\xaa\x3f\x7f\x91\x42\x6c\xdf\x9f\x64\x3c\x95\xb3\x54\xc6\xd3\xbd\x2e\xe3\xe9\x83\x1f\x28\x65\x72\xdd\xaa\x72\x79\x2b\x17\x77\x45\x16\xca\x9b\x70\x93\x47\xe5\x62\xd2\xea\x85\xb8\x58\x4f\x6e\x8b\x2c\x2c\xd3\xd6\xf0\x71\x2c\x85\x28\x93\xeb\xf2\xfb\xcf\x66\x7c\xff\xb5\xba\x09\xe4\xf8\x97\x5c\x5d\x35\x29\x42\x94\x8b\xc9\xff\xa3\x3f\xf9\xd6\xf9\x63\x59\x88\x65\xe5\x8f\x1b\x2e\x8e\xe4\xc5\xef\xca\x8f\x64\x1e\x74\xfb\xe3\xa8\xba\x9b\x17\x59\xb8\xbe\x3c\xdf\xe4\xd1\xfa\xf2\xbc\xf9\xcb\xec\x43\xdb\x16\x79\x22\x57\x57\x45\x16\xd6\xc9\xb7\x07\x3f\x18\xf4\xdc\xee\xac\x3d\x83\x1e\xa9\x8a\xd2\x36\x4f\x30\x06\x46\x0d\xa2\x6b\x1e\x30\xae\x79\x1c\x30\x6e\xb9\x93\x13\x4e\x2c\xd7\xd4\x38\x01\xd4\x11\xbd\xae\xbe\xb6\xc9\x7b\x04\x4f\x4f\x4f\x1f\x67\x10\xdb\xd8\x25\x28\xfb\x5d\x6d\xf9\x1b\x00\x00\xff\xff\x28\x1e\xb6\x18\x05\x02\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
