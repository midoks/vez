// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xdd\xae\x9b\x30\x0c\xbe\xe7\x29\xac\x4c\xda\x9d\x97\x8e\xf6\x6a\x0b\xbc\x4b\x20\x06\xb2\x05\x07\x25\x86\x96\xb7\x9f\x68\x1b\x8e\xce\xce\x0d\x32\x4a\xbe\xdf\xb8\xaa\xaa\xca\x38\xbf\x41\x1f\x6c\xce\x8d\xea\x23\x8b\xf5\x4c\x49\xb5\x15\x80\x19\x62\x14\x4a\xe5\xd0\xe1\x10\xe8\x01\xc7\x07\xef\xc9\x2e\xf0\x67\xcd\xe2\x87\x1d\x0f\x14\xb1\x60\x47\x72\x27\x62\xb0\xc1\x8f\x8c\x5e\x68\xce\xd8\x13\x1f\x14\xcb\x8e\x57\x98\x77\xbc\x41\x17\x93\xa3\x84\x12\x97\xa7\x06\xc0\x67\xfd\x80\xb3\xc3\x1b\xbc\xb5\xbe\x32\xbd\x41\x00\xc6\xc2\x94\x68\x68\x94\x56\x05\x3d\x77\x87\x08\x61\x0d\x73\x77\xd0\x5c\x40\xe8\x21\x38\xaf\x42\xee\x35\x3a\xea\x63\xb2\xe2\x23\x23\x47\x26\x08\x13\xfe\x3c\x19\x01\x4c\xde\xc6\x42\xd6\x79\x05\x77\xef\x64\x6a\xd4\xf5\xa2\x60\x22\x3f\x4e\xd2\xa8\xfa\xa6\x5a\xb3\x66\x82\x47\xf0\xfc\xf7\xd7\xcb\xc2\xb7\x2e\x46\xc9\x92\xec\xa2\x74\x6b\x74\xde\xc6\xd3\xa5\xb6\xe7\x98\x17\xcb\x85\xfd\xc3\x98\x6a\xbf\xf7\x71\xd9\x7f\x43\x7d\xa9\x6b\xa3\x8f\x4b\xef\x5e\xb4\xf3\x5b\x5b\xbd\xe6\x35\x14\x24\xdb\x0d\xce\x9a\xfe\x7f\x01\x62\x07\xc1\x67\xc1\x95\xb3\xec\x81\xdc\xbb\xc8\x8f\xd6\x82\x3f\xdb\xca\x78\x55\xad\xf1\xf3\x58\x72\xd6\xb7\x4f\x39\x21\xa7\xbe\x51\x7a\xb0\x9b\xef\x23\xff\x58\x78\x7c\xa6\x0b\xbe\xf8\x5b\xc3\x73\x4b\xf4\x6b\x4d\xda\xaa\x38\x36\xba\x8b\x6e\x3f\xfe\x27\x99\x43\xfb\x2f\x00\x00\xff\xff\xbf\x4d\x50\xca\x65\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\xe3\xc8\xd1\xbe\xfb\x57\xd4\x72\xaf\x5b\xa5\xfe\x22\x9b\x9c\x95\xf4\xc2\xe3\x77\x03\x05\x18\x23\x01\x66\xd6\x48\x8e\x14\xd9\x16\x39\xc3\x0f\x2d\x49\xd1\xb6\x0c\x5f\xb2\x58\xe4\x96\xe4\xb4\x08\x82\x3d\x24\x41\x10\xe4\x96\x00\xd9\x04\x8b\x9d\x43\xfe\xcc\x8c\x93\xf9\x17\x41\x93\x92\x2c\xc9\xf2\x8c\x0f\x59\x18\x96\xba\x8a\xdd\x4f\xd5\xf3\x74\x15\xd5\x3d\xfc\xe8\xff\x7f\x72\xf2\xe2\xe7\x3f\xfd\x0c\x92\x26\xcf\xc6\x47\xc3\xd5\xd7\x47\x88\xf0\xf6\x4f\xdf\xbe\xfb\xf2\x2f\x80\x68\xdd\x26\x8c\xc7\x47\xc3\xdc\x34\x21\x24\x4d\x33\x47\xf3\xc5\x22\x6d\x47\xce\x49\x59\x34\xa6\x68\xf0\xc5\xd5\xdc\x38\x10\xf5\xd6\xc8\x69\xcc\x65\x33\xb0\x50\x9f\x42\x94\x84\x55\x6d\x9a\xd1\xe7\x2f\x7e\x84\xbe\x03\x83\x43\x28\x3f\xc3\xcf\x8f\xf1\xa4\xcc\xe7\x61\x93\x4e\xb3\x6d\xa0\x1f\x7f\x36\x32\xf1\xcc\x38\xef\x8b\xfd\x2c\x2c\x66\x8b\x70\xb6\xbd\x2c\x2a\x36\x2b\x8a\x30\x37\x23\xa7\x4d\xcd\xc5\xbc\xac\x9a\xad\x39\x17\x69\xdc\x24\xa3\xd8\xb4\x69\x64\xb0\x33\x3e\x81\xb4\x48\x9b\x34\xcc\xb0\x8e\xc2\xcc\x8c\x38\xb1\x4f\x20\x0f\x2f\xd3\x7c\x91\x6f\xbb\x16\xb5\xa9\x3a\x3b\x9c\x66\x66\x54\x94\x3d\xab\x2c\x2d\x5e\x41\x65\xb2\x91\x53\x27\x65\xd5\x44\x8b\x06\xd2\xa8\x2c\x1c\x48\x2a\x73\x3e\x72\x06\xe7\x61\x6b\x6d\x9a\x17\x33\x67\x7c\xd4\x4b\x7c\xfb\xf5\xdf\xe0\x69\x59\x36\x75\x53\x85\x73\xb8\xfd\xfd\x77\x6f\xff\xf5\x25\x9c\x3c\x7f\x0e\xb7\x5f\xff\xf2\xcd\xeb\x7f\xf6\xda\x6f\x01\x37\x57\x99\xa9\x13\x63\x9a\x0d\x6a\xdd\x84\x4d\x1a\x0d\xa2\xba\x1e\x4c\xd7\x40\x94\xa7\x05\x45\x75\xfd\x7f\xed\xe8\xfa\xfa\xe9\x22\xcd\xe2\x93\x32\xcf\xd3\xe6\xe6\xc6\x79\x24\x5c\x6d\xb2\xf3\xee\xe3\x41\x98\x15\x81\x61\x1d\x55\xe9\xbc\x81\xba\x8a\xee\x56\xbf\xac\x07\x2f\xbf\x58\x98\xea\x0a\x39\x71\x4e\xac\xcb\xe7\xe5\x41\x9c\xe1\xa0\x07\x18\xf7\x54\x1f\x40\xdb\x65\xf6\x01\xa4\xa3\xa3\xeb\xeb\xf4\x1c\xe8\xb8\x6a\xd2\x28\x33\x37\x37\x47\xc3\x26\x6d\x32\x33\xbe\xbe\x5e\xfb\xe8\x85\x75\xdc\xdc\x00\xc2\xed\x2f\xfe\xfc\x9f\xbf\xbe\x1e\x0e\xfa\x29\x47\xd7\xd7\x26\xab\xb7\xd6\xdc\x7f\x5c\xc4\x37\x37\x96\xfd\x56\x71\xbd\x32\x57\x17\x65\x15\xd7\x5b\xc5\xd5\xaf\xdb\x2b\xc2\xd8\xf4\x29\xa6\xb6\x2a\xee\x4f\x3d\x1a\x0e\xfa\x36\x3b\x1a\x4e\xcb\xf8\xca\x7e\xd7\xed\x0c\x2e\xf3\xac\xa8\x47\x8e\xad\xfc\x27\x83\xc1\xc5\xc5\x05\x5d\x48\x2a\xab\xd9\x40\x30\xc6\x06\x75\x3b\x73\xa0\xdb\xc8\x91\x13\xa7\xf5\x3c\x0b\xaf\x9e\x40\x51\x16\xe6\x53\x67\x7c\x04\x30\xac\xaf\xf2\x69\x99\x41\x1a\x8f\x9c\x8d\x8a\x0e\xd8\x76\x78\x5a\x5e\x8e\x1c\x06\x0c\x38\xf7\x21\x50\xdd\x74\x80\x15\xef\x4d\x51\x6e\xa8\x77\x0f\xe7\x61\x93\xc0\x79\x9a\x65\x58\x2d\x6c\x44\xd3\x9a\xa2\x8c\x63\x07\xa2\x2c\x9d\xef\xfb\xe2\x91\x73\x2a\x14\xb9\x2c\x00\x16\xa1\x47\x5a\x4a\x60\xc8\x39\x69\xee\x82\x4b\x7e\x20\xad\xa1\x02\x01\x5c\x90\xf0\x15\x09\xae\xc0\x23\xae\x90\x98\xa7\x80\x2b\x62\x81\x40\x41\xcc\xf3\x40\x30\x72\xb5\x3e\xf1\x29\x50\x12\x64\x40\xd2\xb3\x10\xae\xd2\xa0\x24\x29\xdf\x05\x06\x4a\x11\xe3\xaa\x75\x29\xd0\x22\xea\x9e\x91\x2b\x02\xe8\x97\x28\xf2\x54\x00\x9c\x51\xe0\x72\xe0\x9c\xb8\x2b\x41\x10\x63\x02\xbc\x6e\xb9\x4d\xc0\x46\x54\x52\xc3\x4e\x44\x2e\x48\x07\x0a\x7c\x9f\x38\xf3\x80\x6b\xd2\xda\x83\x40\x81\x25\xc6\x21\x50\x93\x40\x92\x1b\xad\xc8\x41\x47\x4e\x61\x47\x0e\x3a\x72\x1c\x7b\x72\x68\xd9\xa1\x65\x67\xc9\x61\x4f\xae\x0f\x85\x7d\xa8\x2e\x9f\x00\x3d\x72\x99\x02\x97\x64\xe0\x21\x67\xe4\x09\xd5\xa5\xad\x3a\xb1\xb8\x2b\x5b\xec\x19\x62\x47\x11\x2d\x47\xf4\x29\x90\x0a\x3b\x8e\xb8\x33\x19\x3b\x8e\x68\x39\x2a\xb4\x79\x60\xcf\x11\xb7\x03\x9f\x70\xe6\x76\xda\xdb\xb4\x6d\x34\x46\xa2\x63\x63\xa9\x01\x9b\x74\x7b\xe8\x2f\x4f\x7d\x06\xae\x26\xdf\x93\x27\x3e\x03\xcf\x23\xcf\x93\xa0\x25\x29\xe9\x81\x16\xe0\x09\x72\x95\x04\x2d\x26\x4a\x85\x02\x04\x30\x60\x1c\x05\x8a\x33\x71\x67\x0b\x14\x09\xf7\x6d\x06\x51\x40\xcc\xef\x24\x73\x89\x29\x05\x8a\x6c\x1d\xf4\x63\x2e\x48\x69\x05\xcc\xaa\xc0\x04\xda\x7d\xb5\x1a\x30\x15\x60\x40\x9c\x77\xfb\xe8\xfb\x2d\x09\xad\x4f\xb4\x4b\x92\x6b\x50\x1e\x49\xbb\x4d\x0c\x5c\x4e\x82\xc3\x26\xd7\xe5\xa9\xc7\xc8\x15\x1c\x84\x4f\x52\x4d\x54\x40\x81\xf2\x5b\xae\xac\x62\x89\x4f\x01\xb3\x9b\xe7\xfb\x36\x9a\x55\xdb\x47\x41\x5a\x8b\xd5\x58\x93\x16\x1a\x58\xa7\xac\x44\x49\xc2\x53\xa8\x49\x30\x8d\x01\x59\x32\xdd\x78\x79\xda\x83\x82\x0a\x48\xb4\xdc\x23\xe5\xfa\x13\x8f\x51\xc0\x23\x4d\xdc\xd3\x3d\x72\xe0\xd9\x0d\xf0\xb5\xb7\x36\x7c\x12\x3e\x07\x86\x2e\x29\xe6\xa1\xa4\x80\x49\xf4\x89\x6b\xbf\x6b\x0a\xe1\xf6\xc6\x2a\xe1\xa5\x7d\xbf\xd9\xe6\xeb\x7a\x7a\xd0\x37\xf5\x7e\x7f\x27\x65\x6e\xf6\x5b\xdb\x03\xee\x39\xdb\xcd\x6b\x9b\xd2\x27\xe9\x2a\xe0\xc4\x95\x17\x92\x6b\xf7\xd8\xfe\x21\x69\xe6\x03\xcb\xd0\x03\xef\xf8\xce\x0d\x9c\x5c\xd0\xe4\xb6\x7a\x6b\x2e\xd8\x61\xa2\xc8\xdd\xf5\x21\xb9\x2d\xaa\x44\xb4\x6a\x7f\xee\x84\xab\x03\x53\xf5\x4e\x78\xae\x3c\xb4\x99\x3d\xe3\x12\x5c\xd2\x81\x3c\x13\x3b\x01\xb0\x5b\x95\x20\xdf\xf5\x91\xdb\x72\x12\x81\x7c\xb6\x45\x6b\x79\x2a\xc8\x05\xae\xce\x34\x69\xa6\x33\x97\x5c\xdb\x2e\xb0\xfa\x3f\xe3\x6a\xc2\x59\x8b\xea\x00\xb8\xbc\x07\xae\x26\x82\xdc\xa5\x33\x78\x9f\xf4\x4d\xd8\x1d\x5b\x1e\xa1\x3d\x03\xb1\xee\x06\xe0\xd0\xf5\xc3\x8e\x03\x44\xbb\xed\x40\x01\x62\xb2\x63\xdb\x86\x5a\xe6\xdc\x05\x91\xa0\x6a\x65\xa2\xce\xd4\x32\x67\xa0\xd6\x96\xbf\x65\xc9\x90\x03\x5f\x6f\x23\xf2\x16\xc5\x32\x47\x17\x64\x8b\x72\xe2\xd9\xd9\x9d\xc9\xac\xc9\x5b\xb1\x3d\x19\x78\x22\x97\x39\x2a\x54\x16\x72\xc2\x5b\xb9\xcc\x59\x67\xa8\xde\x70\x51\xf6\xc1\x27\xde\x32\x57\xa0\x7a\xbc\x33\xff\x03\x42\xcd\x4d\x39\xcf\x0c\x46\x69\x15\x3d\x52\x30\xce\xc1\x0b\x25\xc8\x3e\x2b\xf4\x80\x41\x6f\x59\xdb\x03\xb6\x0a\xf8\xbe\x1f\xa7\x5e\x77\x3f\xf4\xc1\xef\x51\x6c\x28\x76\xdc\x9b\xac\x23\xed\x2f\x73\x1f\x75\xa8\x41\xaf\xb6\xde\x25\xe5\xf9\xf6\x15\x2e\xf5\x89\x24\xa1\x84\x1d\x0b\xe1\x81\x22\x9f\xb9\xc0\x19\xf8\xc0\x59\xad\x48\xbb\x1a\xec\x13\x5b\x59\x76\x89\x20\xa9\x8f\x37\x38\x76\xd6\x07\x24\x99\x55\x69\xfc\x38\x25\x40\x90\x7b\x6c\xdb\x91\xaf\x2a\xb4\xf3\xd8\xad\xda\xf3\xda\xdf\x12\xb7\xdd\xf7\xda\xba\xd6\x09\xee\xbb\xbb\x07\x2d\xca\xbe\x67\xc4\xbd\xfa\x97\xf7\xfa\x5e\x1e\x68\x65\x79\xa8\x97\x96\xb9\x67\xbd\xfb\x01\xd9\xc1\xa4\x6d\x49\x1f\xc8\x9a\xcb\xc3\x69\x07\xeb\xb4\x73\xde\x85\xfb\x9f\xe6\x7d\xda\x67\x79\x40\xec\xe0\x80\xd8\x76\xea\x41\xb5\xb9\x7b\x48\x6e\xcb\xe8\x87\x4a\xfc\x61\xc1\x03\xfb\x36\xd8\x75\xf7\x56\xbb\xe7\xc7\x95\x75\x48\xf2\x1f\x32\xf5\xfd\x2e\x19\xda\xb3\xad\x3d\x04\xdb\x43\xb1\xa9\x20\xca\xc2\xba\x1e\x39\x73\x94\x30\x9d\x61\x1c\x56\xaf\xc0\x5e\x33\xf1\x22\x49\x1b\x03\xf9\x14\xe5\xba\x63\xe2\xb4\x5d\xcf\xb6\xa7\xec\x30\x2d\x4c\xb5\x7a\xb6\xfb\x34\xc6\xf3\xcc\x5c\x82\xfd\xc0\x0b\x7b\x03\x0b\xb3\x74\x56\x60\xda\x98\xbc\xc6\xc8\x14\x8d\xa9\xe0\xe5\xa2\x6e\xd2\xf3\x2b\x5c\x9d\xd7\x1f\x72\x67\x33\xac\x9b\xb0\x6a\x36\x71\x00\x86\xe1\xfa\x56\xe5\xec\x05\x3c\x10\x26\x9f\xa2\xb0\x1f\xd9\x0c\xd9\x36\xaf\x6e\x18\x9b\xa8\xac\x42\x7b\x6f\x40\x7b\xb4\xdf\x8a\x61\x5f\x25\xed\x6c\x0d\x3f\x4d\x21\x37\x28\x1c\xe8\xef\xb6\x8e\x62\x0e\x24\x26\x9d\x25\xcd\xc8\x91\xc2\x81\xaa\xb4\xef\xc5\x34\x9f\x39\x10\x56\x69\x88\x59\x38\xb5\xf7\xc0\xcd\x61\xdf\x19\x0f\x17\xb5\x81\x4b\x7b\x45\x7c\xd2\xe7\xfe\xf1\xdd\xad\x61\x30\x5e\x6d\xc9\x26\xf4\x20\x1c\x1f\xdd\x59\x8b\x6c\x9d\x47\x11\xb6\x10\x95\x19\x72\xd1\x7d\x65\x33\x0c\x17\x4d\x69\x73\xdb\x0c\x2d\xdd\x07\xa4\xcd\xa7\x98\xc7\xc8\x76\x59\x66\xe9\xf8\x80\x9e\x45\xd8\x62\x77\x9f\x9d\x5f\xa2\xd8\x92\xcd\x19\xbf\xf9\xee\xf5\xbb\x3f\xfc\xc3\x66\x38\x1c\x64\xe9\xc3\x50\x55\x58\xc4\x8f\x80\x7b\xf7\xbb\x5f\xdf\x7e\xf3\xfd\xbb\xdf\x7e\xd5\xdd\x06\x3f\x00\xfa\xf1\x23\x00\xdf\x7e\xf5\xf7\x37\xdf\xff\xea\x3e\xd4\x70\xb0\xc8\xb6\x45\x3d\x2f\xab\xfc\xae\x98\xef\x4b\x3a\x45\xb9\x29\x9b\x5e\x5f\xb9\x2b\x5c\x5a\xcc\x17\x0d\x34\x57\x73\x33\x72\x6a\x13\x56\x51\xb2\xc9\xce\x62\x77\xe2\x57\x65\x06\xdb\x46\xd7\x5d\x0e\xcc\xb3\x30\x32\x49\x99\xc5\xa6\x1a\x39\xb7\xbf\xf9\xe6\xdf\xdf\xfe\x91\x88\x76\x6b\xe7\x79\x0f\xb9\x4d\xc0\x22\x6d\xba\x6d\x10\xa7\xed\xaa\x2d\xd7\xc3\xfe\x9a\x6b\xaa\xf1\x7f\x03\x00\x00\xff\xff\x44\xf8\x69\xd4\x7d\x12\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xcd\x8e\xe3\x44\x10\x3e\x27\x4f\x51\x6a\x6e\xab\xed\x71\xe6\x07\x09\xed\x3a\x96\x10\xe2\xe7\x00\x12\x12\x2b\x71\x2e\xdb\x15\x77\x33\xe5\x6e\xab\xbb\x3a\x99\x30\x1a\x89\x33\x3c\x05\x0f\x81\x34\x0f\x34\x17\xde\x02\x39\x8e\x33\x4e\x76\xb2\xec\x01\x24\xb8\x38\xdd\xa9\xff\xef\xab\x2a\xf5\xfd\xbd\x50\xdb\x31\x0a\x81\x2a\x31\x52\x66\x08\x6b\x0a\x0a\x2e\x1e\x1e\xe6\xf3\x79\x5e\xdb\x35\x54\x8c\x31\x2e\x55\xe5\x9d\xa0\x75\x14\x54\x31\xbf\xbf\xcf\x5e\x41\x14\x0c\x02\xaf\xb2\x87\x87\x39\xc0\x54\x33\xf8\x0d\x34\xfa\x53\x55\xcc\x01\x8e\x25\x95\x67\xdd\xd6\xfa\xb3\xbd\x08\x86\xef\xb1\x4e\xad\x57\x4c\x77\xd0\x7f\x74\xe5\x39\xb5\x0e\x90\x6d\xe3\xb4\x15\x6a\xa3\x8e\x12\x48\x2a\x33\xc8\xa3\x09\xd6\xdd\xea\x05\x94\x8d\xde\x18\x2b\xa4\x20\xca\x96\x69\xa9\x36\xb6\x16\xf3\x06\x30\x89\x7f\xab\x8a\xf9\x6c\xb6\x0b\xb7\xff\x9d\x86\x63\x1b\x45\x37\xc1\xa7\x0e\x9e\x8f\x7a\xc5\x29\x1a\x28\x7d\xa8\x29\xe8\xd2\x8b\xf8\x16\x62\x15\x3c\x33\x06\x42\x55\x8c\x9e\x00\x72\x04\x13\x68\xb5\x54\x9f\xa8\xf7\x5d\xee\x72\x86\x93\xbb\xc6\x4a\xac\x77\xd0\x6d\xf5\x35\xb0\xd1\x62\x1b\x23\x0a\x30\x58\xd4\x55\x0a\x81\x9c\x2c\x95\x84\x44\x87\xbc\xcf\x40\xb4\xd1\x97\x8b\xc5\x11\x38\x15\x39\xa1\x00\x3f\xa5\x28\x76\xb5\xd5\x3d\x65\xe4\x44\x97\x24\x1b\x22\x77\xe4\x0f\x20\x8f\x12\xbc\x6b\x46\xa7\x6d\xa9\x2f\x55\xf1\xad\x8d\x02\x03\x1c\xbb\xdc\xfb\x7e\xb0\xae\xc9\xb3\x41\xf9\xd4\x43\x8b\xcc\xc5\x8f\x54\xe7\xd9\x70\x9c\x26\x9c\xd5\x76\x7d\xae\x82\xbe\x11\x2e\x17\xd0\xc7\x84\x9d\xa5\x2a\x7e\xf0\x2d\x41\xc7\x58\x91\xf1\x5c\x53\x80\x7d\xf6\x60\x1d\x20\x74\x18\xb0\x09\xd8\x19\x28\x89\xfd\x06\xc4\xd0\x98\x1b\xa0\xab\xa1\x46\xa1\x8b\x93\x90\x79\x86\xff\x02\x51\xff\x0f\x52\x46\x07\x42\x77\xa2\xdb\x24\x54\xab\xe2\x5d\xa2\xf8\xdf\x25\x6a\xbc\x8c\x33\xfa\xac\x32\x9f\xcd\x0e\xb7\x69\x6e\x6d\xa9\xaf\x55\xb1\x17\xf5\x32\x87\xeb\x61\x8c\x18\x4b\xe2\xa5\xfa\x1e\x1b\x02\x87\x6b\xdb\xe0\x8e\x48\xba\xc3\xb6\xe3\x71\xae\x66\x79\x3a\xc0\xd4\x61\x63\xdd\xa0\x74\xca\xd3\x40\xdf\x81\xa6\x59\xce\x76\x62\x45\x43\xe7\xd4\x36\x62\xc9\x3d\xc8\x39\x1e\x49\xd9\xba\x5b\x55\x3c\x3d\xfe\xfa\xf4\xf8\xcb\x9f\xbf\xff\xd1\x57\x9a\x67\x6c\x3f\xe8\xed\x65\x27\x87\xee\x2d\x9e\x1e\x7f\x7b\xc9\xdb\x2c\xcf\xd2\x8e\xd8\x3c\x73\xb8\xde\x2f\xdf\x3d\x38\x67\x16\xf1\xcd\xb8\x88\x8f\x84\x9d\x8f\xb6\x87\x42\x47\xb1\xd5\xed\xf6\xb0\x53\xc5\x77\x6f\xe0\x2a\x50\xfb\xf6\x60\x76\x62\xa8\x6f\xfa\x4e\xb9\xee\xd7\x31\xf7\xc3\x02\xc1\x27\x57\xf7\xb0\xcc\x27\x0d\x6a\x6e\x46\x83\x55\x14\x6d\x05\xd9\x56\xaa\xf8\xbc\xf4\x49\xf2\xcc\xdc\x1c\xe9\x76\x13\xb2\x17\xaa\xf8\x22\x45\xf1\xad\xfd\x99\x40\x8c\x8d\x10\x69\x98\x50\xf1\x20\xc4\x0c\x5b\x9f\x02\xac\x6d\xb4\xe2\x43\x04\x04\xb6\x22\x4c\x50\x5a\x01\xec\xdd\x0f\x0a\x5d\x2a\xd9\x56\x3b\xb6\x5f\xc3\x26\x58\xa1\x10\x5f\x8f\x5d\xfc\x1a\x7c\x80\xe8\x5b\x12\xd3\xb7\x2c\x71\x24\x20\x27\x36\x10\x6f\x2f\xe0\x9d\x17\x64\xde\x42\xea\xfa\x98\x5b\x9f\x2e\xf2\xac\x9b\x80\x31\x81\xfb\x05\x70\x3e\x0a\x86\x50\x19\xbb\xee\x07\xf5\x04\x09\xcf\x47\x6b\x2b\xb9\x1d\x2b\x35\x0c\xc0\x4c\x34\x01\x72\xb6\xc5\x64\xdd\x15\xdf\x61\xa8\x0c\x5c\x2d\xae\x2e\x9f\x3b\xe6\x43\xfa\x5f\x51\x19\x12\x86\xed\x59\x93\x3c\xf3\xfc\x8f\x56\xfd\x25\x47\xda\x18\x0a\xf4\xb1\x65\xff\x4d\xc5\x5f\x5b\xf9\x26\x95\xe7\x53\x3f\xcd\xfd\xbd\xcb\xe1\x38\x16\xb7\x7b\xf2\x90\xab\x87\x07\xcf\xf3\xbf\x27\xef\xa7\x95\xf7\xb2\x7f\x3f\xfd\x15\x00\x00\xff\xff\xcd\x50\x25\x9c\x5c\x09\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x6e\xda\x4e\x10\xc6\xef\x7e\x8a\x91\xff\xb7\x08\xe3\xfc\x81\x4a\x55\x6b\x2c\x45\x55\xdb\x5c\x7a\x6a\x5e\x60\xd7\x1e\xd8\x51\xc7\x1e\x6b\x77\x0c\x72\x5d\xde\xbd\x32\xe0\xc4\x84\xa4\xcd\xa1\x17\xb4\xcb\xfc\xe6\xdb\xf9\x3e\xd0\xf4\xbd\x62\xd5\xb0\x51\x84\xd8\x9a\x80\xa9\x43\x53\xa2\x8f\x61\x7e\x38\x44\x51\x14\x65\x25\xed\xa0\x60\x13\xc2\x3a\x2e\xa4\x56\x43\x35\xfa\x38\x8f\xfa\x3e\xbd\x81\xa0\xc6\x2b\xdc\xa4\x87\x43\x04\x30\x25\xbd\xec\x61\x9b\xbc\x8b\xf3\x08\xe0\xb2\x52\x08\x27\x55\x99\xbc\x3f\x97\x00\x32\xb7\x1c\x6b\x8d\x4d\x56\x50\x0d\x1f\x56\x7c\x89\x3e\xb1\xa2\x2a\xd5\x23\x0a\xd0\xf7\xf3\x3b\xaf\x54\x30\xce\x1f\x48\x19\x8f\x0f\x1f\x55\x52\xb7\xcc\xa3\xf1\x62\x4e\xcc\xa8\x6b\x59\xb6\x49\x23\x41\x5f\x56\xba\xd7\x8a\xe1\x17\x7c\x37\x9b\xa9\xde\x59\xe3\x2c\x9a\xa5\x25\xed\xc6\xf3\xb5\x9d\xd5\x93\x9d\x49\xb1\x91\x40\x4a\x52\x27\x41\xa9\xf8\xd1\xc5\x10\xb4\x63\x5c\xc7\x2a\xcd\x07\x58\x78\xac\x3e\x4e\x06\xba\x68\x3c\xe5\xb0\x04\xbb\x4d\x98\xb6\x4e\xc1\x4b\x5b\x97\x58\x4e\xf8\x21\xb9\xd5\xd8\xb0\x09\x9a\x90\x1a\xa6\x22\xce\xef\xac\xb4\x9a\xa5\x6e\x75\xc1\x36\x23\x5a\xd9\xe4\x36\xce\x3f\xb5\x41\xa5\xa2\x9f\x08\xea\x28\x40\xc0\x62\x18\x14\x54\x40\x91\x19\x3a\x69\x3d\xec\x28\x90\x8a\x0f\x60\x80\x49\x95\x11\x2c\x29\x98\x41\xfe\x04\x34\xad\x65\x2a\xcc\xd0\x39\x83\xbd\x27\x45\x1f\x66\x30\xfc\x4b\xb0\xd6\x19\x88\x87\x20\x15\xaa\xa3\x7a\x0b\xc8\x01\x01\x6b\x25\x8f\xdc\xcd\xe1\x41\xd4\x30\x77\xd0\x36\xc3\x9b\x9d\xb4\xf3\x2c\x6d\x26\x61\x4c\xe2\x7e\x21\x9c\x37\xc5\xe0\x0b\x47\x3b\x0c\x57\x49\x08\x8f\x38\x53\xd0\xa4\xad\x8f\xbf\x4a\x09\xa7\x60\x26\x24\x40\xc6\x94\x67\x06\x9c\xc7\xcd\x3a\xfe\x2f\xce\xbf\x19\x5f\x38\x58\xdc\x2e\xfe\xcf\x52\x93\x67\x29\xd3\x9f\xf9\x2f\x68\x7d\x6b\x7c\xf7\x6a\x4b\x96\x0a\xff\x53\xd7\x9f\x39\xe0\xde\xa1\xc7\xb7\xda\xfe\x8b\xe3\xaf\xa4\xf7\xad\x7d\x7d\xf4\xe7\xb3\x5f\x5d\x1e\x8f\xa3\xb9\xe3\xe2\xc0\xba\x3c\xad\x8d\xa7\x6f\x9f\xad\xa1\x8d\x88\x9e\xd7\xd0\xef\x00\x00\x00\xff\xff\xdf\x8a\x26\x69\xa3\x04\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl":  baseFooterTmpl,
	"base/header.tmpl":  baseHeaderTmpl,
	"home.tmpl":         homeTmpl,
	"page/content.tmpl": pageContentTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
