// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\xaf\x9b\x3c\x10\x85\xf7\xfc\x8a\x91\x5f\xe9\x55\xbb\x70\x7c\x9b\x64\xd5\x0b\x54\x6a\x37\x5d\x54\xea\xba\x4b\x83\x27\x30\xa9\x3f\x90\x3d\x90\xa0\x28\xff\xbd\x22\x7c\x44\xb7\xed\xa6\x1b\x34\x02\xce\x33\xe7\x1c\x3b\xcb\xb2\x2c\x37\x34\x40\x6d\x75\x4a\x85\xa8\x83\x67\x4d\x1e\xa3\x28\x33\x80\xfc\x14\x02\x63\x5c\x3f\x1a\x79\xb2\x78\x85\xe9\x21\x2f\x51\x77\x70\xee\x13\xd3\x69\x94\x93\x0a\x3d\xcb\x0a\xf9\x82\xe8\x41\x5b\x6a\xbc\x24\x46\x97\x64\x8d\x7e\x42\x74\xa3\x3c\x80\x1b\xe5\x11\xaa\x10\x0d\x46\xc9\xa1\x7b\xec\x00\x78\xbb\xdf\x4a\x67\xe4\x11\x96\x5d\x7f\x92\x16\x11\x40\xae\xa1\x8d\x78\x2a\x84\x12\xab\xda\x55\xd3\x12\x94\x7b\x70\xd5\x84\x79\x01\xc6\x2b\x4b\xd7\x33\x9a\x79\x34\x58\x87\xa8\x99\x82\x97\x3e\x78\x04\xdb\xca\x0f\x1b\x11\x20\x4f\x43\xb3\xc2\x2a\x12\x70\x21\xc3\x6d\x21\x0e\x2f\x02\x5a\xa4\xa6\xe5\x42\xec\x8f\xa2\xcc\xfb\x84\x70\xb5\xe4\x7f\x7e\x9c\x2d\xfc\x57\x85\xc0\x89\xa3\xee\x84\x2a\x73\x95\x86\x66\x73\xa9\xf4\x36\xa6\x4e\xfb\x95\xfe\x34\x26\xca\xff\xeb\xd0\x8d\xaf\x70\xbb\xfd\x40\x1d\xef\xf7\x5c\x4d\x3f\x2e\xdd\x28\x43\x43\x99\xcd\x73\x6f\x57\xb5\xd7\x03\x6c\x55\xfd\x7e\x0a\xe8\x0d\x58\x4a\x2c\x7b\x9f\x78\xb4\x68\x96\x32\x9f\xcd\x59\xda\x1a\x4b\xf2\x20\xca\x9c\x5c\xb3\x66\xdd\x1f\xdf\x64\x85\x14\xeb\x42\xa8\x93\x1e\xa8\x0e\x7e\xd7\xf9\xe6\x91\xd0\xd2\xea\xaf\xb7\x8f\x9b\xa2\xe6\xab\x52\x66\xab\xe3\x3c\xd5\x91\x3a\x5e\xf4\x89\x35\x53\xad\xce\x49\x6d\x4d\xed\x1c\xf9\xdd\x39\x7d\x1a\x8a\xdb\xed\x73\x4f\xd6\x7c\x09\xce\x11\xdf\xef\x62\x6a\xf0\x21\x2e\xff\x4e\x69\xa9\x69\xed\xe4\xf0\x39\xfd\x13\x8c\xc7\x0e\xe7\x13\x50\x67\x3d\xe8\xf9\xad\x28\xb3\xd6\x9e\xd3\x8e\x3c\xf1\xd7\x15\x4b\xbe\xf9\xee\xbf\x05\x6d\xde\xbd\x7f\xcd\x9e\xa0\x2c\x57\x55\x30\xe3\x14\xb6\x65\x67\xcb\x5f\x01\x00\x00\xff\xff\x40\x4f\x5d\x5e\x46\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\xdc\xc6\xf1\xbf\xcf\xa7\x28\xf3\x7f\x91\x00\x57\x4f\xbf\xf8\xd2\xee\xec\x1f\xd2\x4a\xc9\x3a\xd0\xca\x09\xac\x87\x0d\xc3\x08\x7a\xc8\x1e\x92\x12\x1f\x63\xb2\x87\xbb\x3b\xeb\xbd\xc4\x30\x72\x4b\x72\x32\x82\xc0\x87\x24\x08\x82\xdc\x12\x20\x4e\x60\xd8\x87\x7c\x19\x4b\x89\xbe\x45\xd0\xe4\xcc\x2c\x67\x35\x92\x37\x48\x8c\xc5\xce\xb0\x8a\xd5\xbf\xaa\xfa\x55\x55\x93\x3d\xfb\x6f\xdd\x7d\xf7\xf0\xe1\x07\x3f\xbe\x07\xa9\x29\xf2\x83\xd1\xfe\xea\xeb\x2d\x44\x78\xfe\x87\x2f\x5f\x7e\xfa\x27\x40\xb4\x6a\xad\xe2\x83\xd1\x7e\xa1\x8d\x82\xd4\x98\x39\xea\x8f\x17\x59\x3b\x71\x0e\xab\xd2\xe8\xd2\xe0\xc3\xb3\xb9\x76\x20\xea\xa5\x89\x63\xf4\xa9\x19\x5b\xa8\x3d\x88\x52\x55\x37\xda\x4c\x1e\x3d\xfc\x01\x06\x0e\x8c\x77\xa1\xbc\x8f\x8f\x6e\xe3\x61\x55\xcc\x95\xc9\xa6\xf9\x10\xe8\x9d\x7b\x13\x1d\x27\xda\x79\x93\xef\xfb\xaa\x4c\x16\x2a\x19\x2e\x8b\xca\xcd\x8a\x52\x15\x7a\xe2\xb4\x99\x3e\x99\x57\xb5\x19\xd8\x9c\x64\xb1\x49\x27\xb1\x6e\xb3\x48\x63\x27\xbc\x0d\x59\x99\x99\x4c\xe5\xd8\x44\x2a\xd7\x13\x46\xe8\xdb\x50\xa8\xd3\xac\x58\x14\x43\xd5\xa2\xd1\x75\x27\xab\x69\xae\x27\x65\xd5\x67\x95\x67\xe5\x33\xa8\x75\x3e\x71\x9a\xb4\xaa\x4d\xb4\x30\x90\x45\x55\xe9\x40\x5a\xeb\xd9\xc4\x19\xcf\x54\x6b\x65\x32\x2f\x13\xe7\x60\xd4\x53\xfc\xe2\xf3\xbf\xc0\x9d\xaa\x32\x8d\xa9\xd5\x1c\x5e\xfc\xf6\xab\xe7\xff\xf8\x14\x0e\xdf\x7b\x0f\x5e\x7c\xfe\xf3\x6f\xbf\xf9\x7b\xcf\xfd\x00\xd8\x9c\xe5\xba\x49\xb5\x36\x1b\xd4\xc6\x28\x93\x45\xe3\xa8\x69\xc6\xd3\x35\x10\x29\xb2\x92\x44\x4d\xf3\xff\xed\xe4\xfc\xfc\xce\x22\xcb\xe3\xc3\xaa\x28\x32\x73\x71\xe1\x5c\x13\x2e\xcd\x92\x34\xcf\x92\xd4\x8c\x7b\x9b\x71\xac\x67\x6a\x91\x9b\xff\x1e\xb9\xd1\xf9\xac\xfb\x78\x2d\xcc\x8a\x9a\xfd\x26\xaa\xb3\xb9\x81\xa6\x8e\x2e\x57\x3f\x6d\xc6\x4f\x3f\x5e\xe8\xfa\x0c\x19\x61\x8c\xd0\x2e\x9e\xa7\x3b\x71\xf6\xc7\x3d\xc0\x41\x47\xe2\x68\xb4\xc6\x8b\x95\x51\xa8\x62\x8c\xf2\xac\x6f\x15\x85\xf3\xc5\x14\x7d\x5f\x78\x5e\xe8\xfa\x1e\x77\x59\x48\x85\x70\x40\x35\x67\x65\xd4\xbb\xb7\x5d\xd7\xdc\x1a\x8f\xe7\x2a\xd1\x2a\xe6\x24\xa9\xaa\x24\xd7\xcd\x59\x19\x67\x91\x32\x59\x55\x92\xa8\x2a\x56\x77\x6d\x8c\x2a\x6e\xa6\x67\xbd\x11\x79\xda\x0c\x62\xd9\xea\xc9\xde\x00\x9b\xcc\x68\x6c\x75\x9d\xcd\x56\x60\x83\x1e\x8d\xef\x84\x3f\xaa\x1e\x44\x0f\xee\xfe\xe4\xdd\x27\x1f\x3c\xaa\x9f\x2c\xee\x06\xf7\x62\x26\xee\x47\x3f\xbc\xfb\x4c\x3c\x79\xa7\xa5\x73\xea\x46\xc7\x8f\xde\xaf\x45\x34\x18\xad\x1e\x7e\xaa\xb2\x78\xf1\x46\xf4\xa8\x8a\x35\x3e\x39\xf1\x9e\xe5\xfc\xe3\xa3\x79\xdf\xc6\x97\x4c\x1d\x8c\x5a\x55\xc3\x4f\xd3\xc2\xc0\xa4\xff\xfa\xe4\x13\xf8\xf0\xa3\xbd\xd1\x8d\xd9\xa2\x8c\x2c\xd4\x8d\x9b\x70\x3e\x02\xb0\x66\x69\x01\x13\x88\xab\x68\x51\xe8\xd2\x90\xa8\xd6\xca\xe8\x7b\xb9\xb6\xd2\x0d\xa7\xc7\x73\x6e\xee\x8d\x00\xd2\x82\x34\x75\x04\x13\xd8\x90\x9a\x16\xa4\x0b\xb5\xe3\x30\x2d\x6c\x39\x23\xcf\xf3\xa9\xa7\xe9\x2c\x62\x53\x8f\x87\x42\x79\x7c\x16\xe8\xa9\x72\x83\x40\x84\x54\x47\xce\xde\xca\x6d\x33\xf4\x9a\x68\xb3\x72\xd9\xdc\x39\x7b\xa8\x92\x07\xaa\xd0\x97\xce\x3f\xa4\x1f\xed\xc1\x08\xa0\x21\x73\x55\xeb\xd2\x3c\xa8\x62\x4d\xb2\xb2\xd1\xb5\xb9\xa3\x67\x55\xad\x6f\xa4\xc5\xdb\xd0\xdc\xdc\x1b\x5d\xdc\xbc\x71\x73\x6f\x74\x59\xb3\xd1\xe8\xfc\x3c\x9b\x01\xb9\x5d\x9b\x2c\xca\xf5\xc5\xc5\x68\xdf\x64\x26\xd7\x07\xe7\xe7\x6b\x1d\x79\x68\x15\x17\x17\x80\xf0\xe2\x67\x7f\xfc\xd7\x9f\xbf\xd9\x1f\xf7\x26\xa3\xf3\x73\x9d\x37\x83\x35\xaf\xde\x2e\xe3\x8b\x0b\xcb\xfa\xa0\x74\xcf\xf4\xd9\x49\x55\xc7\xcd\xa0\x56\xfd\xba\x2b\xbb\x5a\xac\xfb\x18\xb7\xcb\xba\x31\xdd\xb1\x67\x9e\x62\x5c\x36\x38\xaf\xf5\x4c\x9b\x28\x45\xbb\xa6\xae\xf2\xc1\xe2\xaa\xdc\x9e\xe4\xa1\xf9\x66\x96\xc7\x59\xa1\x12\x4d\x22\x15\xa5\x3a\x4a\x95\xad\xdc\x75\x56\x15\x62\x11\xfc\xc7\x8b\x66\x8b\x32\xce\xca\x24\x4a\xab\x2c\xd2\x4d\xa1\x9b\x46\x25\xba\x59\x8d\xe0\x75\x41\xcc\x3c\xda\x3d\xb4\x4e\xdf\xf1\xe3\xfe\xf9\x36\xda\x9f\x56\xf1\x99\xfd\x6e\xda\x04\x4e\x8b\xbc\x6c\xfa\xe1\xbf\x35\x1e\x9f\x9c\x9c\x90\x13\x41\xaa\x3a\x19\x73\x4a\xe9\xb8\x69\x13\x07\xba\x7d\x6e\xe2\xc4\x59\x33\xcf\xd5\xd9\x2d\x28\xab\x52\xef\x39\x07\x23\x80\xfd\xe6\xac\x98\x56\x39\x64\xf1\xc4\xd9\x6c\xcc\x0e\xd8\xe7\xd0\x9d\xea\x74\xe2\x50\xa0\xc0\x58\x00\xa1\xec\xcc\x01\x56\xfd\xb1\x79\x1a\x6c\x5a\xa4\xbb\x39\x57\x26\x85\x59\x96\xe7\x58\x2f\xac\x47\xdd\xea\xb2\x8a\x63\x07\xa2\x3c\x9b\x5f\xd5\xc5\x13\xe7\x98\x4b\xe2\xd2\x10\x68\x84\x1e\xf1\x85\x00\x8a\x8c\x11\x9f\xb9\xe0\x92\x20\x14\x56\x90\x21\x07\xc6\x09\x0f\x24\xe1\x4c\x82\x47\x98\x44\x42\x3d\x09\x4c\x12\x1a\x72\xe4\x84\x7a\x1e\x70\x4a\x5c\xdf\x3f\x0c\x48\x28\x05\x88\x90\x08\xcf\x42\xb8\xd2\x07\x29\x88\x0c\x5c\xa0\x20\x25\xa1\x4c\xb6\x2e\x09\x7d\x1e\x75\xf7\x88\xcb\x43\xe8\x97\x48\xe2\xc9\x10\x18\x25\xa1\xcb\x80\x31\xc2\x5c\x01\x9c\x50\xca\xc1\xeb\x96\xdb\x00\xac\x47\x29\x7c\xd8\xf2\xc8\x38\xf1\x43\x09\x41\x40\x18\xf5\x80\xf9\xc4\xf7\x3d\x08\x25\xd8\xc4\x18\x84\xf2\x28\x14\xc4\x8d\x56\xc9\x41\x97\x9c\xc4\x2e\x39\xe8\x92\x63\xd8\x27\x87\x36\x3b\xb4\xd9\xd9\xe4\xb0\x4f\xae\x77\x85\xbd\xab\x2e\x9e\x10\x3d\xe2\x52\x09\x2e\x11\xa1\x87\x8c\x12\x8f\xcb\x2e\x6c\xd9\x91\xc5\x5c\xd1\x62\x9f\x21\x76\x29\xa2\xcd\x11\x03\x12\x0a\x89\x5d\x8e\xb8\x65\x8c\x5d\x8e\x68\x73\x94\x68\xe3\xc0\x3e\x47\x1c\x3a\x3e\x64\xd4\xed\xb8\xb7\x61\x5b\x6f\x94\xf0\x2e\x1b\x9b\x1a\xd0\xa3\xae\x86\xc1\xf2\x38\xa0\xe0\xfa\x24\xf0\xc4\x61\x40\xc1\xf3\x88\xe7\x09\xf0\x05\x91\xc2\x03\x9f\x83\xc7\x89\x2b\x05\xf8\xfc\x48\x4a\xc5\x81\x03\x05\xca\x90\x23\x7f\xcc\x2f\x65\x8e\x3c\x65\x81\x8d\x20\x0a\x09\x0d\x3a\xca\x5c\x42\xa5\x04\x49\x6c\x1f\xf4\xd7\x8c\x13\xe9\x4b\xa0\x96\x05\xca\xd1\xd6\xd5\x72\x40\x65\x88\x21\x61\xac\xab\x63\x10\xb4\x84\xfb\xfe\xa1\xef\x12\xc1\x7c\x90\x1e\x11\xb6\x4c\x14\x5c\x46\x38\x83\x4d\xac\xcb\x63\x8f\x12\x97\x33\xe0\x01\x11\xf2\x48\x86\x24\x94\x41\xcb\xa4\x65\x2c\x0d\x48\x48\x6d\xf1\x82\xc0\x7a\xb3\x6c\x07\xc8\x89\xef\xf3\xd5\xb5\x4f\x7c\xee\x03\xed\x98\x15\x28\x08\xf7\x24\xfa\x84\x53\x1f\x43\x62\x93\xe9\xae\x97\xc7\x3d\x28\xc8\x90\xf0\x96\x79\x44\xba\xc1\x91\x47\x49\xc8\x22\x9f\x30\xcf\xef\x91\x43\xcf\x16\x20\xf0\xbd\xb5\x10\x10\x1e\x30\xa0\xe8\x12\x49\x3d\x14\x24\xa4\x02\x03\xc2\xfc\xa0\x1b\x0a\xee\xf6\xc2\x2a\xe0\xa5\x7d\x78\xdb\xe1\xeb\x66\x7a\xdc\x0f\xf5\xd5\xf9\x4e\xab\x42\x5f\x1d\x6d\x0f\x98\xe7\x0c\x87\xd7\x0e\x65\x40\x84\x2b\x81\x11\x26\x3d\x45\x5c\x5b\x63\xfb\x87\xc4\xa7\x01\xd0\x1c\x3d\xf0\x6e\x5f\xaa\x81\x11\x17\x7c\xe2\xb6\xfe\xc0\x16\xec\x65\x2a\x89\xbb\xad\x43\xe2\xb6\x28\x53\xde\xca\xab\xb6\x47\x4c\xee\x30\xf5\xb7\xdc\x33\xe9\xa1\x8d\xec\x3e\x13\xe0\x12\x3f\x14\x8f\xf9\x96\x03\xec\x56\xa5\xc8\xb6\x75\xc4\x6d\x19\xe1\xa1\xb8\x3f\x48\x6b\x79\xcc\x89\x0b\x4c\x3e\xf6\x89\x4f\xfd\xdc\x25\xae\x1d\x17\x58\xfd\x3f\x66\xf2\x88\xd1\x16\xe5\x0e\x70\xf1\x0a\xb8\x3c\xe2\xc4\x5d\x3a\xe3\x37\x51\x6f\x54\x77\x5e\xb8\x06\xf7\x14\xf8\x7a\x1a\x80\x41\x37\x0f\x5b\x0a\xe0\xed\x50\x81\x1c\xf8\xd1\x96\x6c\x07\x6a\x59\x30\x17\x78\x8a\xb2\x15\xa9\x7c\x2c\x97\x05\x05\xb9\x96\x82\x81\x24\x14\x03\xb6\x2e\x23\xb2\x16\xf9\xb2\x40\x17\x44\x8b\xe2\xc8\xb3\xd6\x9d\x48\xad\xc8\x5a\x3e\x34\x06\x96\x8a\x65\x81\x12\xa5\x85\x3c\x62\xad\x58\x16\xb4\x13\x64\x2f\xb8\x28\x7a\xe7\x47\xde\xb2\x90\x20\x7b\xbc\xc7\xc1\x77\x10\x35\xd7\xd5\x3c\xd7\x18\x65\x75\x74\x4d\xc2\x18\x03\x4f\x09\x10\x7d\x54\xe8\x01\x85\x5e\xb2\xb2\x07\x74\xe5\xf0\x4d\x0f\xa7\x9e\xf7\x40\x05\x10\xf4\x28\xd6\x15\xbd\xdd\x8b\xb4\x4b\x3a\x58\x16\x01\xfa\xca\x07\x7f\x55\x7a\x97\x48\x2f\xb0\x5b\xb8\xf0\x0f\x05\xe1\x92\xdb\x6b\xce\x3d\x90\x24\xa0\x2e\x30\x0a\x01\x30\xda\x48\xe2\xbb\x3e\xd8\x3b\xb6\xb3\xec\x12\x4e\x84\x7f\x7b\x83\x63\xad\xbe\x83\x92\xa4\xce\xe2\xeb\x31\x01\x9c\xb8\xb7\xed\x38\xb2\x55\x87\x76\x1a\x5b\xaa\x2b\x5a\xfb\x2c\x71\xdb\xab\x5a\xdb\xd7\x7e\x8a\x57\xd5\xdd\x8d\x16\x45\x3f\x33\xfc\x95\xfe\x17\xaf\xcc\xbd\xd8\x31\xca\x62\xd7\x2c\x2d\x0b\xcf\x6a\xaf\x3a\xa4\x3b\x83\xb6\x2d\xbd\x23\x6a\x26\x76\x87\x1d\xae\xc3\x2e\x58\xe7\xee\x7f\x1a\xf7\x71\x1f\xe5\x0e\xb2\xc3\x1d\x64\x5b\xd3\x9d\x6c\x33\x77\x17\xdd\x36\xa3\xef\x2b\xf0\xd7\x13\x1e\xda\xdd\x60\x5b\xdd\x4b\xed\x15\x3d\xae\xa4\x5d\x94\x7f\x9f\xa1\x5f\x9d\x92\x7d\xfb\x6e\x6b\x5f\x82\xed\x4b\xb1\xae\x21\xca\x55\xd3\x4c\x9c\x39\x0a\x98\x26\x18\xab\xfa\x19\x18\x7d\x6a\xf0\x24\xcd\x8c\x86\x62\x8a\x62\x3d\x31\x71\xd6\xae\xad\xed\x81\x42\x65\xa5\xae\x57\xf7\xb6\xef\xc6\x38\xcb\xf5\x29\xd8\x0f\x3c\xa9\xd5\x1c\x54\x9e\x25\x25\x66\x46\x17\x0d\x46\xba\x34\xba\x86\xa7\x8b\xc6\x64\xb3\x33\x5c\x1d\x4d\x5e\xa7\xce\x13\x6c\x8c\xaa\xcd\xc6\x0f\xc0\xbe\x5a\xbf\xf8\x3b\x57\x1c\xee\x70\x53\x4c\x91\xdb\x8f\x3c\x41\x3a\xcc\xab\xbb\x8c\x75\x54\xd5\xdd\x61\x01\xed\xab\xfd\xc0\x87\xdd\x4a\xda\x64\x0d\x3f\xcd\xa0\xd0\xc8\x1d\xe8\x7f\x54\x72\x24\x75\x20\xd5\x59\x92\x9a\x89\x23\xb8\x03\x75\x65\xf7\xc5\xac\x48\x1c\x50\x75\xa6\x30\x57\x53\x7b\x58\xd9\xbc\xec\x3b\x07\xfb\x8b\x46\xc3\xa9\x3d\xc7\xdc\xea\x63\xff\xbf\xcb\x53\xc3\xf8\x60\x55\x92\x8d\xeb\xb1\x3a\x18\x5d\x4a\x8b\x7c\x1d\x47\xa9\x5a\x88\xaa\x1c\x19\xef\xbe\xf2\x04\xd5\xc2\x54\x36\xb6\xcd\xa5\x4d\xf7\x35\xd4\x16\x53\x2c\x62\xa4\xdb\x59\xe6\xd9\xc1\x0e\x3e\x4b\xd5\x62\x77\xe8\x9a\x9f\x22\x1f\xd0\xe6\x1c\x7c\xfb\xd5\x37\x2f\x7f\xf7\x37\x1b\xe1\xfe\x38\xcf\x5e\x0f\x55\xab\x32\xbe\x06\xdc\xcb\xdf\xfc\xf2\xc5\x17\x5f\xbf\xfc\xf5\x67\xdd\xa9\x79\x07\x68\xf7\x5b\xd1\x16\xb2\x9a\x56\x0b\x73\x0d\xe8\xe7\x9f\xfd\xf5\xdb\xaf\x7f\xb1\x01\xed\x7e\x27\xba\x64\x78\x91\x0f\x29\x9e\x55\x75\x71\xd9\xda\xaf\x12\x3c\x45\xb1\x69\xa2\x9e\x6d\xb1\x4d\x63\x56\xce\x17\x06\xcc\xd9\x5c\x4f\x9c\x46\xab\xda\x9e\x4e\x57\x78\x16\x7b\x7d\x12\x87\xa1\xd0\xcd\x9a\x03\xf3\x5c\x45\x3a\xad\xf2\x58\xd7\x13\xe7\xc5\xaf\xbe\xf8\xe7\x97\xbf\x27\x84\x6c\x77\xd2\x7b\x3d\xe4\x30\x01\x8b\xb4\x99\xbd\x71\x9c\xb5\xab\x21\x5d\x5f\xf6\x87\x5e\x5d\x1f\xfc\x3b\x00\x00\xff\xff\xa5\x85\xc5\xb4\x04\x16\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
