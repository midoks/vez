// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x6f\x9c\x3e\x10\xc5\xef\x7c\x8a\x91\xff\x7f\x35\xc9\xc1\x38\xc9\xee\xa9\x61\xa9\xd4\x5e\x7a\xa8\xd4\x4b\x2f\x3d\x1a\x3c\x0b\x43\x8d\x4d\xed\x81\x04\xad\xf6\xbb\x57\xc0\xc2\x2a\xad\x7a\x68\x2e\x68\x30\xcc\xef\xbd\x79\x9e\x24\x49\x92\xcc\xd0\x00\xa5\xd5\x31\x1e\x44\xe9\x1d\x6b\x72\x18\x44\x9e\x00\x64\x47\xef\x19\xc3\xfa\xd1\xc8\xa3\xc5\x17\x98\x1e\xf2\x39\xe8\x0e\x9a\x3e\x32\x1d\x47\x39\x75\xa1\x63\x59\x20\x3f\x23\x3a\xd0\x96\x2a\x27\x89\xb1\x8d\xb2\x44\x37\x21\xba\x51\xee\xa0\x1d\xe5\x1e\x0a\x1f\x0c\x06\xc9\xbe\x9b\x35\x00\x5e\xeb\x5b\xd9\x1a\xb9\x87\x8b\xd6\x9f\xa4\x4b\x13\x40\xa6\xa1\x0e\x78\x3c\x08\x25\xd6\xee\xb6\x98\x44\x50\x3e\x42\x5b\x4c\x98\x7b\x60\x7c\x61\xd9\xf6\x8c\x66\x29\x0d\x96\x3e\x68\x26\xef\xa4\xf3\x0e\xc1\xd6\xf2\x61\x23\x02\x64\x71\xa8\x56\x58\x41\x02\x9e\xc9\x70\x7d\x10\xbb\x7b\x01\x35\x52\x55\xf3\x41\x3c\xee\x45\x9e\xf5\x11\xe1\xc5\x92\xfb\xf1\x7e\xb1\xf0\x5f\xe1\x3d\x47\x0e\xba\x13\x2a\xcf\x54\x1c\xaa\xcd\xa5\xd2\x5b\x19\x3b\xed\x56\xfa\xd5\x98\xc8\xdf\x95\xbe\x1b\x9f\xe0\x74\xfa\x8e\x3a\x9c\xcf\x99\x9a\x7e\xbc\x64\xa3\x0c\x0d\x79\xb2\xd4\xbd\x5d\xbb\x9d\x1e\x60\x8b\xea\xf7\x5b\x40\x67\xc0\x52\x64\xd9\xbb\xc8\xa3\x45\x73\x09\xf3\x9a\x9c\xa5\x2d\xb1\x28\x77\x22\xcf\xa8\xad\xd6\x59\x1f\xf7\xaf\x66\x85\x18\xca\x83\x50\x47\x3d\x50\xe9\x5d\xda\xb9\x6a\x9e\xd0\xd2\xea\xaf\xb7\xf3\xa6\xa8\x65\x55\xf2\x64\x75\x9c\xc5\x32\x50\xc7\x97\xfe\xc8\x9a\xa9\x54\x4d\x54\xcd\xcf\x1e\xc3\x28\x77\xe9\x2e\x7d\x48\x5b\x72\x69\x13\x3f\x0c\x87\xd3\xe9\x63\x4f\xd6\x7c\xf2\x6d\x4b\x7c\x3e\x8b\x29\xc4\xb9\x3f\xff\x2b\x68\x8b\xfc\xed\x94\x9a\xaa\xda\x4e\xa3\x5e\xab\xb7\xc3\x58\x17\x16\xaf\xae\xe4\xfc\xfe\x4f\x38\x1e\x3b\x5c\x36\x43\x35\x7a\xd0\xcb\xa9\xc8\x93\xda\x36\x31\x25\x47\xfc\x79\x75\x49\xae\xfa\xea\xbe\x78\x6d\x6e\xef\x9e\x92\xff\x6f\x6f\x66\xad\x9b\xbb\x74\x53\xff\x36\x1d\xdc\x9e\xce\x77\x4f\xc9\x55\x27\xc9\x54\xe1\xcd\x38\xdd\x51\xcd\xad\xcd\x7f\x05\x00\x00\xff\xff\x86\xf1\x37\xaa\xfd\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\x1b\xc7\x11\xbe\xf3\x57\x94\x27\x17\x09\x50\x37\xfb\x35\x2f\x2d\xb9\x81\xb4\x52\x42\x07\x5a\x39\x81\xf5\xb0\x61\x18\x41\x73\xa6\x39\xd3\xd2\x3c\xe8\x99\xe6\xec\x2e\x57\x7b\x89\x61\xe4\x96\xe4\x64\x04\x81\x0f\x49\x10\x04\xb9\x25\x40\x9c\xc0\xb0\x0f\xf9\x33\xb6\x12\xfd\x8b\xa0\x67\x48\xee\x90\xa2\xe4\xf5\x0b\x8b\x25\xbb\x6a\xaa\xbf\xaa\xfa\xaa\xab\xa7\x9b\xa3\x37\xee\xbc\x75\xf4\xe0\xdd\x9f\xdf\x85\xd4\xe4\xd9\xe1\x60\xb4\xfa\x7a\x03\x21\xf8\xea\x2f\x9f\xbe\xf8\xf0\x6f\x80\x90\x55\x2b\x19\x1f\x0e\x46\xb9\x32\x12\x52\x63\xe6\x48\x7d\xb0\xd0\xcd\xd8\x39\x2a\x0b\xa3\x0a\x83\x1e\x9c\xcd\x95\x03\x51\x27\x8d\x1d\xa3\x4e\xcd\xd0\x42\x1d\x40\x94\xca\xaa\x56\x66\xfc\xf0\xc1\x4f\x50\xe0\xc0\x70\x1f\xca\x3b\xe8\xe1\x2d\x74\x54\xe6\x73\x69\xf4\x34\xeb\x03\xbd\x79\x77\xac\xe2\x44\x39\xaf\xf3\x7d\x4f\x16\xc9\x42\x26\xfd\x69\x51\xb1\x99\x51\xc8\x5c\x8d\x9d\x46\xab\x93\x79\x59\x99\x9e\xcd\x89\x8e\x4d\x3a\x8e\x55\xa3\x23\x85\x5a\xe1\x06\xe8\x42\x1b\x2d\x33\x54\x47\x32\x53\x63\x8a\xc9\x0d\xc8\xe5\xa9\xce\x17\x79\x5f\xb5\xa8\x55\xd5\xca\x72\x9a\xa9\x71\x51\x76\x59\x65\xba\x78\x0a\x95\xca\xc6\x4e\x9d\x96\x95\x89\x16\x06\x74\x54\x16\x0e\xa4\x95\x9a\x8d\x9d\xe1\x4c\x36\x56\xc6\xf3\x22\x71\x0e\x07\x1d\xc5\xcf\x3f\xfe\x07\xdc\x2e\x4b\x53\x9b\x4a\xce\xe1\xf9\x1f\x3f\xfb\xea\x3f\x1f\xc2\xd1\xdb\x6f\xc3\xf3\x8f\x7f\xfd\xe5\x17\xff\xee\xb8\xef\x01\x9b\xb3\x4c\xd5\xa9\x52\x66\x83\x5a\x1b\x69\x74\x34\x8c\xea\x7a\x38\x5d\x03\xe1\x5c\x17\x38\xaa\xeb\x1f\x37\xe3\xf3\xf3\xdb\x0b\x9d\xc5\x47\x65\x9e\x6b\x73\x71\xe1\x7c\x1b\x38\x54\x29\x3b\xfe\xee\xa8\xc6\xf2\xd5\xc3\x6d\xe5\xef\x0e\x9b\xea\x24\xcd\x74\x92\x9a\x61\x67\x33\x8c\xd5\x4c\x2e\xb2\xef\x21\xe0\x5a\x65\xb3\xf6\xe3\x95\x30\xab\x3a\x8e\xea\xa8\xd2\x73\x03\x75\x15\x5d\xce\x7e\x52\x0f\x9f\x7c\xb0\x50\xd5\x19\xa2\x98\x52\x4c\xda\x78\x9e\xec\xc5\x19\x0d\x3b\x80\xc3\xb6\xe2\x83\xc1\x1a\x2f\x96\x46\x22\x19\xa3\x28\xd3\xdd\xba\x96\x68\xbe\x98\x22\xdf\xe7\x9e\x17\xba\xbe\xc7\x5c\x1a\x12\xce\x1d\x90\xf5\x59\x11\x75\xee\x6d\x8b\xd4\x37\x87\xc3\xb9\x4c\x94\x8c\x19\x4e\xca\x32\xc9\x54\x7d\x56\xc4\x3a\x92\x46\x97\x05\x8e\xca\x7c\xf5\xd4\xc6\x28\xe3\x7a\x7a\xd6\x19\xe1\x27\x75\x2f\x96\xad\x06\xea\x0c\x50\xad\x8d\x42\x8d\xaa\xf4\x6c\x05\xd6\x6b\xa8\xf8\x76\xf8\xb3\xf2\x7e\x74\xff\xce\x2f\xde\x7a\xfc\xee\xc3\xea\xf1\xe2\x4e\x70\x37\xa6\xfc\x5e\xf4\xd3\x3b\x4f\xf9\xe3\x37\x1b\x32\x27\x6e\x74\xfc\xf0\x9d\x8a\x47\xbd\x7d\xa0\x83\x9f\x4a\x1d\x2f\x5e\x8b\x1e\x95\xb1\x42\x8f\x4f\xbc\xa7\x19\xfb\x60\x32\xef\x7a\xee\x92\xa9\xc3\x41\x23\x2b\xf8\x65\x9a\x1b\x18\x77\x5f\xcf\x9e\xc1\x7b\xef\x1f\x0c\xae\xcd\x16\x45\x64\xa1\xae\x5d\x87\xf3\x01\x80\x35\x4b\x73\x18\x43\x5c\x46\x8b\x5c\x15\x06\x47\x95\x92\x46\xdd\xcd\x94\x95\xae\x39\x1d\x9e\x73\xfd\x60\x00\x90\xe6\xb8\xae\x22\x18\xc3\x86\xd4\x34\xc7\x6d\xa8\x2d\x87\x69\x6e\xcb\x19\x79\x9e\x4f\x3c\x45\x66\x11\x9d\x7a\x2c\xe4\xd2\x63\xb3\x40\x4d\xa5\x1b\x04\x3c\x24\x2a\x72\x0e\x56\x6e\xeb\xbe\xd7\x44\x99\x95\xcb\xfa\xf6\xd9\x03\x99\xdc\x97\xb9\xba\x74\xfe\x1e\x79\xff\x00\x06\x00\x35\x9e\xcb\x4a\x15\xe6\x7e\x19\x2b\xac\x8b\x5a\x55\xe6\xb6\x9a\x95\x95\xba\x96\xe6\x37\xa0\xbe\x7e\x30\xb8\xb8\x7e\xed\xfa\xc1\xe0\xb2\x66\x83\xc1\xf9\xb9\x9e\x01\xbe\x55\x19\x1d\x65\xea\xe2\x62\x30\x32\xda\x64\xea\xf0\xfc\x7c\xad\xc3\x0f\xac\xe2\xd9\x44\xc9\xb8\x1d\x5d\x5c\x00\x82\xe7\xbf\xfa\xeb\xff\xfe\xfe\xc5\x68\xd8\x19\x6f\xd5\xe6\xa9\x3a\x3b\x29\xab\xb8\xee\x15\x63\x17\x0c\x9e\x41\x0f\xee\x46\x07\xb6\xb3\x05\xc7\xaa\x8b\x71\xbb\xac\x3d\xa4\x89\xc9\xb3\x57\x01\x9d\x9f\xab\xac\xee\x65\xf3\xcd\xc2\xfd\x06\xf1\xf4\x3d\x16\xf1\xc5\x85\x5d\x62\x2f\xbd\x79\x4e\x51\x5c\xd4\x68\x5e\xa9\x99\x32\x51\x8a\xec\xe4\xaa\xcc\x7a\x28\x65\xb1\xbd\xc5\xf4\xcd\x37\x9b\xcc\x50\xe7\x32\x51\x38\x92\x51\xaa\xa2\x54\xda\x25\x75\x95\x59\x39\x5f\x04\xbb\x93\x06\x5f\x3f\xed\xb5\xdb\xc1\x55\xfc\x9a\x79\xf4\xed\x27\x77\x13\x65\x5c\xe3\x04\xc7\xe5\x62\x9a\xa9\x28\xd3\xd1\x53\x5c\x28\x73\x95\xe9\x27\x27\x27\x2b\xdf\x57\x75\x38\x5b\x14\xb1\x2e\x92\x28\x2d\x75\xa4\xea\x5c\xd5\xb5\x4c\x54\xbd\x0d\x32\x18\x8c\x86\xdd\xc1\x66\x30\x9a\x96\xf1\x99\xfd\xae\x9b\x04\x4e\xf3\xac\xa8\xbb\x8d\xf4\x66\xe7\xfb\x84\xe3\xb2\x4a\x86\x8c\x10\x32\xac\x9b\xc4\x81\xf6\x9d\x31\x76\x62\x5d\xcf\x33\x79\x76\x13\x8a\xb2\x50\x07\xce\xe1\x00\x60\x54\x9f\xe5\xd3\x32\x03\x1d\x8f\x9d\xcd\xab\xce\x01\x7b\x00\xb9\x5d\x9e\x8e\x1d\x02\x04\x28\x0d\x20\x14\xad\x39\xc0\x6a\x45\x6f\x8e\x01\x9b\x45\xdd\x3e\x9c\x4b\x93\xc2\x4c\x67\x19\xaa\x16\xd6\xa3\x6a\x54\x51\xc6\xb1\x03\x51\xa6\xe7\xbb\xba\x78\xec\x1c\x33\x81\x5d\x12\x02\x89\x90\x87\x7d\xce\x81\x20\x4a\xb1\x4f\x5d\x70\x71\x10\x72\x2b\x88\x90\x01\x65\x98\x05\x02\x33\x2a\xc0\xc3\x54\x20\x4c\x3c\x01\x54\x60\x12\x32\xc4\x30\xf1\x3c\x60\x04\xbb\xbe\x7f\x14\xe0\x50\x70\xe0\x21\xe6\x9e\x85\x70\x85\x0f\x82\x63\x11\xb8\x40\x40\x08\x4c\xa8\x68\x5c\x1c\xfa\x2c\x6a\x9f\x61\x97\x85\xd0\x4d\x11\xd8\x13\x21\x50\x82\x43\x97\x02\xa5\x98\xba\x1c\x18\x26\x84\x81\xd7\x4e\xb7\x01\x58\x8f\x82\xfb\xb0\xe5\x91\x32\xec\x87\x02\x82\x00\x53\xe2\x01\xf5\xb1\xef\x7b\x10\x0a\xb0\x89\x51\x08\xc5\x24\xe4\xd8\x8d\x56\xc9\x41\x9b\x9c\x40\x6d\x72\xd0\x26\x47\x51\x97\x1c\xb2\xd9\x21\x9b\x9d\x4d\x0e\x75\xc9\x75\xae\x50\xe7\xaa\x8d\x27\x44\x1e\x76\x89\x00\x17\xf3\xd0\x43\x94\x60\x8f\x89\x36\x6c\xd1\x92\x45\x5d\xde\xa0\x2e\x43\xd4\xa6\x88\x6c\x8e\x28\xc0\x21\x17\xa8\xcd\x11\x6d\x19\xa3\x36\x47\x64\x73\x14\xc8\xc6\x81\xba\x1c\x51\xdf\xf1\x11\x25\x6e\xcb\xbd\x0d\xdb\x7a\x23\x98\xb5\xd9\xd8\xd4\x80\x4c\xda\x1a\x06\xcb\xe3\x80\x80\xeb\xe3\xc0\xe3\x47\x01\x01\xcf\xc3\x9e\xc7\xc1\xe7\x58\x70\x0f\x7c\x06\x1e\xc3\xae\xe0\xe0\xb3\x89\x10\x92\x01\x03\x02\x84\x22\x86\xd8\x23\x76\x29\x33\xc4\x52\x1a\xd8\x08\xa2\x10\x93\xa0\xa5\xcc\xc5\x44\x08\x10\xd8\xae\x83\x6e\x4c\x19\x16\xbe\x00\x62\x59\x20\x0c\xd9\xba\x5a\x0e\x88\x08\x51\x88\x29\x6d\xeb\x18\x04\x0d\x66\xbe\x7f\xe4\xbb\x98\x53\x1f\x84\x87\xb9\x2d\x13\x01\x97\x62\x46\x61\x13\xeb\xf2\xd8\x23\xd8\x65\x14\x58\x80\xb9\x98\x88\x10\x87\x22\x68\xa8\xb0\x8c\xa5\x01\x0e\x89\x2d\x5e\x10\x58\x6f\x96\xed\x00\x31\xec\xfb\x6c\x35\xf6\xb1\xcf\x7c\x20\x2d\xb3\x1c\x71\xcc\x3c\x81\x7c\xcc\x88\x8f\x42\x6c\x93\x69\xc7\xcb\xe3\x0e\x14\x44\x88\x59\x43\x3d\x2c\xdc\x60\xe2\x11\x1c\xd2\xc8\xc7\xd4\xf3\x3b\xe4\xd0\xb3\x05\x08\x7c\x6f\x2d\x04\x98\x05\x14\x08\x72\xb1\x20\x1e\xe2\x38\x24\x1c\x05\x98\xfa\x41\xdb\x14\xcc\xed\x84\x55\xc0\x4b\x7b\x10\xb2\xcd\xd7\xf6\xf4\xb0\x6b\xea\xdd\xfe\x4e\xcb\x5c\xed\xb6\xb6\x07\xd4\x73\xfa\xcd\x6b\x9b\x32\xc0\xdc\x15\x40\x31\x15\x9e\xc4\xae\xad\xb1\xfd\x43\xd8\x27\x01\x90\x0c\x79\xe0\xdd\xba\x54\x03\xc5\x2e\xf8\xd8\x6d\xfc\x9e\x2d\xd8\x61\x2a\xb0\xbb\xad\x43\xd8\x6d\x90\x48\x59\x23\x76\x6d\x27\x54\xec\x31\xf5\xb7\xdc\x53\xe1\x21\x1b\xd9\x3d\xca\xc1\xc5\x7e\xc8\x1f\xb1\x2d\x07\xa8\x9d\x95\x22\xba\xad\xc3\x6e\x43\x31\x0b\xf9\xbd\x5e\x5a\xcb\x63\x86\x5d\xa0\xe2\x91\x8f\x7d\xe2\x67\x2e\x76\x6d\xbb\xc0\xea\xff\x11\x15\x13\x4a\x1a\x24\xf6\x80\xf3\x97\xc0\xc5\x84\x61\x77\xe9\x0c\x5f\x47\x7d\x7b\x77\xb8\x12\xf7\x04\xd8\xba\x1b\x80\x42\xdb\x0f\x5b\x0a\x60\x4d\x5f\x81\x18\xb0\xc9\x96\x6c\x1b\x6a\x99\x53\x17\x58\x8a\x44\xc3\x53\xf1\x48\x2c\x73\x02\x62\x2d\x05\x3d\x89\x4b\x0a\x74\x5d\x46\x44\x1b\xc4\x96\x39\x72\x81\x37\x88\x4f\x3c\x6b\xdd\x8a\xc4\x8a\xb4\x61\x7d\x63\xa0\x29\x5f\xe6\x48\x20\x61\x21\x27\xb4\xe1\xcb\x9c\xb4\x82\xe8\x04\x17\xf1\xce\xf9\xc4\x5b\xe6\x02\x44\x87\xf7\x28\xf8\x1a\xa2\xe6\xaa\x9c\x67\x0a\x45\xba\x8a\xae\x48\x18\xa5\xe0\x49\x0e\xbc\x8b\x0a\x79\x40\xa0\x93\xac\xec\x01\x59\x39\x7c\xdd\xcb\xa9\xe3\x3d\x90\x01\x04\x1d\x8a\x75\x45\x6e\x75\x22\x69\x93\x0e\x96\x79\x80\x7c\xe9\x83\xbf\x2a\xbd\x8b\x85\x17\xd8\x2d\x9c\xfb\x47\x1c\x33\xc1\xec\x98\x31\x0f\x04\x0e\x88\x0b\x94\x40\x00\x94\xd4\x02\xfb\xae\x0f\xf6\x89\x5d\x59\x76\x0a\xc3\xdc\xbf\xb5\xc1\xb1\x56\x5f\x43\x49\x52\xe9\xf8\x6a\x4c\x00\xc3\xee\x2d\xdb\x8e\x74\xb5\x42\x5b\x8d\x2d\xd5\x8e\xd6\xbe\x4b\xdc\x66\x57\x6b\xd7\xb5\x9f\xa2\x5d\x75\xfb\xa0\x41\xbc\xeb\x19\xf6\xd2\xfa\xe7\x2f\xf5\x3d\xdf\xd3\xca\x7c\x5f\x2f\x2d\x73\xcf\x6a\x77\x1d\x92\xbd\x41\xdb\x25\xbd\x27\x6a\xca\xf7\x87\x1d\xae\xc3\xce\x69\xeb\xee\x7b\x8d\xfb\xb8\x8b\x72\x0f\xd9\xe1\x1e\xb2\xad\xe9\x5e\xb6\xa9\xbb\x8f\x6e\x9b\xd1\x0f\x15\xf8\xab\x09\x0f\xed\x6e\xb0\xad\xee\xa4\x66\x47\x8f\x56\xd2\x3e\xca\x7f\xc8\xd0\x77\xbb\x64\x64\xcf\xb6\xf6\x10\x6c\x0f\xc5\xaa\x82\x28\x93\x75\x3d\x76\xe6\x88\xc3\x34\x41\xb1\xac\x9e\x82\x51\xa7\x06\x9d\xa4\xda\x28\xc8\xa7\x88\xaf\x3b\x26\xd6\xcd\xda\xda\xde\x81\xa4\x2e\x54\xb5\x7a\xb6\xfd\x34\x46\xb3\x4c\x9d\x82\xfd\x40\x27\x95\x9c\x83\xcc\x74\x52\x20\x6d\x54\x5e\xa3\x48\x15\x46\x55\xf0\x64\x51\x1b\x3d\x3b\x43\xab\xdb\xd4\xab\xd4\x59\x82\x6a\x23\x2b\xb3\xf1\x03\x30\x92\xeb\xf3\xbf\xb3\xe3\x70\x8f\x9b\x7c\x8a\x98\xfd\xc8\x12\x44\xfa\x79\xb5\xc3\x58\x45\x65\xd5\xde\x70\x90\x3d\xda\xf7\x7c\xd8\xad\xa4\x49\xd6\xf0\x53\x0d\xb9\x42\xcc\x81\xee\xd7\x44\x47\x10\x07\x52\xa5\x93\xd4\x8c\x1d\xce\x1c\xa8\x4a\xbb\x2f\xea\x3c\x71\x40\x56\x5a\xa2\x4c\x4e\xed\x9d\x65\x73\xd8\x77\x0e\x47\x8b\x5a\xc1\xa9\xbd\xce\xdc\xec\x62\xff\xd1\xe5\xad\x61\x78\xb8\x2a\xc9\xc6\xf5\x50\x1e\x0e\x2e\xa5\x45\xb6\x8e\xa3\x90\x0d\x44\x65\x86\x28\x6b\xbf\xb2\x04\xc9\x85\x29\x6d\x6c\x9b\xa1\x4d\xf7\x15\xd4\xe6\x53\x94\xc7\x88\x6c\x67\x99\xe9\xc3\x3d\x7c\x16\xb2\x41\xed\xdd\x6b\x7e\x8a\x58\x8f\x36\xe7\xf0\xcb\xcf\xbe\x78\xf1\xa7\x7f\xd9\x08\x47\xc3\x4c\xbf\x1a\xaa\x92\x45\x7c\x05\xb8\x17\x7f\xf8\xed\xf3\x4f\x3e\x7f\xf1\xfb\x8f\xda\x7b\xfe\x1e\xd0\xf6\x77\xb7\x2d\x64\x39\x2d\x17\xe6\x0a\xd0\x5f\x7d\xf4\xcf\x2f\x3f\xff\xcd\x06\xb4\xfd\xcd\xed\x92\xe1\x45\xd6\xa7\x78\x56\x56\xf9\xe5\xd2\x7e\x99\xe0\x29\xe2\x9b\x45\xd4\xb1\xcd\xb7\x69\xd4\xc5\x7c\x61\xc0\x9c\xcd\xd5\xd8\xa9\x95\xac\xec\x25\x75\x85\x67\xb1\xd7\x3f\x1e\x40\x5f\x68\x7b\xcd\x81\x79\x26\x23\x95\x96\x59\xac\xaa\xb1\xf3\xfc\x77\x9f\xfc\xf7\xd3\x3f\x63\x8c\xb7\x57\xd2\xdb\x1d\x64\x3f\x01\x8b\xb4\xe9\xbd\x61\xac\x9b\x55\x93\xae\x87\xdd\xa5\x57\x55\x87\xff\x0f\x00\x00\xff\xff\xbf\x96\x0c\x42\xfd\x17\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
