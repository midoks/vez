// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
// ../../../templates/sidebar/sidebar.tmpl
// ../../../templates/sidebar/sidebar_new.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\xaf\x9b\x3c\x10\x85\xf7\xfc\x8a\x91\x5f\xe9\x55\xbb\x70\x7c\x9b\x64\xd5\x0b\x54\x6a\x37\x5d\x54\xea\xba\x4b\x83\x27\x30\xa9\x3f\x90\x3d\x90\xa0\x28\xff\xbd\x22\x7c\x44\xb7\xed\xa6\x1b\x34\x02\xce\x33\xe7\x1c\x3b\xcb\xb2\x2c\x37\x34\x40\x6d\x75\x4a\x85\xa8\x83\x67\x4d\x1e\xa3\x28\x33\x80\xfc\x14\x02\x63\x5c\x3f\x1a\x79\xb2\x78\x85\xe9\x21\x2f\x51\x77\x70\xee\x13\xd3\x69\x94\x93\x0a\x3d\xcb\x0a\xf9\x82\xe8\x41\x5b\x6a\xbc\x24\x46\x97\x64\x8d\x7e\x42\x74\xa3\x3c\x80\x1b\xe5\x11\xaa\x10\x0d\x46\xc9\xa1\x7b\xec\x00\x78\xbb\xdf\x4a\x67\xe4\x11\x96\x5d\x7f\x92\x16\x11\x40\xae\xa1\x8d\x78\x2a\x84\x12\xab\xda\x55\xd3\x12\x94\x7b\x70\xd5\x84\x79\x01\xc6\x2b\x4b\xd7\x33\x9a\x79\x34\x58\x87\xa8\x99\x82\x97\x3e\x78\x04\xdb\xca\x0f\x1b\x11\x20\x4f\x43\xb3\xc2\x2a\x12\x70\x21\xc3\x6d\x21\x0e\x2f\x02\x5a\xa4\xa6\xe5\x42\xec\x8f\xa2\xcc\xfb\x84\x70\xb5\xe4\x7f\x7e\x9c\x2d\xfc\x57\x85\xc0\x89\xa3\xee\x84\x2a\x73\x95\x86\x66\x73\xa9\xf4\x36\xa6\x4e\xfb\x95\xfe\x34\x26\xca\xff\xeb\xd0\x8d\xaf\x70\xbb\xfd\x40\x1d\xef\xf7\x5c\x4d\x3f\x2e\xdd\x28\x43\x43\x99\xcd\x73\x6f\x57\xb5\xd7\x03\x6c\x55\xfd\x7e\x0a\xe8\x0d\x58\x4a\x2c\x7b\x9f\x78\xb4\x68\x96\x32\x9f\xcd\x59\xda\x1a\x4b\xf2\x20\xca\x9c\x5c\xb3\x66\xdd\x1f\xdf\x64\x85\x14\xeb\x42\xa8\x93\x1e\xa8\x0e\x7e\xd7\xf9\xe6\x91\xd0\xd2\xea\xaf\xb7\x8f\x9b\xa2\xe6\xab\x52\x66\xab\xe3\x3c\xd5\x91\x3a\x5e\xf4\x89\x35\x53\xad\xce\x49\x6d\x4d\xed\x1c\xf9\xdd\x39\x7d\x1a\x8a\xdb\xed\x73\x4f\xd6\x7c\x09\xce\x11\xdf\xef\x62\x6a\xf0\x21\x2e\xff\x4e\x69\xa9\x69\xed\xe4\xf0\x39\xfd\x13\x8c\xc7\x0e\xe7\x13\x50\x67\x3d\xe8\xf9\xad\x28\xb3\xd6\x9e\xd3\x8e\x3c\xf1\xd7\x15\x4b\xbe\xf9\xee\xbf\x05\x6d\xde\xbd\x7f\xcd\x9e\xa0\x2c\x57\x55\x30\xe3\x14\xb6\x65\x67\xcb\x5f\x01\x00\x00\xff\xff\x40\x4f\x5d\x5e\x46\x03\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4b\x8f\x1b\xc7\xf1\xbf\xf3\x53\x94\xe7\x7f\x91\x00\x75\xb3\x5f\xf3\xd2\x92\xfb\x87\xb4\x52\x42\x07\x92\x9c\xc0\x7a\xd8\x30\x8c\xa0\x39\xd3\x9c\x69\x69\x1e\xf4\x4c\x73\x76\xc9\xd5\x5e\x62\x18\xb9\x25\x39\x19\x41\xe0\x43\x12\x04\x41\x6e\x09\x10\x27\x30\xec\x43\xbe\x8c\xad\x44\xdf\x22\xe8\x19\x92\x3b\xa4\x28\x79\x9d\xc4\x58\x2c\xd9\x55\x53\xfd\xab\xaa\x5f\x57\xf5\x74\x73\xf4\xd6\x9d\x77\x4e\x1e\xbe\xff\xe3\xbb\x90\x9a\x3c\x3b\x1e\x8c\xd6\x5f\x6f\x21\x04\xdf\xfc\xe1\xf3\x97\x1f\xff\x09\x10\xb2\x6a\x25\xe3\xe3\xc1\x28\x57\x46\x42\x6a\xcc\x1c\xa9\x8f\x16\xba\x19\x3b\x27\x65\x61\x54\x61\xd0\xc3\xe5\x5c\x39\x10\x75\xd2\xd8\x31\xea\xcc\x0c\x2d\xd4\x11\x44\xa9\xac\x6a\x65\xc6\x8f\x1e\xfe\x00\x05\x0e\x0c\x0f\xa1\xbc\x87\x1e\xdd\x42\x27\x65\x3e\x97\x46\x4f\xb3\x3e\xd0\xdb\x77\xc7\x2a\x4e\x94\xf3\x26\xdf\xf7\x64\x91\x2c\x64\xd2\x9f\x16\x15\xdb\x19\x85\xcc\xd5\xd8\x69\xb4\x3a\x9d\x97\x95\xe9\xd9\x9c\xea\xd8\xa4\xe3\x58\x35\x3a\x52\xa8\x15\x6e\x80\x2e\xb4\xd1\x32\x43\x75\x24\x33\x35\xa6\x98\xdc\x80\x5c\x9e\xe9\x7c\x91\xf7\x55\x8b\x5a\x55\xad\x2c\xa7\x99\x1a\x17\x65\x97\x55\xa6\x8b\x67\x50\xa9\x6c\xec\xd4\x69\x59\x99\x68\x61\x40\x47\x65\xe1\x40\x5a\xa9\xd9\xd8\x19\xce\x64\x63\x65\x3c\x2f\x12\xe7\x78\xd0\x51\xfc\xe2\xd3\xbf\xc0\xed\xb2\x34\xb5\xa9\xe4\x1c\x5e\xfc\xf6\x8b\x6f\xfe\xf1\x31\x9c\xbc\xfb\x2e\xbc\xf8\xf4\xe7\x5f\x7f\xf5\xf7\x8e\xfb\x1e\xb0\x59\x66\xaa\x4e\x95\x32\x5b\xd4\xda\x48\xa3\xa3\x61\x54\xd7\xc3\xe9\x06\x08\xe7\xba\xc0\x51\x5d\xff\x7f\x33\x3e\x3f\xbf\xbd\xd0\x59\x7c\x52\xe6\xb9\x36\x17\x17\xce\x15\xe1\x52\x9d\xa4\x99\x4e\x52\x33\xec\x6c\x86\xb1\x9a\xc9\x45\x66\xfe\x7b\xe4\x5a\x65\xb3\xf6\xe3\xb5\x30\x6b\x6a\x46\x75\x54\xe9\xb9\x81\xba\x8a\x2e\x67\x3f\xad\x87\x4f\x3f\x5a\xa8\x6a\x89\x28\xa6\x14\x93\x36\x9e\xa7\x07\x71\x46\xc3\x0e\xe0\xb8\x25\x71\x30\xd8\xe0\xc5\xd2\x48\x24\x63\x14\x65\xba\x2b\x15\x89\xe6\x8b\x29\xf2\x7d\xee\x79\xa1\xeb\x7b\xcc\xa5\x21\xe1\xdc\x01\x59\x2f\x8b\xa8\x73\x6f\xab\xae\xbe\x39\x1c\xce\x65\xa2\x64\xcc\x70\x52\x96\x49\xa6\xea\x65\x11\xeb\x48\x1a\x5d\x16\x38\x2a\xf3\xf5\x53\x1b\xa3\x8c\xeb\xe9\xb2\x33\xc2\x4f\xeb\x5e\x2c\x3b\x35\xd9\x19\xa0\x5a\x1b\x85\x1a\x55\xe9\xd9\x1a\xac\x57\xa3\xf1\xed\xf0\x47\xe5\x83\xe8\xc1\x9d\x9f\xbc\xf3\xe4\xfd\x47\xd5\x93\xc5\x9d\xe0\x6e\x4c\xf9\xbd\xe8\x87\x77\x9e\xf1\x27\x6f\x37\x64\x4e\xdc\xe8\xfe\xa3\xf7\x2a\x1e\xf5\x5a\xab\x83\x9f\x4a\x1d\x2f\xde\x88\x1e\x95\xb1\x42\x4f\x4e\xbd\x67\x19\xfb\x68\x32\xef\xca\xf8\x92\xa9\xe3\x41\x23\x2b\xf8\x69\x9a\x1b\x18\x77\x5f\xcf\x9f\xc3\x07\x1f\x1e\x0d\xae\xcd\x16\x45\x64\xa1\xae\x5d\x87\xf3\x01\x80\x35\x4b\x73\x18\x43\x5c\x46\x8b\x5c\x15\x06\x47\x95\x92\x46\xdd\xcd\x94\x95\xae\x39\x1d\x9e\x73\xfd\x68\x00\x90\xe6\xb8\xae\x22\x18\xc3\x96\xd4\x34\xc7\x6d\xa8\x2d\x87\x69\x6e\x97\x33\xf2\x3c\x9f\x78\x8a\xcc\x22\x3a\xf5\x58\xc8\xa5\xc7\x66\x81\x9a\x4a\x37\x08\x78\x48\x54\xe4\x1c\xad\xdd\xd6\x7d\xaf\x89\x32\x6b\x97\xf5\xed\xe5\x43\x99\x3c\x90\xb9\xba\x74\xfe\x01\xf9\xf0\x08\x06\x00\x35\x9e\xcb\x4a\x15\xe6\x41\x19\x2b\xac\x8b\x5a\x55\xe6\xb6\x9a\x95\x95\xba\x96\xe6\x37\xa0\xbe\x7e\x34\xb8\xb8\x7e\xed\xfa\xd1\xe0\x72\xcd\x06\x83\xf3\x73\x3d\x03\x7c\xab\x32\x3a\xca\xd4\xc5\xc5\x60\x64\xb4\xc9\xd4\xf1\xf9\xf9\x46\x87\x1f\x5a\xc5\xf3\x89\x92\x71\x3b\xba\xb8\x00\x04\x2f\x7e\xf6\xc7\x7f\xfd\xf9\xab\xd1\xb0\x33\xde\x59\x9b\x67\x6a\x79\x5a\x56\x71\xdd\x5b\x8c\x7d\x30\x78\x0e\x3d\xb8\x1b\x1d\xd8\xde\xae\x16\xab\x2e\xc6\xdd\x65\xed\x21\x4d\x4c\x9e\xbd\x0e\xe8\xfc\x5c\x65\x75\x2f\x9b\xef\x16\xee\x77\x88\xa7\xef\xb1\x88\x2f\x2e\x6c\x89\xbd\xb2\x99\x9f\xa1\xb8\xa8\xd1\xbc\x52\x33\x65\xa2\x14\xd9\xc9\x55\x99\xf5\x50\xca\x62\x77\x8b\xe9\x9b\x6f\x37\x99\xa1\xce\x65\xa2\x70\x24\xa3\x54\x45\xa9\xb4\x25\x75\x95\x59\x39\x5f\x04\xfb\x93\x06\xdf\x3e\xed\x8d\xdb\xc1\x55\xfc\x9a\x79\xf4\x9f\x4f\xee\x26\xca\xb8\xc6\x09\x8e\xcb\xc5\x34\x53\x51\xa6\xa3\x67\xb8\x50\xe6\x2a\xd3\x4f\x4f\x4f\xd7\xbe\xaf\xea\x70\xb6\x28\x62\x5d\x24\x51\x5a\xea\x48\xd5\xb9\xaa\x6b\x99\xa8\x7a\x17\x64\x30\x18\x0d\xbb\xb3\xc2\x60\x34\x2d\xe3\xa5\xfd\xae\x9b\x04\xce\xf2\xac\xa8\xbb\x8d\xf4\x66\xe7\xfb\x94\xe3\xb2\x4a\x86\x8c\x10\x32\xac\x9b\xc4\x81\xf6\x9d\x31\x76\x62\x5d\xcf\x33\xb9\xbc\x09\x45\x59\xa8\x23\xe7\x78\x00\x30\xaa\x97\xf9\xb4\xcc\x40\xc7\x63\x67\xfb\x92\x73\xc0\xbe\xd3\x6f\x97\x67\x63\x87\x00\x01\x4a\x03\x08\x45\x6b\x0e\xb0\xae\xe8\xed\x9b\x75\x5b\xd4\xed\xc3\xb9\x34\x29\xcc\x74\x96\xa1\x6a\x61\x3d\xaa\x46\x15\x65\x1c\x3b\x10\x65\x7a\xbe\xaf\x8b\xc7\xce\x7d\x26\xb0\x4b\x42\x20\x11\xf2\xb0\xcf\x39\x10\x44\x29\xf6\xa9\x0b\x2e\x0e\x42\x6e\x05\x11\x32\xa0\x0c\xb3\x40\x60\x46\x05\x78\x98\x0a\x84\x89\x27\x80\x0a\x4c\x42\x86\x18\x26\x9e\x07\x8c\x60\xd7\xf7\x4f\x02\x1c\x0a\x0e\x3c\xc4\xdc\xb3\x10\xae\xf0\x41\x70\x2c\x02\x17\x08\x08\x81\x09\x15\x8d\x8b\x43\x9f\x45\xed\x33\xec\xb2\x10\xba\x29\x02\x7b\x22\x04\x4a\x70\xe8\x52\xa0\x14\x53\x97\x03\xc3\x84\x30\xf0\xda\xe9\x36\x00\xeb\x51\x70\x1f\x76\x3c\x52\x86\xfd\x50\x40\x10\x60\x4a\x3c\xa0\x3e\xf6\x7d\x0f\x42\x01\x36\x31\x0a\xa1\x98\x84\x1c\xbb\xd1\x3a\x39\x68\x93\x13\xa8\x4d\x0e\xda\xe4\x28\xea\x92\x43\x36\x3b\x64\xb3\xb3\xc9\xa1\x2e\xb9\xce\x15\xea\x5c\xb5\xf1\x84\xc8\xc3\x2e\x11\xe0\x62\x1e\x7a\x88\x12\xec\x31\xd1\x86\x2d\x5a\xb2\xa8\xcb\x1b\xd4\x65\x88\xda\x14\x91\xcd\x11\x05\x38\xe4\x02\xb5\x39\xa2\x1d\x63\xd4\xe6\x88\x6c\x8e\x02\xd9\x38\x50\x97\x23\xea\x3b\x3e\xa1\xc4\x6d\xb9\xb7\x61\x5b\x6f\x04\xb3\x36\x1b\x9b\x1a\x90\x49\xbb\x86\xc1\xea\x7e\x40\xc0\xf5\x71\xe0\xf1\x93\x80\x80\xe7\x61\xcf\xe3\xe0\x73\x2c\xb8\x07\x3e\x03\x8f\x61\x57\x70\xf0\xd9\x44\x08\xc9\x80\x01\x01\x42\x11\x43\xec\x31\xbb\x94\x19\x62\x29\x0d\x6c\x04\x51\x88\x49\xd0\x52\xe6\x62\x22\x04\x08\x6c\xeb\xa0\x1b\x53\x86\x85\x2f\x80\x58\x16\x08\x43\x76\x5d\x2d\x07\x44\x84\x28\xc4\x94\xb6\xeb\x18\x04\x0d\x66\xbe\x7f\xe2\xbb\x98\x53\x1f\x84\x87\xb9\x5d\x26\x02\x2e\xc5\x8c\xc2\x36\xd6\xd5\x7d\x8f\x60\x97\x51\x60\x01\xe6\x62\x22\x42\x1c\x8a\xa0\xa1\xc2\x32\x96\x06\x38\x24\x76\xf1\x82\xc0\x7a\xb3\x6c\x07\x88\x61\xdf\x67\xeb\xb1\x8f\x7d\xe6\x03\x69\x99\xe5\x88\x63\xe6\x09\xe4\x63\x46\x7c\x14\x62\x9b\x4c\x3b\x5e\xdd\xef\x40\x41\x84\x98\x35\xd4\xc3\xc2\x0d\x26\x1e\xc1\x21\x8d\x7c\x4c\x3d\xbf\x43\x0e\x3d\xbb\x00\x81\xef\x6d\x84\x00\xb3\x80\x02\x41\x2e\x16\xc4\x43\x1c\x87\x84\xa3\x00\x53\x3f\x68\x9b\x82\xb9\x9d\xb0\x0e\x78\x65\x0f\x42\xb6\xf9\xda\x9e\x1e\x76\x4d\xbd\xdf\xdf\x69\x99\xab\xfd\xd6\xf6\x80\x7a\x4e\xbf\x79\x6d\x53\x06\x98\xbb\x02\x28\xa6\xc2\x93\xd8\xb5\x6b\x6c\xff\x10\xf6\x49\x00\x24\x43\x1e\x78\xb7\x2e\xd5\x40\xb1\x0b\x3e\x76\x1b\xbf\x67\x0b\x76\x98\x0a\xec\xee\xea\x10\x76\x1b\x24\x52\xd6\x88\x7d\xdb\x09\x15\x07\x4c\xfd\x1d\xf7\x54\x78\xc8\x46\x76\x8f\x72\x70\xb1\x1f\xf2\xc7\x6c\xc7\x01\x6a\x67\xa5\x88\xee\xea\xb0\xdb\x50\xcc\x42\x7e\xaf\x97\xd6\xea\x3e\xc3\x2e\x50\xf1\xd8\xc7\x3e\xf1\x33\x17\xbb\xb6\x5d\x60\xfd\xff\x98\x8a\x09\x25\x0d\x12\x07\xc0\xf9\x2b\xe0\x62\xc2\xb0\xbb\x72\x86\x6f\xa2\xde\xc8\xf6\xee\x75\x05\xee\x09\xb0\x4d\x37\x00\x85\xb6\x1f\x76\x14\xc0\x9a\xbe\x02\x31\x60\x93\x1d\xd9\x36\xd4\x2a\xa7\x2e\xb0\x14\x89\x86\xa7\xe2\xb1\x58\xe5\x04\xc4\x46\x0a\x7a\x12\x97\x14\xe8\x66\x19\x11\x6d\x10\x5b\xe5\xc8\x05\xde\x20\x3e\xf1\xac\x75\x2b\x12\x2b\xd2\x86\xf5\x8d\x81\xa6\x7c\x95\x23\x81\x84\x85\x9c\xd0\x86\xaf\x72\xd2\x0a\xa2\x13\x5c\xc4\x3b\xe7\x13\x6f\x95\x0b\x10\x1d\xde\xe3\xe0\x5b\x88\x9a\xab\x72\x9e\x29\x14\xe9\x2a\xba\x22\x61\x94\x82\x27\x39\xf0\x2e\x2a\xe4\x01\x81\x4e\xb2\xb2\x07\x64\xed\xf0\x4d\x2f\xa7\x8e\xf7\x40\x06\x10\x74\x28\xd6\x15\xb9\xd5\x89\xa4\x4d\x3a\x58\xe5\x01\xf2\xa5\x0f\xfe\x7a\xe9\x5d\x2c\xbc\xc0\x6e\xe1\xdc\x3f\xe1\x98\x09\x66\xc7\x8c\x79\x20\x70\x40\x5c\xa0\x04\x02\xa0\xa4\x16\xd8\x77\x7d\xb0\x4f\x6c\x65\xd9\x29\x0c\x73\xff\xd6\x16\xc7\x5a\x7d\x0b\x25\x49\xa5\xe3\xab\x31\x01\x0c\xbb\xb7\x6c\x3b\xd2\x75\x85\xb6\x1a\xbb\x54\x7b\x5a\xfb\x2e\x71\x9b\x7d\xad\xad\x6b\x3f\x45\xfb\xea\xf6\x41\x83\x78\xd7\x33\xec\x95\xfa\xe7\xaf\xf4\x3d\x3f\xd0\xca\xfc\x50\x2f\xad\x72\xcf\x6a\xf7\x1d\x92\x83\x41\xdb\x92\x3e\x10\x35\xe5\x87\xc3\x0e\x37\x61\xe7\xb4\x75\xf7\x3f\x8d\xfb\x7e\x17\xe5\x01\xb2\xc3\x03\x64\x5b\xd3\x83\x6c\x53\xf7\x10\xdd\x36\xa3\xef\x2b\xf0\xd7\x13\x1e\xda\xdd\x60\x57\xdd\x49\xcd\x9e\x1e\xad\xa5\x43\x94\x7f\x9f\xa1\xef\x77\xc9\xc8\x9e\x6d\xed\x21\xd8\x1e\x8a\x55\x05\x51\x26\xeb\x7a\xec\xcc\x11\x87\x69\x82\x62\x59\x3d\x03\xa3\xce\x0c\x3a\x4d\xb5\x51\x90\x4f\x11\xdf\x74\x4c\xac\x9b\x8d\xb5\xbd\x03\x49\x5d\xa8\x6a\xfd\x6c\xf7\x69\x8c\x66\x99\x3a\x03\xfb\x81\x4e\x2b\x39\x07\x99\xe9\xa4\x40\xda\xa8\xbc\x46\x91\x2a\x8c\xaa\xe0\xe9\xa2\x36\x7a\xb6\x44\xeb\xdb\xd4\xeb\xd4\x59\x82\x6a\x23\x2b\xb3\xf5\x03\x30\x92\x9b\xf3\xbf\xb3\xe7\xf0\x80\x9b\x7c\x8a\x98\xfd\xc8\x12\x44\xfa\x79\xb5\xc3\x58\x45\x65\xd5\xde\x70\x90\x3d\xda\xf7\x7c\xd8\xad\xa4\x49\x36\xf0\x53\x0d\xb9\x42\xcc\x81\xee\x07\x3a\x47\x10\x07\x52\xa5\x93\xd4\x8c\x1d\xce\x1c\xa8\x4a\xbb\x2f\xea\x3c\x71\x40\x56\x5a\xa2\x4c\x4e\xed\x9d\x65\x7b\xd8\x77\x8e\x47\x8b\x5a\xc1\x99\xbd\xce\xdc\xec\x62\xff\xbf\xcb\x5b\xc3\xf0\x78\xbd\x24\x5b\xd7\x43\x79\x3c\xb8\x94\x16\xd9\x26\x8e\x42\x36\x10\x95\x19\xa2\xac\xfd\xca\x12\x24\x17\xa6\xb4\xb1\x6d\x87\x36\xdd\xd7\x50\x9b\x4f\x51\x1e\x23\xb2\x9b\x65\xa6\x8f\x0f\xf0\x59\xc8\x06\xb5\x77\xaf\xf9\x19\x62\x3d\xda\x9c\xe3\xaf\xbf\xf8\xea\xe5\xef\xfe\x66\x23\x1c\x0d\x33\xfd\x7a\xa8\x4a\x16\xf1\x15\xe0\x5e\xfe\xe6\x97\x2f\x3e\xfb\xf2\xe5\xaf\x3f\x69\xef\xf9\x07\x40\xdb\xdf\xdd\x76\x90\xe5\xb4\x5c\x98\x2b\x40\x7f\xf3\xc9\x5f\xbf\xfe\xf2\x17\x5b\xd0\xf6\x37\xb7\x4b\x86\x17\x59\x9f\xe2\x59\x59\xe5\x97\xa5\xfd\x2a\xc1\x53\xc4\xb7\x45\xd4\xb1\xcd\x77\x69\xd4\xc5\x7c\x61\xc0\x2c\xe7\x6a\xec\xd4\x4a\x56\xf6\x92\xba\xc6\xb3\xd8\x9b\x1f\x0f\xa0\x2f\xb4\xbd\xe6\xc0\x3c\x93\x91\x4a\xcb\x2c\x56\xd5\xd8\x79\xf1\xab\xcf\xfe\xf9\xf9\xef\x31\xc6\xbb\x95\xf4\x6e\x07\xd9\x4f\xc0\x22\x6d\x7b\x6f\x18\xeb\x66\xdd\xa4\x9b\x61\x77\xe9\x55\xd5\xf1\xbf\x03\x00\x00\xff\xff\x27\xe0\x74\x83\x50\x17\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x41\x6e\xdb\x3c\x10\x85\xd7\xd2\x29\x06\x5c\x06\xa0\xe5\x20\xff\x0f\x14\xad\x2c\xa0\xbb\x74\x53\x04\x48\x7b\x80\x91\x34\x96\xd8\x50\xa4\x41\x8e\x6c\x07\x8a\x80\xae\xdb\x53\xf4\x10\x05\x72\xa0\x6c\x7a\x8b\x82\x92\x65\xcb\x6e\x8b\x2e\xea\x85\x45\x91\x83\x8f\x4f\x6f\x06\xaf\xeb\x98\x9a\x8d\x46\x26\x10\x39\x7a\x4a\x6a\xc2\x92\x9c\x80\x45\xdf\xc7\x71\x9c\x96\x6a\x0b\x85\x46\xef\x57\xa2\xb0\x86\x51\x19\x72\x22\x8b\xbb\x2e\xb9\x02\xcf\xe8\x18\xae\x92\x50\x39\x2f\x74\x76\x07\x95\xfc\x5f\x64\x31\xc0\x39\x40\xcb\xa6\x94\xaf\x44\x06\x00\x31\x84\x5f\x34\x3f\x2f\xe5\x5a\xd3\x1e\xc2\x9f\x2c\xac\x6e\x1b\x03\xa8\x55\x65\xa4\x62\x6a\xbc\xf4\xec\x88\x8b\x7a\x3c\xf7\xb5\x53\xe6\x41\x2e\x21\xaf\xe4\xae\x56\x4c\x02\x3c\x3f\x6a\x5a\x89\x9d\x2a\xb9\x7e\x0d\xd8\xb2\x7d\x23\xb2\x38\x8e\xc2\x3d\xf3\x6b\xb4\xf2\x2c\x2b\x67\xdb\x0d\x9c\x96\x72\xad\x5b\x5f\x43\x6e\x5d\x49\x4e\xe6\x96\xd9\x36\xe0\x0b\x67\xb5\x46\x47\x28\xb2\x91\x13\x75\x9d\x43\x53\x11\x2c\xde\x3a\x56\x85\x26\xdf\xf7\xe3\x09\x40\x8a\x50\x3b\x5a\xaf\x44\xd2\x75\x8b\x7b\xdb\xba\x82\xfa\x3e\xac\x3f\x7a\x72\xe3\xea\x5d\xd9\xf7\x8b\x9a\x1b\x2d\x7e\x15\x33\x7c\x25\x5c\xbc\x4b\x2c\x58\x59\x03\x9b\x47\x79\x03\xba\x96\xac\xaa\x9a\x05\xa0\x53\x28\x8b\xd6\x39\x32\xbc\x12\xec\x5a\x9a\x04\x5e\x7e\xec\xc1\xd3\x9d\xbc\x5e\x2e\xcf\xdc\x2c\xc8\x30\x39\xf8\xd4\x7a\x56\xeb\x47\x19\x9a\x4b\x86\x65\x4e\xbc\x23\x32\x73\x1c\x40\xea\xd9\x59\x53\x4d\xcc\x26\x97\xd7\x22\xeb\xba\xc5\x07\xc5\x9a\xe0\x09\xee\x71\x4d\x7d\x9f\x26\x63\xd9\x5c\x49\x52\xaa\xed\x1f\x94\x85\x69\xb8\x5e\x42\x80\x81\x6f\x50\xeb\x01\x79\xcb\x8d\x86\x27\xb8\x25\x2c\x07\x7a\xc0\xce\x19\x69\x82\xc7\x75\xd7\x91\x29\x27\xff\x4f\x65\x71\x14\x45\xd3\x5b\x74\x36\x60\x4d\x2e\x6f\x44\x76\x38\x1b\x0e\x0d\x6e\x47\x33\x35\xe6\xa4\x57\xe2\x0e\x2b\x02\x83\x5b\x55\xe1\xe0\x3b\xed\xb1\xd9\xe8\xc1\xdd\x28\x0a\xe3\xda\xea\x09\xb6\xc1\x4a\x99\xb1\xea\xd2\xc4\xd1\x5b\x31\xde\x01\x10\x45\x5d\xa7\xd6\xb0\xb8\x73\x74\x67\x87\x81\x89\xc6\x61\x4a\xb5\x9a\xd1\x68\xe8\x8c\xc8\x52\x3c\xdb\xd4\xca\x3c\x88\x69\xb2\x36\x8e\xc2\x1c\x4d\x24\x91\xbd\x3c\x7f\x79\x79\xfe\xfc\xe3\xdb\xf7\x60\x4c\x9a\x68\x95\x1d\xe9\x93\x3d\xb3\x8d\xa0\xe2\x3d\xed\xf9\x5f\x65\x18\xda\x73\xd0\x71\x64\x05\x21\x5f\xff\x26\xe4\x60\x61\xd2\xea\xb1\x33\x89\xc1\xed\x90\x11\x87\x86\xfc\x36\x2d\xfe\x1b\x62\x24\x34\xfb\x14\x54\x5e\x95\x94\xa3\x4b\x0e\xcf\x31\xac\x8e\x9c\x09\x37\x64\x14\x99\x72\x4c\xa8\xd3\xee\x45\xe0\xad\xad\xe5\x43\xe0\xfd\x0c\x00\x00\xff\xff\x17\xe8\x15\x85\x0d\x05\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6e\xc3\x20\x10\x84\xef\x3c\xc5\xca\xc7\x48\x84\x43\x52\xa9\x07\xd7\x52\x6f\x3d\x56\x6a\x5f\x60\x31\x9b\x18\x09\x7b\x2d\x58\xa5\x07\xe2\x77\xaf\x62\xe3\xc4\xfd\xb9\xc0\xc2\x8c\x3e\xc4\x4c\xce\x42\xfd\x18\x50\x08\x2a\x8b\x89\x4c\x47\xe8\x28\x56\xb0\x9f\x26\xa5\x94\xaa\x9d\xbf\x40\x1b\x30\xa5\x97\xaa\xe5\x41\xd0\x0f\x14\xab\x46\xe5\x6c\x76\x90\x04\xa3\xc0\xce\x4c\x93\x02\xd8\x3a\x23\x7f\xc1\x59\x3f\x55\x8d\x02\xf8\xa9\xb4\x1c\x74\xef\xf4\x73\x91\x00\xea\xee\xb0\x6a\xa3\xd5\x47\xe8\x6f\x8b\xe5\xe8\x28\x6a\xcb\x22\xdc\xdf\xad\x00\x39\xef\x5f\xa3\xf8\x36\xd0\xfe\xd3\x4b\x20\xb8\xc2\x07\x9e\x68\x7e\x7f\x86\x99\xee\xd0\xa8\xf5\x80\x8b\x75\xc5\xdb\xc0\x67\x3d\x72\x92\xff\x81\x6f\xd2\x07\xb8\xc2\x3b\xc6\x44\xb7\x79\x03\x2d\xa0\x42\xae\x8d\xf3\x97\x75\xfe\xfb\xb5\xe3\x1d\xbf\xcd\x36\x79\x47\x16\xa3\x29\xfb\x92\xef\x83\x35\xc7\x49\x83\x5b\xc2\x7c\xdc\xfe\x2a\xe7\xc4\x2c\xa5\x9c\xef\x00\x00\x00\xff\xff\x21\x1f\x67\x65\xb9\x01\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebarTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xd1\x4e\x1a\x4d\x18\xbd\xe7\x29\xe6\x9f\x2b\x35\x19\xd6\x5f\x50\x44\x59\xfa\x20\x4d\x63\x86\x9d\x01\x46\x97\x99\xcd\xce\x20\x21\x48\x82\x44\x63\x0d\xa8\x24\xa6\x21\xa6\xb6\xf1\xc2\x6a\x4d\xda\x60\x7a\xd1\x2c\x95\xf4\x65\x64\x10\xae\x7c\x85\x66\xd9\x5d\xa5\xb6\x29\x37\xc3\x7e\xe7\x7c\x67\xce\x7c\xe7\x8b\xd5\x6a\xc6\x02\xb0\x6c\x2c\xa5\x09\x1d\x21\x99\x62\x82\x23\xa9\x98\xb5\x55\x85\x60\xc1\xa8\xd7\x63\x19\xc2\xb6\x81\x54\x55\x9b\x9a\x50\x09\x67\x0d\x2c\xb9\xb4\xb4\x0e\xb3\xb1\x18\x00\x00\x4c\xd1\xa8\x1f\x25\x41\x29\x87\x12\x20\x57\x40\x36\x2b\x14\x15\x70\x45\x99\x13\x4a\x60\x76\xca\x05\x20\x53\x4c\x46\xe4\xbc\x54\x88\x29\x6c\x33\x0b\x66\x47\xcd\xab\x71\xef\x2e\x63\x14\x93\x4f\x44\x27\xe2\x95\x72\x68\x11\x66\x27\xbb\xa7\xfa\xa4\x37\xd9\x3d\x7d\x1c\xb4\x27\x1f\x3e\x6a\xcf\x9b\xfe\x7f\xaf\x3b\x47\xfa\xa4\xa7\x3b\x47\x4f\x75\xdd\x39\xba\x6f\x34\x63\xa3\xee\x45\x50\xd5\x97\x37\xfa\xfc\x76\xd8\x6f\xe9\xeb\xd6\xe3\xa0\x3d\x3a\x3f\x0c\xea\x43\xef\xe0\xe1\xf0\x66\xd8\x6f\x8d\x7a\x41\xc3\xbb\x7d\xed\x79\xa3\xee\xc5\xe8\xcb\x37\x1f\xbe\xfb\x34\xbe\x6e\xea\xfd\xef\xfa\xea\xcc\x57\xf1\xbc\xd1\xf9\xe1\x4b\xe8\xe7\x60\xda\xf9\xf5\x72\xe8\x5d\x8e\x1b\xfb\x3e\xaf\xd3\xd6\x07\x3f\xc6\x8d\xb6\x1e\x34\xc3\xfb\x3b\xed\xf1\xed\xe9\xb0\xdf\x7a\x38\xde\x7b\x1c\xb4\x1f\x8e\xf7\x7c\x2f\x27\x6f\x83\xcf\xe1\xa0\xab\xaf\xce\x86\xfd\xd6\xa4\xfb\xf9\xbe\xd1\xcc\x18\x4e\x30\x81\x8c\x41\xd8\x76\x34\x62\x69\xb9\xcc\x51\x00\xcb\x2a\xb7\x80\x74\x2d\x13\x16\x95\x72\xe4\x9a\x61\x38\xb8\x40\x31\x59\x8a\x17\x84\x28\xd8\x54\x56\x39\x61\x16\xf6\x23\x8c\x5b\xa2\x14\xa2\xc6\xa6\x34\x30\x91\xb9\x6a\x40\x8a\x6f\xca\x57\x96\xcd\x28\x57\xa6\x85\x91\x53\xce\xa1\x54\x2a\xb1\xb2\x92\x5e\x4e\xad\x2c\x2d\xff\x9f\x5e\x4c\x24\x60\x90\x81\xe5\x0a\x29\x85\xcb\x0a\x8c\x9b\x10\x73\xc1\xab\x25\x51\x96\x30\x9b\x31\x02\x3f\xa1\xd1\xff\x10\x02\x92\x11\xba\x61\xd3\xbc\x02\x08\x85\x65\xc6\x65\x94\xe0\xcc\xe5\xa1\xb4\xff\x0b\x37\x8a\x30\xe9\xd8\xb8\xba\x96\xb3\x85\xb5\x35\x03\x13\xac\x30\xc2\x04\x85\x56\xe1\xbf\xbd\xce\x76\x48\x5b\x28\x13\xae\x26\xd3\xab\xa9\xe4\x6a\x3a\x9d\xfc\x0b\x25\x2f\xdc\x12\x56\x26\xc4\x65\x25\x5e\xc2\xf9\xb2\x6d\xa3\x0a\x23\xaa\x88\x5c\x2a\x1d\xc1\x25\xdb\xf6\x37\xdf\x2d\x53\xff\xed\x8c\xcb\xec\x6c\x2a\xd9\xe7\xf6\xb9\x99\x87\x02\x13\x54\x18\x27\xa2\x12\x9f\x2d\xee\xec\x80\xd7\x6f\xe6\xe3\x4e\x59\x16\xe7\x6a\xf5\xf9\xf5\x30\xea\x48\xe9\xf7\x81\xe6\xb0\x0b\xa4\xc2\xee\xf3\x50\x6b\x35\x45\x4b\x8e\x8d\x15\x05\x30\x64\x18\xe1\xb9\xc1\x69\x05\x82\x78\xbd\xfe\xa7\x06\xe5\x24\x52\x88\x3d\x2d\x56\x70\xfc\x0a\x00\x00\xff\xff\xcc\x85\x74\x31\xfe\x03\x00\x00"

func sidebarSidebarTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebarTmpl,
		"sidebar/sidebar.tmpl",
	)
}

func sidebarSidebarTmpl() (*asset, error) {
	bytes, err := sidebarSidebarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sidebarSidebar_newTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\xae\xdb\x30\x0c\xc6\x77\x9f\x82\x70\x67\xda\x09\x8a\x6e\x4e\xf6\x2e\x5d\xd2\x1e\x40\x96\x68\x4b\x88\x2c\x19\x12\x9d\xa4\x70\x05\xf4\x10\x6d\xa7\x1e\xa2\x53\xb7\x1e\xa7\x39\xc7\x83\xff\x04\x2f\xc9\x5b\xc8\x4f\xa0\x40\x7e\xdf\x2f\xcb\xb2\x4a\x99\x13\x48\x2b\x62\xdc\xe5\x0a\x1b\x4b\x17\x98\x0a\x4a\x6f\x87\xce\x81\xb0\xa6\x75\x68\x98\xba\x88\x91\x03\xb1\xd4\xcb\x3c\xea\x60\xdc\x11\x37\x50\xb7\x78\xd6\x86\x29\xdf\x67\x00\x95\x00\x1d\xa8\xd9\xe5\xef\xf2\xa7\xa5\xf7\x8b\x24\x39\xa6\xf0\xb4\xa7\xc7\xf7\x60\x27\xa9\x44\x38\x02\xd3\x85\x51\x91\xf4\x41\xb0\xf1\x0e\x9d\x77\x04\xb5\x0f\x8a\x02\xd6\x9e\xd9\x77\xf3\x3d\x80\x2a\xf6\xc2\xdd\x6e\x35\x11\x3f\x40\x73\xc6\x48\x9d\xa9\xbd\x55\xf9\xfe\xfa\xfb\xfb\xf5\xd7\x9f\xeb\x8f\xbf\xff\xff\xfd\xac\xca\xe9\xef\x6c\xb3\x14\x73\xbb\xcb\x6e\x4d\x64\x6c\x83\x1f\x7a\x78\x95\xd8\xd8\x21\xea\xc7\xbb\x10\x65\xf0\xd6\x8a\x40\x62\xb5\x30\x97\x71\x0c\xc2\xb5\x04\xc5\x27\x3a\x47\x8a\x9c\xd2\x62\xef\x06\xa4\x1c\xc7\xe2\xe0\x87\x20\x29\xa5\x49\x7f\x89\x14\x16\xf5\x51\xa5\x54\x68\xee\x6c\xfe\xd6\xcb\x0c\x0c\x9e\xde\x28\xe4\xc4\x04\xfa\xaf\x13\x32\x8d\x6c\x5a\xcd\xab\x97\xc7\x50\xd2\x5b\xdc\x6e\xa0\xab\x71\x0b\xb1\x13\xd6\xe6\xfb\x71\x2c\x3e\x1b\xb6\x04\xdf\xe0\x20\x1a\x4a\xa9\x2a\x95\x39\xad\x2c\x17\x2c\x53\x18\x72\x2a\xa5\x6c\x46\x35\x8f\xd7\xf6\x12\x00\x00\xff\xff\xa2\x82\x8f\x6b\x31\x02\x00\x00"

func sidebarSidebar_newTmplBytes() ([]byte, error) {
	return bindataRead(
		_sidebarSidebar_newTmpl,
		"sidebar/sidebar_new.tmpl",
	)
}

func sidebarSidebar_newTmpl() (*asset, error) {
	bytes, err := sidebarSidebar_newTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sidebar/sidebar_new.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":               aboutTmpl,
	"base/footer.tmpl":         baseFooterTmpl,
	"base/header.tmpl":         baseHeaderTmpl,
	"home.tmpl":                homeTmpl,
	"page/content.tmpl":        pageContentTmpl,
	"sidebar/sidebar.tmpl":     sidebarSidebarTmpl,
	"sidebar/sidebar_new.tmpl": sidebarSidebar_newTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
	"sidebar": &bintree{nil, map[string]*bintree{
		"sidebar.tmpl":     &bintree{sidebarSidebarTmpl, map[string]*bintree{}},
		"sidebar_new.tmpl": &bintree{sidebarSidebar_newTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
