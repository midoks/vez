// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/about.tmpl
// ../../../templates/base/footer.tmpl
// ../../../templates/base/header.tmpl
// ../../../templates/home.tmpl
// ../../../templates/page/content.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _aboutTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\xd5\xcf\x48\x4d\x4c\x49\x2d\x52\x52\xd0\xab\xad\xe5\xe2\xe2\xc2\x90\x4e\xcb\xcf\x2f\x81\x4a\x03\x02\x00\x00\xff\xff\xc7\xd7\xde\x9b\x3b\x00\x00\x00"

func aboutTmplBytes() ([]byte, error) {
	return bindataRead(
		_aboutTmpl,
		"about.tmpl",
	)
}

func aboutTmpl() (*asset, error) {
	bytes, err := aboutTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "about.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseFooterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\x23\x57\xea\x6d\xea\x6d\x92\x53\x6b\x78\x8f\x1e\x0d\x1e\xc0\xad\x19\x23\x7b\x20\x41\xab\x7d\xf7\x8a\x24\x66\x95\xf6\x82\x06\xd9\xdf\xaf\xa7\xaa\xaa\xca\x38\xbf\x42\x17\x6c\xce\xb5\xea\x22\x8b\xf5\x4c\x49\x35\x15\x80\xe9\x63\x14\x4a\xe5\xd0\x61\x1f\xe8\x06\xfb\x07\xaf\xc9\xce\xf0\x7b\xc9\xe2\xfb\x0d\x77\x14\xb1\x60\x4b\x72\x25\x62\xb0\xc1\x0f\x8c\x5e\x68\xca\xd8\x11\xef\x14\xf3\x86\x67\x98\x36\xbc\x40\x1b\x93\xa3\x84\x12\xe7\xbb\x06\xc0\xab\x7e\xc0\xc9\xe1\x05\x9e\x5a\xff\x33\x3d\x41\x00\xc6\xc2\x98\xa8\xaf\x95\x56\x05\x3d\xb5\xbb\x08\xe1\x09\xa6\x76\xa7\x79\x03\xa1\x9b\xe0\xb4\x08\xb9\xc7\xe8\xa8\x8b\xc9\x8a\x8f\x8c\x1c\x99\x20\x8c\xf8\xfd\x60\x04\x30\x79\x1d\x0a\x59\xeb\x15\x5c\xbd\x93\xb1\x56\xe7\x37\x05\x23\xf9\x61\x94\x5a\x9d\x2e\xaa\x31\x4b\x26\xb8\x05\xcf\x7f\x7e\x3c\x2c\x7c\x69\x63\x94\x2c\xc9\xce\x4a\x37\x46\xe7\x75\x38\x5c\x6a\x7b\x8c\x79\xb6\x5c\xd8\x3f\x8d\xa9\xe6\x6b\x17\xe7\xed\x27\xbc\xbf\xff\x22\x9b\x3e\x3e\x8c\xde\x2f\x3e\xbb\xd1\xce\xaf\x4d\xf5\x98\x97\x50\xd0\x6c\x57\x38\xaa\xfa\xf7\x15\x88\x1d\x04\x9f\x05\x17\xce\xb2\x05\x72\xcf\x32\x3f\x9b\x0b\xfe\x68\x2c\xe3\x59\x35\xc6\x4f\x43\xc9\x7a\xba\xbc\x64\x85\x9c\xba\x5a\xe9\xde\xae\xbe\x8b\xfc\x6d\xe6\xe1\x9e\x30\xf8\xe2\x6f\x09\xf7\x4d\xd1\x8f\x55\x69\xaa\xe2\xd8\xe8\x36\xba\x6d\xff\x1f\x65\x0a\xcd\xdf\x00\x00\x00\xff\xff\x8b\xb7\xad\x4b\x69\x02\x00\x00"

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeaderTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xcd\x6e\xe3\xc8\x11\xbe\xfb\x29\x6a\x99\xeb\x56\xa9\xff\xc8\x26\x67\x25\x05\x1e\x67\x03\x05\x18\x23\x01\x66\xd6\x48\x8e\x14\xd9\x16\x39\xc3\x1f\x2d\x49\xd1\xb6\x0c\x5f\xb2\x58\xe4\x96\xe4\xb4\x08\x82\x3d\x24\x41\x10\xe4\x96\x00\xd9\x04\x8b\x9d\x43\x5e\x66\xc6\xc9\xbc\x45\xd0\xa4\x24\x4b\xb2\x3c\xe3\x43\x16\x86\xa5\xae\x62\xf7\x57\xf5\x7d\x5d\x45\x75\x0f\x3f\xfa\xd1\x4f\x4f\x5e\xfc\xe2\x67\x9f\x42\xd2\xe4\xd9\xf8\x68\xb8\xfa\xfa\x08\x11\xde\xfe\xf9\x9b\x77\x5f\xfc\x15\x10\xad\xdb\x84\xf1\xf8\x68\x98\x9b\x26\x84\xa4\x69\xe6\x68\x3e\x5f\xa4\xed\xc8\x39\x29\x8b\xc6\x14\x0d\xbe\xb8\x9a\x1b\x07\xa2\xde\x1a\x39\x8d\xb9\x6c\x06\x16\xea\x13\x88\x92\xb0\xaa\x4d\x33\xfa\xec\xc5\x8f\xd1\x77\x60\x70\x08\xe5\xe7\xf8\xd9\x31\x9e\x94\xf9\x3c\x6c\xd2\x69\xb6\x0d\xf4\x93\x4f\x47\x26\x9e\x19\xe7\x7d\xb1\x9f\x85\xc5\x6c\x11\xce\xb6\x97\x45\xc5\x66\x45\x11\xe6\x66\xe4\xb4\xa9\xb9\x98\x97\x55\xb3\x35\xe7\x22\x8d\x9b\x64\x14\x9b\x36\x8d\x0c\x76\xc6\xc7\x90\x16\x69\x93\x86\x19\xd6\x51\x98\x99\x11\x27\xf6\x31\xe4\xe1\x65\x9a\x2f\xf2\x6d\xd7\xa2\x36\x55\x67\x87\xd3\xcc\x8c\x8a\xb2\x67\x95\xa5\xc5\x2b\xa8\x4c\x36\x72\xea\xa4\xac\x9a\x68\xd1\x40\x1a\x95\x85\x03\x49\x65\xce\x47\xce\xe0\x3c\x6c\xad\x4d\xf3\x62\xe6\x8c\x8f\x7a\x89\x6f\xbf\xfa\x3b\x3c\x2d\xcb\xa6\x6e\xaa\x70\x0e\xb7\x7f\xf8\xf6\xed\xbf\xbf\x80\x93\xe7\xcf\xe1\xf6\xab\x5f\xbd\x79\xfd\xaf\x5e\xfb\x2d\xe0\xe6\x2a\x33\x75\x62\x4c\xb3\x41\xad\x9b\xb0\x49\xa3\x41\x54\xd7\x83\xe9\x1a\x88\xf2\xb4\xa0\xa8\xae\x7f\xd8\x8e\xae\xaf\x9f\x2e\xd2\x2c\x3e\x29\xf3\x3c\x6d\x6e\x6e\x9c\x47\xc2\xd5\x26\x3b\xef\x3e\x1e\x84\x59\x11\x18\xd6\x51\x95\xce\x1b\xa8\xab\xe8\x6e\xf5\xcb\x7a\xf0\xf2\xf3\x85\xa9\xae\x90\x13\xe7\xc4\xba\x7c\x5e\x1e\xc4\x19\x0e\x7a\x80\x71\x4f\xf5\x01\xb4\x5d\x66\x1f\x40\x3a\x3a\xba\xbe\x4e\xcf\x81\x8e\xab\x26\x8d\x32\x73\x73\x73\x34\x6c\xd2\x26\x33\xe3\xeb\xeb\xb5\x8f\x5e\x58\xc7\xcd\x0d\x20\xdc\xfe\xf2\x2f\xff\xfd\xdb\xeb\xe1\xa0\x9f\x72\x74\x7d\x6d\xb2\x7a\x6b\xcd\xfd\xc7\x45\x7c\x73\x63\xd9\x6f\x15\xd7\x2b\x73\x75\x51\x56\x71\xbd\x55\x5c\xfd\xba\xbd\x22\x8c\x4d\x9f\x62\x6a\xab\xe2\xfe\xd4\xa3\xe1\xa0\x6f\xb3\xa3\xe1\xb4\x8c\xaf\xec\x77\xdd\xce\xe0\x32\xcf\x8a\x7a\xe4\xd8\xca\x7f\x32\x18\x5c\x5c\x5c\xd0\x85\xa4\xb2\x9a\x0d\x04\x63\x6c\x50\xb7\x33\x07\xba\x8d\x1c\x39\x71\x5a\xcf\xb3\xf0\xea\x09\x14\x65\x61\x3e\x71\xc6\x47\x00\xc3\xfa\x2a\x9f\x96\x19\xa4\xf1\xc8\xd9\xa8\xe8\x80\x6d\x87\xa7\xe5\xe5\xc8\x61\xc0\x80\x73\x1f\x02\xd5\x4d\x07\x58\xf1\xde\x14\xe5\x86\x7a\xf7\x70\x1e\x36\x09\x9c\xa7\x59\x86\xd5\xc2\x46\x34\xad\x29\xca\x38\x76\x20\xca\xd2\xf9\xbe\x2f\x1e\x39\xa7\x42\x91\xcb\x02\x60\x11\x7a\xa4\xa5\x04\x86\x9c\x93\xe6\x2e\xb8\xe4\x07\xd2\x1a\x2a\x10\xc0\x05\x09\x5f\x91\xe0\x0a\x3c\xe2\x0a\x89\x79\x0a\xb8\x22\x16\x08\x14\xc4\x3c\x0f\x04\x23\x57\xeb\x13\x9f\x02\x25\x41\x06\x24\x3d\x0b\xe1\x2a\x0d\x4a\x92\xf2\x5d\x60\xa0\x14\x31\xae\x5a\x97\x02\x2d\xa2\xee\x19\xb9\x22\x80\x7e\x89\x22\x4f\x05\xc0\x19\x05\x2e\x07\xce\x89\xbb\x12\x04\x31\x26\xc0\xeb\x96\xdb\x04\x6c\x44\x25\x35\xec\x44\xe4\x82\x74\xa0\xc0\xf7\x89\x33\x0f\xb8\x26\xad\x3d\x08\x14\x58\x62\x1c\x02\x35\x09\x24\xb9\xd1\x8a\x1c\x74\xe4\x14\x76\xe4\xa0\x23\xc7\xb1\x27\x87\x96\x1d\x5a\x76\x96\x1c\xf6\xe4\xfa\x50\xd8\x87\xea\xf2\x09\xd0\x23\x97\x29\x70\x49\x06\x1e\x72\x46\x9e\x50\x5d\xda\xaa\x13\x8b\xbb\xb2\xc5\x9e\x21\x76\x14\xd1\x72\x44\x9f\x02\xa9\xb0\xe3\x88\x3b\x93\xb1\xe3\x88\x96\xa3\x42\x9b\x07\xf6\x1c\x71\x3b\xf0\x09\x67\x6e\xa7\xbd\x4d\xdb\x46\x63\x24\x3a\x36\x96\x1a\xb0\x49\xb7\x87\xfe\xf2\xd4\x67\xe0\x6a\xf2\x3d\x79\xe2\x33\xf0\x3c\xf2\x3c\x09\x5a\x92\x92\x1e\x68\x01\x9e\x20\x57\x49\xd0\x62\xa2\x54\x28\x40\x00\x03\xc6\x51\xa0\x38\x13\x77\xb6\x40\x91\x70\xdf\x66\x10\x05\xc4\xfc\x4e\x32\x97\x98\x52\xa0\xc8\xd6\x41\x3f\xe6\x82\x94\x56\xc0\xac\x0a\x4c\xa0\xdd\x57\xab\x01\x53\x01\x06\xc4\x79\xb7\x8f\xbe\xdf\x92\xd0\xfa\x44\xbb\x24\xb9\x06\xe5\x91\xb4\xdb\xc4\xc0\xe5\x24\x38\x6c\x72\x5d\x9e\x7a\x8c\x5c\xc1\x41\xf8\x24\xd5\x44\x05\x14\x28\xbf\xe5\xca\x2a\x96\xf8\x14\x30\xbb\x79\xbe\x6f\xa3\x59\xb5\x7d\x14\xa4\xb5\x58\x8d\x35\x69\xa1\x81\x75\xca\x4a\x94\x24\x3c\x85\x9a\x04\xd3\x18\x90\x25\xd3\x8d\x97\xa7\x3d\x28\xa8\x80\x44\xcb\x3d\x52\xae\x3f\xf1\x18\x05\x3c\xd2\xc4\x3d\xdd\x23\x07\x9e\xdd\x00\x5f\x7b\x6b\xc3\x27\xe1\x73\x60\xe8\x92\x62\x1e\x4a\x0a\x98\x44\x9f\xb8\xf6\xbb\xa6\x10\x6e\x6f\xac\x12\x5e\xda\xf7\x9b\x6d\xbe\xae\xa7\x07\x7d\x53\xef\xf7\x77\x52\xe6\x66\xbf\xb5\x3d\xe0\x9e\xb3\xdd\xbc\xb6\x29\x7d\x92\xae\x02\x4e\x5c\x79\x21\xb9\x76\x8f\xed\x1f\x92\x66\x3e\xb0\x0c\x3d\xf0\x8e\xef\xdc\xc0\xc9\x05\x4d\x6e\xab\xb7\xe6\x82\x1d\x26\x8a\xdc\x5d\x1f\x92\xdb\xa2\x4a\x44\xab\xf6\xe7\x4e\xb8\x3a\x30\x55\xef\x84\xe7\xca\x43\x9b\xd9\x33\x2e\xc1\x25\x1d\xc8\x33\xb1\x13\x00\xbb\x55\x09\xf2\x5d\x1f\xb9\x2d\x27\x11\xc8\x67\x5b\xb4\x96\xa7\x82\x5c\xe0\xea\x4c\x93\x66\x3a\x73\xc9\xb5\xed\x02\xab\xff\x33\xae\x26\x9c\xb5\xa8\x0e\x80\xcb\x7b\xe0\x6a\x22\xc8\x5d\x3a\x83\xf7\x49\xdf\x84\xdd\xb1\xe5\x11\xda\x33\x10\xeb\x6e\x00\x0e\x5d\x3f\xec\x38\x40\xb4\xdb\x0e\x14\x20\x26\x3b\xb6\x6d\xa8\x65\xce\x5d\x10\x09\xaa\x56\x26\xea\x4c\x2d\x73\x06\x6a\x6d\xf9\x5b\x96\x0c\x39\xf0\xf5\x36\x22\x6f\x51\x2c\x73\x74\x41\xb6\x28\x27\x9e\x9d\xdd\x99\xcc\x9a\xbc\x15\xdb\x93\x81\x27\x72\x99\xa3\x42\x65\x21\x27\xbc\x95\xcb\x9c\x75\x86\xea\x0d\x17\x65\x1f\x7c\xe2\x2d\x73\x05\xaa\xc7\x3b\xf3\x3f\x20\xd4\xdc\x94\xf3\xcc\x60\x94\x56\xd1\x23\x05\xe3\x1c\xbc\x50\x82\xec\xb3\x42\x0f\x18\xf4\x96\xb5\x3d\x60\xab\x80\xef\xfb\x71\xea\x75\xf7\x43\x1f\xfc\x1e\xc5\x86\x62\xc7\xbd\xc9\x3a\xd2\xfe\x32\xf7\x51\x87\x1a\xf4\x6a\xeb\x5d\x52\x9e\x6f\x5f\xe1\x52\x9f\x48\x12\x4a\xd8\xb1\x10\x1e\x28\xf2\x99\x0b\x9c\x81\x0f\x9c\xd5\x8a\xb4\xab\xc1\x3e\xb1\x95\x65\x97\x08\x92\xfa\x78\x83\x63\x67\x7d\x40\x92\x59\x95\xc6\x8f\x53\x02\x04\xb9\xc7\xb6\x1d\xf9\xaa\x42\x3b\x8f\xdd\xaa\x3d\xaf\xfd\x2d\x71\xdb\x7d\xaf\xad\x6b\x9d\xe0\xbe\xbb\x7b\xd0\xa2\xec\x7b\x46\xdc\xab\x7f\x79\xaf\xef\xe5\x81\x56\x96\x87\x7a\x69\x99\x7b\xd6\xbb\x1f\x90\x1d\x4c\xda\x96\xf4\x81\xac\xb9\x3c\x9c\x76\xb0\x4e\x3b\xe7\x5d\xb8\xff\x6b\xde\xa7\x7d\x96\x07\xc4\x0e\x0e\x88\x6d\xa7\x1e\x54\x9b\xbb\x87\xe4\xb6\x8c\xbe\xaf\xc4\x1f\x16\x3c\xb0\x6f\x83\x5d\x77\x6f\xb5\x7b\x7e\x5c\x59\x87\x24\xff\x3e\x53\xdf\xef\x92\xa1\x3d\xdb\xda\x43\xb0\x3d\x14\x9b\x0a\xa2\x2c\xac\xeb\x91\x33\x47\x09\xd3\x19\xc6\x61\xf5\x0a\xec\x35\x13\x2f\x92\xb4\x31\x90\x4f\x51\xae\x3b\x26\x4e\xdb\xf5\x6c\x7b\xca\x0e\xd3\xc2\x54\xab\x67\xbb\x4f\x63\x3c\xcf\xcc\x25\xd8\x0f\xbc\xb0\x37\xb0\x30\x4b\x67\x05\xa6\x8d\xc9\x6b\x8c\x4c\xd1\x98\x0a\x5e\x2e\xea\x26\x3d\xbf\xc2\xd5\x79\xfd\x21\x77\x36\xc3\xba\x09\xab\x66\x13\x07\x60\x18\xae\x6f\x55\xce\x5e\xc0\x03\x61\xf2\x29\x0a\xfb\x91\xcd\x90\x6d\xf3\xea\x86\xb1\x89\xca\x2a\xb4\xf7\x06\xb4\x47\xfb\xad\x18\xf6\x55\xd2\xce\xd6\xf0\xd3\x14\x72\x83\xc2\x81\xfe\x6e\xeb\x28\xe6\x40\x62\xd2\x59\xd2\x8c\x1c\x29\x1c\xa8\x4a\xfb\x5e\x4c\xf3\x99\x03\x61\x95\x86\x98\x85\x53\x7b\x0f\xdc\x1c\xf6\x9d\xf1\x70\x51\x1b\xb8\xb4\x57\xc4\x27\x7d\xee\x3f\xb8\xbb\x35\x0c\xc6\xab\x2d\xd9\x84\x1e\x84\xe3\xa3\x3b\x6b\x91\xad\xf3\x28\xc2\x16\xa2\x32\x43\x2e\xba\xaf\x6c\x86\xe1\xa2\x29\x6d\x6e\x9b\xa1\xa5\xfb\x80\xb4\xf9\x14\xf3\x18\xd9\x2e\xcb\x2c\x1d\x1f\xd0\xb3\x08\x5b\xec\xee\xb3\xf3\x4b\x14\x5b\xb2\x39\xe3\x37\xdf\xbe\x7e\xf7\xc7\x7f\xda\x0c\x87\x83\x2c\x7d\x18\xaa\x0a\x8b\xf8\x11\x70\xef\x7e\xff\x9b\xdb\xaf\xbf\x7b\xf7\xbb\x2f\xbb\xdb\xe0\x87\x40\xc3\x69\xb9\x68\x1e\x81\xfa\xf6\xcb\x7f\xbc\xf9\xee\xd7\xf7\xf1\x86\x83\x45\xb6\xad\xec\x79\x59\xe5\x77\x15\x7d\x5f\xd7\x29\xca\x4d\xed\xf4\x22\xcb\x5d\xf5\xd2\x62\xbe\x68\xa0\xb9\x9a\x9b\x91\x53\x9b\xb0\x8a\x92\x4d\x76\x16\xbb\xdb\x81\xaa\xcc\x60\xdb\xe8\x5a\xcc\x81\x79\x16\x46\x26\x29\xb3\xd8\x54\x23\xe7\xf6\xb7\x5f\xff\xe7\x9b\x3f\x11\xd1\x6e\x01\x3d\xef\x21\xb7\x09\x58\xa4\x4d\xcb\x0d\xe2\xb4\x5d\xf5\xe6\x7a\xd8\xdf\x75\x4d\x35\xfe\x5f\x00\x00\x00\xff\xff\xa5\xd7\x7d\xfb\x82\x12\x00\x00"

func baseHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeaderTmpl,
		"base/header.tmpl",
	)
}

func baseHeaderTmpl() (*asset, error) {
	bytes, err := baseHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xcd\x8e\xe3\x44\x10\x3e\x27\x4f\x51\x6a\x6e\xab\xed\x71\xe6\x07\x09\xed\x3a\x96\x10\xe2\xe7\x00\x12\x12\x2b\x71\x2e\xdb\x15\x77\x33\xe5\x6e\xab\xbb\x3a\x99\x30\x1a\x89\x33\x3c\x05\x0f\x81\x34\x0f\x34\x17\xde\x02\x39\x8e\x33\x4e\x76\xb2\xec\x01\x24\xb8\x38\xdd\xa9\xff\xef\xab\x2a\xf5\xfd\xbd\x50\xdb\x31\x0a\x81\x2a\x31\x52\x66\x08\x6b\x0a\x0a\x2e\x1e\x1e\xe6\xf3\x79\x5e\xdb\x35\x54\x8c\x31\x2e\x55\xe5\x9d\xa0\x75\x14\x54\x31\xbf\xbf\xcf\x5e\x41\x14\x0c\x02\xaf\xb2\x87\x87\x39\xc0\x54\x33\xf8\x0d\x34\xfa\x53\x55\xcc\x01\x8e\x25\x95\x67\xdd\xd6\xfa\xb3\xbd\x08\x86\xef\xb1\x4e\xad\x57\x4c\x77\xd0\x7f\x74\xe5\x39\xb5\x0e\x90\x6d\xe3\xb4\x15\x6a\xa3\x8e\x12\x48\x2a\x33\xc8\xa3\x09\xd6\xdd\xea\x05\x94\x8d\xde\x18\x2b\xa4\x20\xca\x96\x69\xa9\x36\xb6\x16\xf3\x06\x30\x89\x7f\xab\x8a\xf9\x6c\xb6\x0b\xb7\xff\x9d\x86\x63\x1b\x45\x37\xc1\xa7\x0e\x9e\x8f\x7a\xc5\x29\x1a\x28\x7d\xa8\x29\xe8\xd2\x8b\xf8\x16\x62\x15\x3c\x33\x06\x42\x55\x8c\x9e\x00\x72\x04\x13\x68\xb5\x54\x9f\xa8\xf7\x5d\xee\x72\x86\x93\xbb\xc6\x4a\xac\x77\xd0\x6d\xf5\x35\xb0\xd1\x62\x1b\x23\x0a\x30\x58\xd4\x55\x0a\x81\x9c\x2c\x95\x84\x44\x87\xbc\xcf\x40\xb4\xd1\x97\x8b\xc5\x11\x38\x15\x39\xa1\x00\x3f\xa5\x28\x76\xb5\xd5\x3d\x65\xe4\x44\x97\x24\x1b\x22\x77\xe4\x0f\x20\x8f\x12\xbc\x6b\x46\xa7\x6d\xa9\x2f\x55\xf1\xad\x8d\x02\x03\x1c\xbb\xdc\xfb\x7e\xb0\xae\xc9\xb3\x41\xf9\xd4\x43\x8b\xcc\xc5\x8f\x54\xe7\xd9\x70\x9c\x26\x9c\xd5\x76\x7d\xae\x82\xbe\x11\x2e\x17\xd0\xc7\x84\x9d\xa5\x2a\x7e\xf0\x2d\x41\xc7\x58\x91\xf1\x5c\x53\x80\x7d\xf6\x60\x1d\x20\x74\x18\xb0\x09\xd8\x19\x28\x89\xfd\x06\xc4\xd0\x98\x1b\xa0\xab\xa1\x46\xa1\x8b\x93\x90\x79\x86\xff\x02\x51\xff\x0f\x52\x46\x07\x42\x77\xa2\xdb\x24\x54\xab\xe2\x5d\xa2\xf8\xdf\x25\x6a\xbc\x8c\x33\xfa\xac\x32\x9f\xcd\x0e\xb7\x69\x6e\x6d\xa9\xaf\x55\xb1\x17\xf5\x32\x87\xeb\x61\x8c\x18\x4b\xe2\xa5\xfa\x1e\x1b\x02\x87\x6b\xdb\xe0\x8e\x48\xba\xc3\xb6\xe3\x71\xae\x66\x79\x3a\xc0\xd4\x61\x63\xdd\xa0\x74\xca\xd3\x40\xdf\x81\xa6\x59\xce\x76\x62\x45\x43\xe7\xd4\x36\x62\xc9\x3d\xc8\x39\x1e\x49\xd9\xba\x5b\x55\x3c\x3d\xfe\xfa\xf4\xf8\xcb\x9f\xbf\xff\xd1\x57\x9a\x67\x6c\x3f\xe8\xed\x65\x27\x87\xee\x2d\x9e\x1e\x7f\x7b\xc9\xdb\x2c\xcf\xd2\x8e\xd8\x3c\x73\xb8\xde\x2f\xdf\x3d\x38\x67\x16\xf1\xcd\xb8\x88\x8f\x84\x9d\x8f\xb6\x87\x42\x47\xb1\xd5\xed\xf6\xb0\x53\xc5\x77\x6f\xe0\x2a\x50\xfb\xf6\x60\x76\x62\xa8\x6f\xfa\x4e\xb9\xee\xd7\x31\xf7\xc3\x02\xc1\x27\x57\xf7\xb0\xcc\x27\x0d\x6a\x6e\x46\x83\x55\x14\x6d\x05\xd9\x56\xaa\xf8\xbc\xf4\x49\xf2\xcc\xdc\x1c\xe9\x76\x13\xb2\x17\xaa\xf8\x22\x45\xf1\xad\xfd\x99\x40\x8c\x8d\x10\x69\x98\x50\xf1\x20\xc4\x0c\x5b\x9f\x02\xac\x6d\xb4\xe2\x43\x04\x04\xb6\x22\x4c\x50\x5a\x01\xec\xdd\x0f\x0a\x5d\x2a\xd9\x56\x3b\xb6\x5f\xc3\x26\x58\xa1\x10\x5f\x8f\x5d\xfc\x1a\x7c\x80\xe8\x5b\x12\xd3\xb7\x2c\x71\x24\x20\x27\x36\x10\x6f\x2f\xe0\x9d\x17\x64\xde\x42\xea\xfa\x98\x5b\x9f\x2e\xf2\xac\x9b\x80\x31\x81\xfb\x05\x70\x3e\x0a\x86\x50\x19\xbb\xee\x07\xf5\x04\x09\xcf\x47\x6b\x2b\xb9\x1d\x2b\x35\x0c\xc0\x4c\x34\x01\x72\xb6\xc5\x64\xdd\x15\xdf\x61\xa8\x0c\x5c\x2d\xae\x2e\x9f\x3b\xe6\x43\xfa\x5f\x51\x19\x12\x86\xed\x59\x93\x3c\xf3\xfc\x8f\x56\xfd\x25\x47\xda\x18\x0a\xf4\xb1\x65\xff\x4d\xc5\x5f\x5b\xf9\x26\x95\xe7\x53\x3f\xcd\xfd\xbd\xcb\xe1\x38\x16\xb7\x7b\xf2\x90\xab\x87\x07\xcf\xf3\xbf\x27\xef\xa7\x95\xf7\xb2\x7f\x3f\xfd\x15\x00\x00\xff\xff\xcd\x50\x25\x9c\x5c\x09\x00\x00"

func homeTmplBytes() ([]byte, error) {
	return bindataRead(
		_homeTmpl,
		"home.tmpl",
	)
}

func homeTmpl() (*asset, error) {
	bytes, err := homeTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pageContentTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x6e\xda\x4e\x10\xc6\xef\x7e\x8a\x91\xff\xb7\x08\xe3\xfc\x81\x4a\x55\x6b\x2c\x45\x55\xdb\x5c\x7a\x6a\x5e\x60\xd7\x1e\xd8\x51\xc7\x1e\x6b\x77\x0c\x72\x5d\xde\xbd\x32\xe0\xc4\x84\xa4\xcd\xa1\x17\xb4\xcb\xfc\xe6\xdb\xf9\x3e\xd0\xf4\xbd\x62\xd5\xb0\x51\x84\xd8\x9a\x80\xa9\x43\x53\xa2\x8f\x61\x7e\x38\x44\x51\x14\x65\x25\xed\xa0\x60\x13\xc2\x3a\x2e\xa4\x56\x43\x35\xfa\x38\x8f\xfa\x3e\xbd\x81\xa0\xc6\x2b\xdc\xa4\x87\x43\x04\x30\x25\xbd\xec\x61\x9b\xbc\x8b\xf3\x08\xe0\xb2\x52\x08\x27\x55\x99\xbc\x3f\x97\x00\x32\xb7\x1c\x6b\x8d\x4d\x56\x50\x0d\x1f\x56\x7c\x89\x3e\xb1\xa2\x2a\xd5\x23\x0a\xd0\xf7\xf3\x3b\xaf\x54\x30\xce\x1f\x48\x19\xe1\x17\x7c\x37\x1b\x3c\xbe\x7f\x14\x4b\xdd\x32\x8f\xc6\x8b\x39\xa1\xa3\xbc\x65\xd9\x26\x8d\x04\x7d\x59\xf0\x5e\x2b\xbe\xd6\x3b\x6b\x9c\x45\xb3\xb4\xa4\xdd\x78\xbe\x76\xb5\x7a\x72\x35\x29\x36\x12\x48\x49\xea\x24\x28\x15\x3f\xba\x18\x82\x76\x8c\xeb\x58\xa5\xf9\x00\x0b\x8f\xd5\xc7\xc9\x40\x17\x8d\xa7\x38\x96\x60\xb7\x09\xd3\xd6\x29\x78\x69\xeb\x12\xcb\x09\x3f\x04\xb8\x1a\x1b\x36\x41\x13\x52\xc3\x54\xc4\xf9\x9d\x95\x56\xb3\xd4\xad\x2e\xd8\x66\x44\x2b\x9b\xdc\xc6\xf9\xa7\x36\xa8\x54\xf4\x13\x41\x1d\x05\x08\x58\x0c\x83\x82\x0a\x28\x32\x43\x27\xad\x87\x1d\x05\x52\xf1\x01\x0c\x30\xe9\x10\xba\x25\x05\x33\xc8\x9f\x80\xa6\xb5\x4c\x85\x19\x3a\x67\xb0\xf7\xa4\xe8\xc3\x0c\x86\x3f\x0b\xd6\x3a\x03\xf1\x10\xa4\x42\x75\x54\x6f\x01\x39\x20\x60\xad\xe4\x91\xbb\x39\x3c\x88\x1a\xe6\x0e\xda\x66\x78\xb3\x93\x76\x9e\xa5\xcd\x24\x8c\x49\xdc\x2f\x84\xf3\xa6\x18\x7c\xe1\x68\x87\xe1\x2a\x09\xe1\x11\x67\x0a\x9a\xb4\xf5\xf1\x57\x29\xe1\x14\xcc\x84\x04\xc8\x98\xf2\xcc\x80\xf3\xb8\x59\xc7\xff\xc5\xf9\x37\xe3\x0b\x07\x8b\xdb\xc5\xff\x59\x6a\xf2\x2c\x65\xfa\x33\xff\x05\xad\x6f\x8d\xef\x5e\x6d\xc9\x52\xe1\x7f\xea\xfa\x33\x07\xdc\x3b\xf4\xf8\x56\xdb\x7f\x71\xfc\x95\xf4\xbe\xb5\xaf\x8f\xfe\x7c\xf6\xab\xcb\xe3\x71\x34\x77\xdc\x1f\x58\x97\xa7\xed\xf1\xf4\xed\xb3\x6d\xb4\x11\xd1\xf3\x36\xfa\x1d\x00\x00\xff\xff\x24\x89\xb2\x50\xaa\x04\x00\x00"

func pageContentTmplBytes() ([]byte, error) {
	return bindataRead(
		_pageContentTmpl,
		"page/content.tmpl",
	)
}

func pageContentTmpl() (*asset, error) {
	bytes, err := pageContentTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "page/content.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"about.tmpl":        aboutTmpl,
	"base/footer.tmpl":  baseFooterTmpl,
	"base/header.tmpl":  baseHeaderTmpl,
	"home.tmpl":         homeTmpl,
	"page/content.tmpl": pageContentTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.tmpl": &bintree{aboutTmpl, map[string]*bintree{}},
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{baseHeaderTmpl, map[string]*bintree{}},
	}},
	"home.tmpl": &bintree{homeTmpl, map[string]*bintree{}},
	"page": &bintree{nil, map[string]*bintree{
		"content.tmpl": &bintree{pageContentTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
